
stm32c0-ll.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000e24  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000e24  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a01  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000872  00000000  00000000  00021a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000222e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000166  00000000  00000000  000224e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c727  00000000  00000000  00022646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002517  00000000  00000000  0002ed6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00044ba7  00000000  00000000  00031284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005e8  00000000  00000000  00075e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00076414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000e00 	.word	0x08000e00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000e00 	.word	0x08000e00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__clzsi2>:
 8000220:	211c      	movs	r1, #28
 8000222:	2301      	movs	r3, #1
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	4298      	cmp	r0, r3
 8000228:	d301      	bcc.n	800022e <__clzsi2+0xe>
 800022a:	0c00      	lsrs	r0, r0, #16
 800022c:	3910      	subs	r1, #16
 800022e:	0a1b      	lsrs	r3, r3, #8
 8000230:	4298      	cmp	r0, r3
 8000232:	d301      	bcc.n	8000238 <__clzsi2+0x18>
 8000234:	0a00      	lsrs	r0, r0, #8
 8000236:	3908      	subs	r1, #8
 8000238:	091b      	lsrs	r3, r3, #4
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0x22>
 800023e:	0900      	lsrs	r0, r0, #4
 8000240:	3904      	subs	r1, #4
 8000242:	a202      	add	r2, pc, #8	; (adr r2, 800024c <__clzsi2+0x2c>)
 8000244:	5c10      	ldrb	r0, [r2, r0]
 8000246:	1840      	adds	r0, r0, r1
 8000248:	4770      	bx	lr
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	02020304 	.word	0x02020304
 8000250:	01010101 	.word	0x01010101
	...

0800025c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	0002      	movs	r2, r0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800026a:	1dfb      	adds	r3, r7, #7
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b7f      	cmp	r3, #127	; 0x7f
 8000270:	d828      	bhi.n	80002c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000272:	4a2f      	ldr	r2, [pc, #188]	; (8000330 <__NVIC_SetPriority+0xd4>)
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b25b      	sxtb	r3, r3
 800027a:	089b      	lsrs	r3, r3, #2
 800027c:	33c0      	adds	r3, #192	; 0xc0
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	589b      	ldr	r3, [r3, r2]
 8000282:	1dfa      	adds	r2, r7, #7
 8000284:	7812      	ldrb	r2, [r2, #0]
 8000286:	0011      	movs	r1, r2
 8000288:	2203      	movs	r2, #3
 800028a:	400a      	ands	r2, r1
 800028c:	00d2      	lsls	r2, r2, #3
 800028e:	21ff      	movs	r1, #255	; 0xff
 8000290:	4091      	lsls	r1, r2
 8000292:	000a      	movs	r2, r1
 8000294:	43d2      	mvns	r2, r2
 8000296:	401a      	ands	r2, r3
 8000298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	019b      	lsls	r3, r3, #6
 800029e:	22ff      	movs	r2, #255	; 0xff
 80002a0:	401a      	ands	r2, r3
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	0018      	movs	r0, r3
 80002a8:	2303      	movs	r3, #3
 80002aa:	4003      	ands	r3, r0
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b0:	481f      	ldr	r0, [pc, #124]	; (8000330 <__NVIC_SetPriority+0xd4>)
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	089b      	lsrs	r3, r3, #2
 80002ba:	430a      	orrs	r2, r1
 80002bc:	33c0      	adds	r3, #192	; 0xc0
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002c2:	e031      	b.n	8000328 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <__NVIC_SetPriority+0xd8>)
 80002c6:	1dfb      	adds	r3, r7, #7
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	0019      	movs	r1, r3
 80002cc:	230f      	movs	r3, #15
 80002ce:	400b      	ands	r3, r1
 80002d0:	3b08      	subs	r3, #8
 80002d2:	089b      	lsrs	r3, r3, #2
 80002d4:	3306      	adds	r3, #6
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	18d3      	adds	r3, r2, r3
 80002da:	3304      	adds	r3, #4
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	1dfa      	adds	r2, r7, #7
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	0011      	movs	r1, r2
 80002e4:	2203      	movs	r2, #3
 80002e6:	400a      	ands	r2, r1
 80002e8:	00d2      	lsls	r2, r2, #3
 80002ea:	21ff      	movs	r1, #255	; 0xff
 80002ec:	4091      	lsls	r1, r2
 80002ee:	000a      	movs	r2, r1
 80002f0:	43d2      	mvns	r2, r2
 80002f2:	401a      	ands	r2, r3
 80002f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	019b      	lsls	r3, r3, #6
 80002fa:	22ff      	movs	r2, #255	; 0xff
 80002fc:	401a      	ands	r2, r3
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	0018      	movs	r0, r3
 8000304:	2303      	movs	r3, #3
 8000306:	4003      	ands	r3, r0
 8000308:	00db      	lsls	r3, r3, #3
 800030a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <__NVIC_SetPriority+0xd8>)
 800030e:	1dfb      	adds	r3, r7, #7
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	001c      	movs	r4, r3
 8000314:	230f      	movs	r3, #15
 8000316:	4023      	ands	r3, r4
 8000318:	3b08      	subs	r3, #8
 800031a:	089b      	lsrs	r3, r3, #2
 800031c:	430a      	orrs	r2, r1
 800031e:	3306      	adds	r3, #6
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	18c3      	adds	r3, r0, r3
 8000324:	3304      	adds	r3, #4
 8000326:	601a      	str	r2, [r3, #0]
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b003      	add	sp, #12
 800032e:	bd90      	pop	{r4, r7, pc}
 8000330:	e000e100 	.word	0xe000e100
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <LL_RCC_HSI_Enable+0x18>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <LL_RCC_HSI_Enable+0x18>)
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0049      	lsls	r1, r1, #1
 8000346:	430a      	orrs	r2, r1
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000

08000354 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <LL_RCC_HSI_IsReady+0x24>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	401a      	ands	r2, r3
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	00db      	lsls	r3, r3, #3
 8000366:	429a      	cmp	r2, r3
 8000368:	d101      	bne.n	800036e <LL_RCC_HSI_IsReady+0x1a>
 800036a:	2301      	movs	r3, #1
 800036c:	e000      	b.n	8000370 <LL_RCC_HSI_IsReady+0x1c>
 800036e:	2300      	movs	r3, #0
}
 8000370:	0018      	movs	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	40021000 	.word	0x40021000

0800037c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800038a:	4013      	ands	r3, r2
 800038c:	0019      	movs	r1, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	021a      	lsls	r2, r3, #8
 8000392:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000394:	430a      	orrs	r2, r1
 8000396:	605a      	str	r2, [r3, #4]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b002      	add	sp, #8
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	ffff80ff 	.word	0xffff80ff

080003a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <LL_RCC_SetSysClkSource+0x24>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	2207      	movs	r2, #7
 80003b6:	4393      	bics	r3, r2
 80003b8:	0019      	movs	r1, r3
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <LL_RCC_SetSysClkSource+0x24>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	430a      	orrs	r2, r1
 80003c0:	609a      	str	r2, [r3, #8]
}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <LL_RCC_GetSysClkSource+0x14>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	2238      	movs	r2, #56	; 0x38
 80003da:	4013      	ands	r3, r2
}
 80003dc:	0018      	movs	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_HCLK_DIV_256  
  *         @arg @ref LL_RCC_HCLK_DIV_512  
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_SetAHBPrescaler+0x24>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <LL_RCC_SetAHBPrescaler+0x28>)
 80003f6:	4013      	ands	r3, r2
 80003f8:	0019      	movs	r1, r3
 80003fa:	4b04      	ldr	r3, [pc, #16]	; (800040c <LL_RCC_SetAHBPrescaler+0x24>)
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	430a      	orrs	r2, r1
 8000400:	609a      	str	r2, [r3, #8]
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	40021000 	.word	0x40021000
 8000410:	fffff0ff 	.word	0xfffff0ff

08000414 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <LL_RCC_SetAPB1Prescaler+0x24>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000422:	4013      	ands	r3, r2
 8000424:	0019      	movs	r1, r3
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	430a      	orrs	r2, r1
 800042c:	609a      	str	r2, [r3, #8]
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021000 	.word	0x40021000
 800043c:	ffff8fff 	.word	0xffff8fff

08000440 <LL_RCC_SetHSIDiv>:
  *         @arg @ref LL_RCC_HSI_DIV_64
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <LL_RCC_SetHSIDiv+0x24>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a06      	ldr	r2, [pc, #24]	; (8000468 <LL_RCC_SetHSIDiv+0x28>)
 800044e:	4013      	ands	r3, r2
 8000450:	0019      	movs	r1, r3
 8000452:	4b04      	ldr	r3, [pc, #16]	; (8000464 <LL_RCC_SetHSIDiv+0x24>)
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	40021000 	.word	0x40021000
 8000468:	ffffc7ff 	.word	0xffffc7ff

0800046c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DBGMCU
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <LL_APB1_GRP1_EnableClock+0x28>)
 8000476:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <LL_APB1_GRP1_EnableClock+0x28>)
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	430a      	orrs	r2, r1
 800047e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <LL_APB1_GRP1_EnableClock+0x28>)
 8000482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4013      	ands	r3, r2
 8000488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b004      	add	sp, #16
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000

08000498 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80004a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <LL_APB2_GRP1_EnableClock+0x28>)
 80004ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004b6:	68fb      	ldr	r3, [r7, #12]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <LL_IOP_GRP1_EnableClock+0x28>)
 80004ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <LL_IOP_GRP1_EnableClock+0x28>)
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	430a      	orrs	r2, r1
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <LL_IOP_GRP1_EnableClock+0x28>)
 80004da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4013      	ands	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b004      	add	sp, #16
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021000 	.word	0x40021000

080004f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b002      	add	sp, #8
 8000506:	bd80      	pop	{r7, pc}

08000508 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	4013      	ands	r3, r2
 800051e:	041a      	lsls	r2, r3, #16
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	43db      	mvns	r3, r3
 8000524:	6839      	ldr	r1, [r7, #0]
 8000526:	400b      	ands	r3, r1
 8000528:	431a      	orrs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	619a      	str	r2, [r3, #24]
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b004      	add	sp, #16
 8000534:	bd80      	pop	{r7, pc}

08000536 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800053a:	2001      	movs	r0, #1
 800053c:	f7ff ffac 	bl	8000498 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	055b      	lsls	r3, r3, #21
 8000544:	0018      	movs	r0, r3
 8000546:	f7ff ff91 	bl	800046c <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 800054a:	2301      	movs	r3, #1
 800054c:	425b      	negs	r3, r3
 800054e:	2103      	movs	r1, #3
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff fe83 	bl	800025c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f80d 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f839 	bl	80005d0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 800055e:	23a0      	movs	r3, #160	; 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2120      	movs	r1, #32
 8000564:	0018      	movs	r0, r3
 8000566:	f7ff ffcf 	bl	8000508 <LL_GPIO_TogglePin>
	 // Delay 100 ms
	 LL_mDelay(100);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f000 fbea 	bl	8000d44 <LL_mDelay>
	 LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8000570:	e7f5      	b.n	800055e <main+0x28>
	...

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000578:	f7ff fede 	bl	8000338 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	f7ff fee9 	bl	8000354 <LL_RCC_HSI_IsReady>
 8000582:	0003      	movs	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d1fa      	bne.n	800057e <SystemClock_Config+0xa>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8000588:	2040      	movs	r0, #64	; 0x40
 800058a:	f7ff fef7 	bl	800037c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetHSIDiv(LL_RCC_HSI_DIV_4);
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	015b      	lsls	r3, r3, #5
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff54 	bl	8000440 <LL_RCC_SetHSIDiv>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_HCLK_DIV_1);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ff25 	bl	80003e8 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800059e:	2000      	movs	r0, #0
 80005a0:	f7ff ff02 	bl	80003a8 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	f7ff ff13 	bl	80003d0 <LL_RCC_GetSysClkSource>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d1fb      	bne.n	80005a6 <SystemClock_Config+0x32>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff ff30 	bl	8000414 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(12000000);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <SystemClock_Config+0x58>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fbb4 	bl	8000d24 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(12000000);
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <SystemClock_Config+0x58>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fbe4 	bl	8000d8c <LL_SetSystemCoreClock>
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	00b71b00 	.word	0x00b71b00

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2318      	movs	r3, #24
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f000 fbe2 	bl	8000da8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff ff6d 	bl	80004c4 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80005ea:	23a0      	movs	r3, #160	; 0xa0
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	2120      	movs	r1, #32
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff ff7d 	bl	80004f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2220      	movs	r2, #32
 80005fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2201      	movs	r2, #1
 8000600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000608:	003b      	movs	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800060e:	003b      	movs	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	003a      	movs	r2, r7
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f000 faa9 	bl	8000b74 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b006      	add	sp, #24
 8000628:	bd80      	pop	{r7, pc}

0800062a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062e:	e7fe      	b.n	800062e <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <HardFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <SystemInit+0x14>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	0512      	lsls	r2, r2, #20
 800065e:	609a      	str	r2, [r3, #8]
#endif
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff fff0 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000674:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000676:	e003      	b.n	8000680 <LoopCopyDataInit>

08000678 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800067a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800067c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800067e:	3104      	adds	r1, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <LoopForever+0xa>)
  ldr r3, =_edata
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000684:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000686:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000688:	d3f6      	bcc.n	8000678 <CopyDataInit>
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  b LoopFillZerobss
 800068c:	e002      	b.n	8000694 <LoopFillZerobss>

0800068e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000690:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000692:	3204      	adds	r2, #4

08000694 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <LoopForever+0x16>)
  cmp r2, r3
 8000696:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000698:	d3f9      	bcc.n	800068e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 fb8d 	bl	8000db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff ff4a 	bl	8000536 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80006a8:	08000e20 	.word	0x08000e20
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006b0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80006b4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80006b8:	20000020 	.word	0x20000020

080006bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_IRQHandler>

080006be <LL_GPIO_SetPinMode>:
{
 80006be:	b590      	push	{r4, r7, lr}
 80006c0:	b08d      	sub	sp, #52	; 0x34
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	61bb      	str	r3, [r7, #24]
#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
#else
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80006d2:	231f      	movs	r3, #31
 80006d4:	617b      	str	r3, [r7, #20]

  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	085b      	lsrs	r3, r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	e00e      	b.n	8000700 <LL_GPIO_SetPinMode+0x42>
  {
    result <<= 1U;
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
    s--;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1ed      	bne.n	80006e2 <LL_GPIO_SetPinMode+0x24>
  }
  result <<= s;                        /* shift when v's highest bits are zero */
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	409a      	lsls	r2, r3
 800070c:	0013      	movs	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
#endif
  return result;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d101      	bne.n	800071e <LL_GPIO_SetPinMode+0x60>
  {
    return 32U;
 800071a:	2320      	movs	r3, #32
 800071c:	e004      	b.n	8000728 <LL_GPIO_SetPinMode+0x6a>
  }
  return __builtin_clz(value);
 800071e:	69f8      	ldr	r0, [r7, #28]
 8000720:	f7ff fd7e 	bl	8000220 <__clzsi2>
 8000724:	0003      	movs	r3, r0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	2203      	movs	r2, #3
 800072c:	409a      	lsls	r2, r3
 800072e:	0013      	movs	r3, r2
 8000730:	43db      	mvns	r3, r3
 8000732:	401c      	ands	r4, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000738:	231f      	movs	r3, #31
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073e:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000742:	085b      	lsrs	r3, r3, #1
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
 8000746:	e00e      	b.n	8000766 <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	2201      	movs	r2, #1
 8000752:	4013      	ands	r3, r2
 8000754:	6a3a      	ldr	r2, [r7, #32]
 8000756:	4313      	orrs	r3, r2
 8000758:	623b      	str	r3, [r7, #32]
    s--;
 800075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075c:	3b01      	subs	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	085b      	lsrs	r3, r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1ed      	bne.n	8000748 <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800076c:	6a3a      	ldr	r2, [r7, #32]
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	409a      	lsls	r2, r3
 8000772:	0013      	movs	r3, r2
 8000774:	623b      	str	r3, [r7, #32]
  return result;
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 8000780:	2320      	movs	r3, #32
 8000782:	e004      	b.n	800078e <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 8000784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000786:	f7ff fd4b 	bl	8000220 <__clzsi2>
 800078a:	0003      	movs	r3, r0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	409a      	lsls	r2, r3
 8000794:	0013      	movs	r3, r2
 8000796:	0022      	movs	r2, r4
 8000798:	431a      	orrs	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	601a      	str	r2, [r3, #0]
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b00d      	add	sp, #52	; 0x34
 80007a4:	bd90      	pop	{r4, r7, pc}

080007a6 <LL_GPIO_SetPinOutputType>:
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b084      	sub	sp, #16
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	401a      	ands	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	434b      	muls	r3, r1
 80007c2:	431a      	orrs	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	605a      	str	r2, [r3, #4]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b004      	add	sp, #16
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <LL_GPIO_SetPinSpeed>:
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08d      	sub	sp, #52	; 0x34
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	689c      	ldr	r4, [r3, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80007e4:	231f      	movs	r3, #31
 80007e6:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	085b      	lsrs	r3, r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	e00e      	b.n	8000812 <LL_GPIO_SetPinSpeed+0x42>
    result <<= 1U;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4013      	ands	r3, r2
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
    s--;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3b01      	subs	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	085b      	lsrs	r3, r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1ed      	bne.n	80007f4 <LL_GPIO_SetPinSpeed+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	409a      	lsls	r2, r3
 800081e:	0013      	movs	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
  return result;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <LL_GPIO_SetPinSpeed+0x60>
    return 32U;
 800082c:	2320      	movs	r3, #32
 800082e:	e004      	b.n	800083a <LL_GPIO_SetPinSpeed+0x6a>
  return __builtin_clz(value);
 8000830:	69f8      	ldr	r0, [r7, #28]
 8000832:	f7ff fcf5 	bl	8000220 <__clzsi2>
 8000836:	0003      	movs	r3, r0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	409a      	lsls	r2, r3
 8000840:	0013      	movs	r3, r2
 8000842:	43db      	mvns	r3, r3
 8000844:	401c      	ands	r4, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800084a:	231f      	movs	r3, #31
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
 8000858:	e00e      	b.n	8000878 <LL_GPIO_SetPinSpeed+0xa8>
    result <<= 1U;
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	6a3a      	ldr	r2, [r7, #32]
 8000868:	4313      	orrs	r3, r2
 800086a:	623b      	str	r3, [r7, #32]
    s--;
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	3b01      	subs	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
 8000878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1ed      	bne.n	800085a <LL_GPIO_SetPinSpeed+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800087e:	6a3a      	ldr	r2, [r7, #32]
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000882:	409a      	lsls	r2, r3
 8000884:	0013      	movs	r3, r2
 8000886:	623b      	str	r3, [r7, #32]
  return result;
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <LL_GPIO_SetPinSpeed+0xc6>
    return 32U;
 8000892:	2320      	movs	r3, #32
 8000894:	e004      	b.n	80008a0 <LL_GPIO_SetPinSpeed+0xd0>
  return __builtin_clz(value);
 8000896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000898:	f7ff fcc2 	bl	8000220 <__clzsi2>
 800089c:	0003      	movs	r3, r0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	409a      	lsls	r2, r3
 80008a6:	0013      	movs	r3, r2
 80008a8:	0022      	movs	r2, r4
 80008aa:	431a      	orrs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	609a      	str	r2, [r3, #8]
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b00d      	add	sp, #52	; 0x34
 80008b6:	bd90      	pop	{r4, r7, pc}

080008b8 <LL_GPIO_SetPinPull>:
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08d      	sub	sp, #52	; 0x34
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	68dc      	ldr	r4, [r3, #12]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80008cc:	231f      	movs	r3, #31
 80008ce:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	085b      	lsrs	r3, r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	e00e      	b.n	80008fa <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	2201      	movs	r2, #1
 80008e6:	4013      	ands	r3, r2
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
    s--;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	085b      	lsrs	r3, r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1ed      	bne.n	80008dc <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
  return result;
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <LL_GPIO_SetPinPull+0x60>
    return 32U;
 8000914:	2320      	movs	r3, #32
 8000916:	e004      	b.n	8000922 <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 8000918:	69f8      	ldr	r0, [r7, #28]
 800091a:	f7ff fc81 	bl	8000220 <__clzsi2>
 800091e:	0003      	movs	r3, r0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	409a      	lsls	r2, r3
 8000928:	0013      	movs	r3, r2
 800092a:	43db      	mvns	r3, r3
 800092c:	401c      	ands	r4, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000932:	231f      	movs	r3, #31
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000940:	e00e      	b.n	8000960 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	6a3a      	ldr	r2, [r7, #32]
 8000950:	4313      	orrs	r3, r2
 8000952:	623b      	str	r3, [r7, #32]
    s--;
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	3b01      	subs	r3, #1
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800095a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1ed      	bne.n	8000942 <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000966:	6a3a      	ldr	r2, [r7, #32]
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	623b      	str	r3, [r7, #32]
  return result;
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 800097a:	2320      	movs	r3, #32
 800097c:	e004      	b.n	8000988 <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 800097e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000980:	f7ff fc4e 	bl	8000220 <__clzsi2>
 8000984:	0003      	movs	r3, r0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	409a      	lsls	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	0022      	movs	r2, r4
 8000992:	431a      	orrs	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	60da      	str	r2, [r3, #12]
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b00d      	add	sp, #52	; 0x34
 800099e:	bd90      	pop	{r4, r7, pc}

080009a0 <LL_GPIO_SetAFPin_0_7>:
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08d      	sub	sp, #52	; 0x34
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	6a1c      	ldr	r4, [r3, #32]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80009b4:	231f      	movs	r3, #31
 80009b6:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	e00e      	b.n	80009e2 <LL_GPIO_SetAFPin_0_7+0x42>
    result <<= 1U;
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4013      	ands	r3, r2
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
    s--;
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3b01      	subs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	085b      	lsrs	r3, r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1ed      	bne.n	80009c4 <LL_GPIO_SetAFPin_0_7+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	409a      	lsls	r2, r3
 80009ee:	0013      	movs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
  return result;
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <LL_GPIO_SetAFPin_0_7+0x60>
    return 32U;
 80009fc:	2320      	movs	r3, #32
 80009fe:	e004      	b.n	8000a0a <LL_GPIO_SetAFPin_0_7+0x6a>
  return __builtin_clz(value);
 8000a00:	69f8      	ldr	r0, [r7, #28]
 8000a02:	f7ff fc0d 	bl	8000220 <__clzsi2>
 8000a06:	0003      	movs	r3, r0
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	43db      	mvns	r3, r3
 8000a14:	401c      	ands	r4, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000a1a:	231f      	movs	r3, #31
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a20:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	085b      	lsrs	r3, r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a28:	e00e      	b.n	8000a48 <LL_GPIO_SetAFPin_0_7+0xa8>
    result <<= 1U;
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	6a3a      	ldr	r2, [r7, #32]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	623b      	str	r3, [r7, #32]
    s--;
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1ed      	bne.n	8000a2a <LL_GPIO_SetAFPin_0_7+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000a4e:	6a3a      	ldr	r2, [r7, #32]
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	623b      	str	r3, [r7, #32]
  return result;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <LL_GPIO_SetAFPin_0_7+0xc6>
    return 32U;
 8000a62:	2320      	movs	r3, #32
 8000a64:	e004      	b.n	8000a70 <LL_GPIO_SetAFPin_0_7+0xd0>
  return __builtin_clz(value);
 8000a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a68:	f7ff fbda 	bl	8000220 <__clzsi2>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	0022      	movs	r2, r4
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	621a      	str	r2, [r3, #32]
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b00d      	add	sp, #52	; 0x34
 8000a86:	bd90      	pop	{r4, r7, pc}

08000a88 <LL_GPIO_SetAFPin_8_15>:
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b08d      	sub	sp, #52	; 0x34
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000a9e:	231f      	movs	r3, #31
 8000aa0:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	e00e      	b.n	8000acc <LL_GPIO_SetAFPin_8_15+0x44>
    result <<= 1U;
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
    s--;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	085b      	lsrs	r3, r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1ed      	bne.n	8000aae <LL_GPIO_SetAFPin_8_15+0x26>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
  return result;
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d101      	bne.n	8000aea <LL_GPIO_SetAFPin_8_15+0x62>
    return 32U;
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	e004      	b.n	8000af4 <LL_GPIO_SetAFPin_8_15+0x6c>
  return __builtin_clz(value);
 8000aea:	69f8      	ldr	r0, [r7, #28]
 8000aec:	f7ff fb98 	bl	8000220 <__clzsi2>
 8000af0:	0003      	movs	r3, r0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	220f      	movs	r2, #15
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43db      	mvns	r3, r3
 8000afe:	401c      	ands	r4, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000b06:	231f      	movs	r3, #31
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0c:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b14:	e00e      	b.n	8000b34 <LL_GPIO_SetAFPin_8_15+0xac>
    result <<= 1U;
 8000b16:	6a3b      	ldr	r3, [r7, #32]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4013      	ands	r3, r2
 8000b22:	6a3a      	ldr	r2, [r7, #32]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	623b      	str	r3, [r7, #32]
    s--;
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	085b      	lsrs	r3, r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1ed      	bne.n	8000b16 <LL_GPIO_SetAFPin_8_15+0x8e>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000b3a:	6a3a      	ldr	r2, [r7, #32]
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	623b      	str	r3, [r7, #32]
  return result;
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <LL_GPIO_SetAFPin_8_15+0xca>
    return 32U;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	e004      	b.n	8000b5c <LL_GPIO_SetAFPin_8_15+0xd4>
  return __builtin_clz(value);
 8000b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b54:	f7ff fb64 	bl	8000220 <__clzsi2>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	0022      	movs	r2, r4
 8000b66:	431a      	orrs	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b00d      	add	sp, #52	; 0x34
 8000b72:	bd90      	pop	{r4, r7, pc}

08000b74 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000b84:	231f      	movs	r3, #31
 8000b86:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	085b      	lsrs	r3, r3, #1
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	e00e      	b.n	8000bb2 <LL_GPIO_Init+0x3e>
    result <<= 1U;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
    s--;
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1ed      	bne.n	8000b94 <LL_GPIO_Init+0x20>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
  return result;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <LL_GPIO_Init+0x5c>
    return 32U;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	e004      	b.n	8000bda <LL_GPIO_Init+0x66>
  return __builtin_clz(value);
 8000bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bd2:	f7ff fb25 	bl	8000220 <__clzsi2>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8000bdc:	e06c      	b.n	8000cb8 <LL_GPIO_Init+0x144>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2101      	movs	r1, #1
 8000be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be6:	4091      	lsls	r1, r2
 8000be8:	000a      	movs	r2, r1
 8000bea:	4013      	ands	r3, r2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28

    if (currentpin != 0U)
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d05e      	beq.n	8000cb2 <LL_GPIO_Init+0x13e>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fd5e 	bl	80006be <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d003      	beq.n	8000c12 <LL_GPIO_Init+0x9e>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d106      	bne.n	8000c20 <LL_GPIO_Init+0xac>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff fdd8 	bl	80007d0 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fe45 	bl	80008b8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d13d      	bne.n	8000cb2 <LL_GPIO_Init+0x13e>
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000c3a:	231f      	movs	r3, #31
 8000c3c:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	085b      	lsrs	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	e00e      	b.n	8000c68 <LL_GPIO_Init+0xf4>
    result <<= 1U;
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2201      	movs	r2, #1
 8000c54:	4013      	ands	r3, r2
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
    s--;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	085b      	lsrs	r3, r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1ed      	bne.n	8000c4a <LL_GPIO_Init+0xd6>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  return result;
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <LL_GPIO_Init+0x112>
    return 32U;
 8000c82:	2320      	movs	r3, #32
 8000c84:	e004      	b.n	8000c90 <LL_GPIO_Init+0x11c>
  return __builtin_clz(value);
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff faca 	bl	8000220 <__clzsi2>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d807      	bhi.n	8000ca4 <LL_GPIO_Init+0x130>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fe7f 	bl	80009a0 <LL_GPIO_SetAFPin_0_7>
 8000ca2:	e006      	b.n	8000cb2 <LL_GPIO_Init+0x13e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff feeb 	bl	8000a88 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	40da      	lsrs	r2, r3
 8000cc0:	1e13      	subs	r3, r2, #0
 8000cc2:	d18c      	bne.n	8000bde <LL_GPIO_Init+0x6a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d003      	beq.n	8000cd4 <LL_GPIO_Init+0x160>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d107      	bne.n	8000ce4 <LL_GPIO_Init+0x170>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fd61 	bl	80007a6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b00c      	add	sp, #48	; 0x30
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fa03 	bl	8000108 <__udivsi3>
 8000d02:	0003      	movs	r3, r0
 8000d04:	001a      	movs	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <LL_InitTick+0x30>)
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <LL_InitTick+0x30>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <LL_InitTick+0x30>)
 8000d14:	2205      	movs	r2, #5
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d2c:	23fa      	movs	r3, #250	; 0xfa
 8000d2e:	009a      	lsls	r2, r3, #2
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ffdb 	bl	8000cf0 <LL_InitTick>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <LL_mDelay+0x44>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d52:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	d00c      	beq.n	8000d78 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e008      	b.n	8000d78 <LL_mDelay+0x34>
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <LL_mDelay+0x44>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	025b      	lsls	r3, r3, #9
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d002      	beq.n	8000d78 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f3      	bne.n	8000d66 <LL_mDelay+0x22>
    }
  }
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b004      	add	sp, #16
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <LL_SetSystemCoreClock+0x18>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000000 	.word	0x20000000

08000da8 <memset>:
 8000da8:	0003      	movs	r3, r0
 8000daa:	1882      	adds	r2, r0, r2
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d100      	bne.n	8000db2 <memset+0xa>
 8000db0:	4770      	bx	lr
 8000db2:	7019      	strb	r1, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	e7f9      	b.n	8000dac <memset+0x4>

08000db8 <__libc_init_array>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4c0c      	ldr	r4, [pc, #48]	; (8000df0 <__libc_init_array+0x38>)
 8000dbe:	4d0d      	ldr	r5, [pc, #52]	; (8000df4 <__libc_init_array+0x3c>)
 8000dc0:	1b64      	subs	r4, r4, r5
 8000dc2:	10a4      	asrs	r4, r4, #2
 8000dc4:	42a6      	cmp	r6, r4
 8000dc6:	d109      	bne.n	8000ddc <__libc_init_array+0x24>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	f000 f819 	bl	8000e00 <_init>
 8000dce:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <__libc_init_array+0x40>)
 8000dd0:	4d0a      	ldr	r5, [pc, #40]	; (8000dfc <__libc_init_array+0x44>)
 8000dd2:	1b64      	subs	r4, r4, r5
 8000dd4:	10a4      	asrs	r4, r4, #2
 8000dd6:	42a6      	cmp	r6, r4
 8000dd8:	d105      	bne.n	8000de6 <__libc_init_array+0x2e>
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
 8000ddc:	00b3      	lsls	r3, r6, #2
 8000dde:	58eb      	ldr	r3, [r5, r3]
 8000de0:	4798      	blx	r3
 8000de2:	3601      	adds	r6, #1
 8000de4:	e7ee      	b.n	8000dc4 <__libc_init_array+0xc>
 8000de6:	00b3      	lsls	r3, r6, #2
 8000de8:	58eb      	ldr	r3, [r5, r3]
 8000dea:	4798      	blx	r3
 8000dec:	3601      	adds	r6, #1
 8000dee:	e7f2      	b.n	8000dd6 <__libc_init_array+0x1e>
 8000df0:	08000e18 	.word	0x08000e18
 8000df4:	08000e18 	.word	0x08000e18
 8000df8:	08000e1c 	.word	0x08000e1c
 8000dfc:	08000e18 	.word	0x08000e18

08000e00 <_init>:
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e06:	bc08      	pop	{r3}
 8000e08:	469e      	mov	lr, r3
 8000e0a:	4770      	bx	lr

08000e0c <_fini>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e12:	bc08      	pop	{r3}
 8000e14:	469e      	mov	lr, r3
 8000e16:	4770      	bx	lr
