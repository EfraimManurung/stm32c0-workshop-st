
stm32c0-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002350  08002350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002350  08002350  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002350  08002350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002364  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002364  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f6b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014f6  00000000  00000000  00027fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  000294d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000752  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001268f  00000000  00000000  0002a59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a661  00000000  00000000  0003cc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076755  00000000  00000000  0004728a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021ec  00000000  00000000  000bd9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000bfbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022a4 	.word	0x080022a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022a4 	.word	0x080022a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa09 	bl	800063a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80c 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f91c 	bl	8000468 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f84c 	bl	80002cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000234:	4b02      	ldr	r3, [pc, #8]	; (8000240 <main+0x20>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 f889 	bl	8001350 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	e7fe      	b.n	800023e <main+0x1e>
 8000240:	20000028 	.word	0x20000028

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08d      	sub	sp, #52	; 0x34
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	2414      	movs	r4, #20
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	231c      	movs	r3, #28
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f001 fff9 	bl	800224c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025a:	003b      	movs	r3, r7
 800025c:	0018      	movs	r0, r3
 800025e:	2314      	movs	r3, #20
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f001 fff2 	bl	800224c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2202      	movs	r2, #2
 800026c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	193b      	adds	r3, r7, r4
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	0052      	lsls	r2, r2, #1
 8000274:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2240      	movs	r2, #64	; 0x40
 8000280:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	193b      	adds	r3, r7, r4
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fc7b 	bl	8000b80 <HAL_RCC_OscConfig>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800028e:	f000 f901 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	003b      	movs	r3, r7
 8000294:	2207      	movs	r2, #7
 8000296:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000298:	003b      	movs	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	003b      	movs	r3, r7
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002a4:	003b      	movs	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80002aa:	003b      	movs	r3, r7
 80002ac:	22e0      	movs	r2, #224	; 0xe0
 80002ae:	01d2      	lsls	r2, r2, #7
 80002b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002b2:	003b      	movs	r3, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fe46 	bl	8000f48 <HAL_RCC_ClockConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002c0:	f000 f8e8 	bl	8000494 <Error_Handler>
  }
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b00d      	add	sp, #52	; 0x34
 80002ca:	bd90      	pop	{r4, r7, pc}

080002cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b09c      	sub	sp, #112	; 0x70
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d2:	2360      	movs	r3, #96	; 0x60
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	0018      	movs	r0, r3
 80002d8:	2310      	movs	r3, #16
 80002da:	001a      	movs	r2, r3
 80002dc:	2100      	movs	r1, #0
 80002de:	f001 ffb5 	bl	800224c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e2:	2354      	movs	r3, #84	; 0x54
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	230c      	movs	r3, #12
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f001 ffad 	bl	800224c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f2:	2338      	movs	r3, #56	; 0x38
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	231c      	movs	r3, #28
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f001 ffa5 	bl	800224c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	2334      	movs	r3, #52	; 0x34
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f001 ff9e 	bl	800224c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000310:	4b51      	ldr	r3, [pc, #324]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000312:	4a52      	ldr	r2, [pc, #328]	; (800045c <MX_TIM1_Init+0x190>)
 8000314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000316:	4b50      	ldr	r3, [pc, #320]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000318:	227f      	movs	r2, #127	; 0x7f
 800031a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b4e      	ldr	r3, [pc, #312]	; (8000458 <MX_TIM1_Init+0x18c>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 46875;
 8000322:	4b4d      	ldr	r3, [pc, #308]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000324:	4a4e      	ldr	r2, [pc, #312]	; (8000460 <MX_TIM1_Init+0x194>)
 8000326:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b4b      	ldr	r3, [pc, #300]	; (8000458 <MX_TIM1_Init+0x18c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800032e:	4b4a      	ldr	r3, [pc, #296]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000330:	2200      	movs	r2, #0
 8000332:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000334:	4b48      	ldr	r3, [pc, #288]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000336:	2200      	movs	r2, #0
 8000338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800033a:	4b47      	ldr	r3, [pc, #284]	; (8000458 <MX_TIM1_Init+0x18c>)
 800033c:	0018      	movs	r0, r3
 800033e:	f000 ff4f 	bl	80011e0 <HAL_TIM_Base_Init>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000346:	f000 f8a5 	bl	8000494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034a:	2160      	movs	r1, #96	; 0x60
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2280      	movs	r2, #128	; 0x80
 8000350:	0152      	lsls	r2, r2, #5
 8000352:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000354:	187a      	adds	r2, r7, r1
 8000356:	4b40      	ldr	r3, [pc, #256]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000358:	0011      	movs	r1, r2
 800035a:	0018      	movs	r0, r3
 800035c:	f001 f9d0 	bl	8001700 <HAL_TIM_ConfigClockSource>
 8000360:	1e03      	subs	r3, r0, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000364:	f000 f896 	bl	8000494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000368:	4b3b      	ldr	r3, [pc, #236]	; (8000458 <MX_TIM1_Init+0x18c>)
 800036a:	0018      	movs	r0, r3
 800036c:	f000 ff90 	bl	8001290 <HAL_TIM_PWM_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000374:	f000 f88e 	bl	8000494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000378:	2154      	movs	r1, #84	; 0x54
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800038c:	187a      	adds	r2, r7, r1
 800038e:	4b32      	ldr	r3, [pc, #200]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000390:	0011      	movs	r1, r2
 8000392:	0018      	movs	r0, r3
 8000394:	f001 fe52 	bl	800203c <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800039c:	f000 f87a 	bl	8000494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a0:	2138      	movs	r1, #56	; 0x38
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2260      	movs	r2, #96	; 0x60
 80003a6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 23437;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	4a2e      	ldr	r2, [pc, #184]	; (8000464 <MX_TIM1_Init+0x198>)
 80003ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_TIM1_Init+0x18c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 f894 	bl	8001500 <HAL_TIM_PWM_ConfigChannel>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80003dc:	f000 f85a 	bl	8000494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	0192      	lsls	r2, r2, #6
 8000404:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2280      	movs	r2, #128	; 0x80
 800041c:	0492      	lsls	r2, r2, #18
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000432:	1d3a      	adds	r2, r7, #4
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fe61 	bl	8002100 <HAL_TIMEx_ConfigBreakDeadTime>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000442:	f000 f827 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <MX_TIM1_Init+0x18c>)
 8000448:	0018      	movs	r0, r3
 800044a:	f000 f86d 	bl	8000528 <HAL_TIM_MspPostInit>

}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b01c      	add	sp, #112	; 0x70
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000028 	.word	0x20000028
 800045c:	40012c00 	.word	0x40012c00
 8000460:	0000b71b 	.word	0x0000b71b
 8000464:	00005b8d 	.word	0x00005b8d

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_GPIO_Init+0x28>)
 8000470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <MX_GPIO_Init+0x28>)
 8000474:	2101      	movs	r1, #1
 8000476:	430a      	orrs	r2, r1
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_GPIO_Init+0x28>)
 800047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047e:	2201      	movs	r2, #1
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40021000 	.word	0x40021000

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	641a      	str	r2, [r3, #64]	; 0x40
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0549      	lsls	r1, r1, #21
 80004c8:	430a      	orrs	r2, r1
 80004ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <HAL_MspInit+0x44>)
 80004ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	055b      	lsls	r3, r3, #21
 80004d4:	4013      	ands	r3, r2
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_TIM_Base_MspInit+0x38>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d10d      	bne.n	8000516 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_TIM_Base_MspInit+0x3c>)
 80004fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_TIM_Base_MspInit+0x3c>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0109      	lsls	r1, r1, #4
 8000504:	430a      	orrs	r2, r1
 8000506:	641a      	str	r2, [r3, #64]	; 0x40
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_TIM_Base_MspInit+0x3c>)
 800050a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b004      	add	sp, #16
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40012c00 	.word	0x40012c00
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	240c      	movs	r4, #12
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 fe86 	bl	800224c <memset>
  if(htim->Instance==TIM1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <HAL_TIM_MspPostInit+0x70>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d122      	bne.n	8000590 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_TIM_MspPostInit+0x74>)
 800054c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <HAL_TIM_MspPostInit+0x74>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_TIM_MspPostInit+0x74>)
 8000558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2220      	movs	r2, #32
 8000568:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2202      	movs	r2, #2
 800056e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2205      	movs	r2, #5
 8000580:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	187a      	adds	r2, r7, r1
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 f986 	bl	800089c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b009      	add	sp, #36	; 0x24
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	40012c00 	.word	0x40012c00
 800059c:	40021000 	.word	0x40021000

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c4:	f000 f89a 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <SystemInit+0x14>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	0512      	lsls	r2, r2, #20
 80005da:	609a      	str	r2, [r3, #8]
#endif
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ec:	f7ff fff0 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005f2:	e003      	b.n	80005fc <LoopCopyDataInit>

080005f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80005f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005fa:	3104      	adds	r1, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <LoopForever+0xa>)
  ldr r3, =_edata
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <LoopForever+0xe>)
  adds r2, r0, r1
 8000600:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000602:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000604:	d3f6      	bcc.n	80005f4 <CopyDataInit>
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LoopForever+0x12>)
  b LoopFillZerobss
 8000608:	e002      	b.n	8000610 <LoopFillZerobss>

0800060a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  str  r3, [r2]
 800060c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060e:	3204      	adds	r2, #4

08000610 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <LoopForever+0x16>)
  cmp r2, r3
 8000612:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000614:	d3f9      	bcc.n	800060a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000616:	f001 fe21 	bl	800225c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fe01 	bl	8000220 <main>

0800061e <LoopForever>:

LoopForever:
    b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   r0, =_estack
 8000620:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000624:	08002358 	.word	0x08002358
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800062c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000630:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000634:	20000078 	.word	0x20000078

08000638 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_IRQHandler>

0800063a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f80e 	bl	8000668 <HAL_InitTick>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d003      	beq.n	8000658 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e001      	b.n	800065c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000658:	f7ff ff22 	bl	80004a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	230f      	movs	r3, #15
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <HAL_InitTick+0x88>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d02b      	beq.n	80006d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_InitTick+0x8c>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <HAL_InitTick+0x88>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	0019      	movs	r1, r3
 800068a:	23fa      	movs	r3, #250	; 0xfa
 800068c:	0098      	lsls	r0, r3, #2
 800068e:	f7ff fd3b 	bl	8000108 <__udivsi3>
 8000692:	0003      	movs	r3, r0
 8000694:	0019      	movs	r1, r3
 8000696:	0020      	movs	r0, r4
 8000698:	f7ff fd36 	bl	8000108 <__udivsi3>
 800069c:	0003      	movs	r3, r0
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f8ef 	bl	8000882 <HAL_SYSTICK_Config>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d112      	bne.n	80006ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d80a      	bhi.n	80006c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	2301      	movs	r3, #1
 80006b2:	425b      	negs	r3, r3
 80006b4:	2200      	movs	r2, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 f8ce 	bl	8000858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_InitTick+0x90>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e00d      	b.n	80006e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006c4:	230f      	movs	r3, #15
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e008      	b.n	80006e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ce:	230f      	movs	r3, #15
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e003      	b.n	80006e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006d8:	230f      	movs	r3, #15
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80006e0:	230f      	movs	r3, #15
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	781b      	ldrb	r3, [r3, #0]
}
 80006e6:	0018      	movs	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b005      	add	sp, #20
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x1c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	001a      	movs	r2, r3
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x20>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	18d2      	adds	r2, r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_IncTick+0x20>)
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000008 	.word	0x20000008
 800071c:	20000074 	.word	0x20000074

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b02      	ldr	r3, [pc, #8]	; (8000730 <HAL_GetTick+0x10>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	0018      	movs	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000074 	.word	0x20000074

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	0002      	movs	r2, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b7f      	cmp	r3, #127	; 0x7f
 8000748:	d828      	bhi.n	800079c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074a:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <__NVIC_SetPriority+0xd4>)
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	33c0      	adds	r3, #192	; 0xc0
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	589b      	ldr	r3, [r3, r2]
 800075a:	1dfa      	adds	r2, r7, #7
 800075c:	7812      	ldrb	r2, [r2, #0]
 800075e:	0011      	movs	r1, r2
 8000760:	2203      	movs	r2, #3
 8000762:	400a      	ands	r2, r1
 8000764:	00d2      	lsls	r2, r2, #3
 8000766:	21ff      	movs	r1, #255	; 0xff
 8000768:	4091      	lsls	r1, r2
 800076a:	000a      	movs	r2, r1
 800076c:	43d2      	mvns	r2, r2
 800076e:	401a      	ands	r2, r3
 8000770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	019b      	lsls	r3, r3, #6
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	401a      	ands	r2, r3
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	0018      	movs	r0, r3
 8000780:	2303      	movs	r3, #3
 8000782:	4003      	ands	r3, r0
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000788:	481f      	ldr	r0, [pc, #124]	; (8000808 <__NVIC_SetPriority+0xd4>)
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	33c0      	adds	r3, #192	; 0xc0
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800079a:	e031      	b.n	8000800 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079c:	4a1b      	ldr	r2, [pc, #108]	; (800080c <__NVIC_SetPriority+0xd8>)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0019      	movs	r1, r3
 80007a4:	230f      	movs	r3, #15
 80007a6:	400b      	ands	r3, r1
 80007a8:	3b08      	subs	r3, #8
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	3306      	adds	r3, #6
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	18d3      	adds	r3, r2, r3
 80007b2:	3304      	adds	r3, #4
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1dfa      	adds	r2, r7, #7
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	0011      	movs	r1, r2
 80007bc:	2203      	movs	r2, #3
 80007be:	400a      	ands	r2, r1
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	21ff      	movs	r1, #255	; 0xff
 80007c4:	4091      	lsls	r1, r2
 80007c6:	000a      	movs	r2, r1
 80007c8:	43d2      	mvns	r2, r2
 80007ca:	401a      	ands	r2, r3
 80007cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	019b      	lsls	r3, r3, #6
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	401a      	ands	r2, r3
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	0018      	movs	r0, r3
 80007dc:	2303      	movs	r3, #3
 80007de:	4003      	ands	r3, r0
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <__NVIC_SetPriority+0xd8>)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	001c      	movs	r4, r3
 80007ec:	230f      	movs	r3, #15
 80007ee:	4023      	ands	r3, r4
 80007f0:	3b08      	subs	r3, #8
 80007f2:	089b      	lsrs	r3, r3, #2
 80007f4:	430a      	orrs	r2, r1
 80007f6:	3306      	adds	r3, #6
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	18c3      	adds	r3, r0, r3
 80007fc:	3304      	adds	r3, #4
 80007fe:	601a      	str	r2, [r3, #0]
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b003      	add	sp, #12
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	1e5a      	subs	r2, r3, #1
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	045b      	lsls	r3, r3, #17
 8000820:	429a      	cmp	r2, r3
 8000822:	d301      	bcc.n	8000828 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000824:	2301      	movs	r3, #1
 8000826:	e010      	b.n	800084a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <SysTick_Config+0x44>)
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	3a01      	subs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000830:	2301      	movs	r3, #1
 8000832:	425b      	negs	r3, r3
 8000834:	2103      	movs	r1, #3
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff ff7c 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x44>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x44>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	0018      	movs	r0, r3
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	210f      	movs	r1, #15
 8000864:	187b      	adds	r3, r7, r1
 8000866:	1c02      	adds	r2, r0, #0
 8000868:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	187b      	adds	r3, r7, r1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b25b      	sxtb	r3, r3
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ff5d 	bl	8000734 <__NVIC_SetPriority>
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b004      	add	sp, #16
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ffbf 	bl	8000810 <SysTick_Config>
 8000892:	0003      	movs	r3, r0
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	b002      	add	sp, #8
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80008aa:	e153      	b.n	8000b54 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4091      	lsls	r1, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d100      	bne.n	80008c4 <HAL_GPIO_Init+0x28>
 80008c2:	e144      	b.n	8000b4e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d003      	beq.n	80008d4 <HAL_GPIO_Init+0x38>
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b12      	cmp	r3, #18
 80008d2:	d125      	bne.n	8000920 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	08da      	lsrs	r2, r3, #3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3208      	adds	r2, #8
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	58d3      	ldr	r3, [r2, r3]
 80008e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	2207      	movs	r2, #7
 80008e6:	4013      	ands	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	220f      	movs	r2, #15
 80008ec:	409a      	lsls	r2, r3
 80008ee:	0013      	movs	r3, r2
 80008f0:	43da      	mvns	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	4013      	ands	r3, r2
 80008f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	220f      	movs	r2, #15
 80008fe:	401a      	ands	r2, r3
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	2107      	movs	r1, #7
 8000904:	400b      	ands	r3, r1
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	409a      	lsls	r2, r3
 800090a:	0013      	movs	r3, r2
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4313      	orrs	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	6979      	ldr	r1, [r7, #20]
 800091e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	409a      	lsls	r2, r3
 800092e:	0013      	movs	r3, r2
 8000930:	43da      	mvns	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2203      	movs	r2, #3
 800093e:	401a      	ands	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	409a      	lsls	r2, r3
 8000946:	0013      	movs	r3, r2
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4313      	orrs	r3, r2
 800094c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d00b      	beq.n	8000974 <HAL_GPIO_Init+0xd8>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000968:	2b11      	cmp	r3, #17
 800096a:	d003      	beq.n	8000974 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b12      	cmp	r3, #18
 8000972:	d130      	bne.n	80009d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2203      	movs	r2, #3
 8000980:	409a      	lsls	r2, r3
 8000982:	0013      	movs	r3, r2
 8000984:	43da      	mvns	r2, r3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4013      	ands	r3, r2
 800098a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	409a      	lsls	r2, r3
 8000996:	0013      	movs	r3, r2
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	4313      	orrs	r3, r2
 800099c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009aa:	2201      	movs	r2, #1
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	409a      	lsls	r2, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	43da      	mvns	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	4013      	ands	r3, r2
 80009b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	2201      	movs	r2, #1
 80009c2:	401a      	ands	r2, r3
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	409a      	lsls	r2, r3
 80009c8:	0013      	movs	r3, r2
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d017      	beq.n	8000a0e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	409a      	lsls	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	43da      	mvns	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4013      	ands	r3, r2
 80009f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	055b      	lsls	r3, r3, #21
 8000a16:	4013      	ands	r3, r2
 8000a18:	d100      	bne.n	8000a1c <HAL_GPIO_Init+0x180>
 8000a1a:	e098      	b.n	8000b4e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000a1c:	4a53      	ldr	r2, [pc, #332]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3318      	adds	r3, #24
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	589b      	ldr	r3, [r3, r2]
 8000a28:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	220f      	movs	r2, #15
 8000a34:	409a      	lsls	r2, r3
 8000a36:	0013      	movs	r3, r2
 8000a38:	43da      	mvns	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	23a0      	movs	r3, #160	; 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d019      	beq.n	8000a7e <HAL_GPIO_Init+0x1e2>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <HAL_GPIO_Init+0x2d4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0x1de>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <HAL_GPIO_Init+0x2d8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d00d      	beq.n	8000a76 <HAL_GPIO_Init+0x1da>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a46      	ldr	r2, [pc, #280]	; (8000b78 <HAL_GPIO_Init+0x2dc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d007      	beq.n	8000a72 <HAL_GPIO_Init+0x1d6>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <HAL_GPIO_Init+0x2e0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_GPIO_Init+0x1d2>
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x1e4>
 8000a6e:	2306      	movs	r3, #6
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x1e4>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x1e4>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x1e4>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x1e4>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	2103      	movs	r1, #3
 8000a84:	400a      	ands	r2, r1
 8000a86:	00d2      	lsls	r2, r2, #3
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000a90:	4936      	ldr	r1, [pc, #216]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3318      	adds	r3, #24
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000a9e:	4a33      	ldr	r2, [pc, #204]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	58d3      	ldr	r3, [r2, r3]
 8000aa4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	4013      	ands	r3, r2
 8000aae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	025b      	lsls	r3, r3, #9
 8000ab8:	4013      	ands	r3, r2
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ac4:	4929      	ldr	r1, [pc, #164]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000ace:	2384      	movs	r3, #132	; 0x84
 8000ad0:	58d3      	ldr	r3, [r2, r3]
 8000ad2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	4013      	ands	r3, r2
 8000adc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	029b      	lsls	r3, r3, #10
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000af2:	491e      	ldr	r1, [pc, #120]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000af4:	2284      	movs	r2, #132	; 0x84
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43da      	mvns	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	4013      	ands	r3, r2
 8000b08:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	035b      	lsls	r3, r3, #13
 8000b12:	4013      	ands	r3, r2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	4013      	ands	r3, r2
 8000b32:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	039b      	lsls	r3, r3, #14
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_GPIO_Init+0x2d0>)
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3301      	adds	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	40da      	lsrs	r2, r3
 8000b5c:	1e13      	subs	r3, r2, #0
 8000b5e:	d000      	beq.n	8000b62 <HAL_GPIO_Init+0x2c6>
 8000b60:	e6a4      	b.n	80008ac <HAL_GPIO_Init+0x10>
  }
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	50000400 	.word	0x50000400
 8000b74:	50000800 	.word	0x50000800
 8000b78:	50000c00 	.word	0x50000c00
 8000b7c:	50001400 	.word	0x50001400

08000b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e1d0      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d100      	bne.n	8000b9e <HAL_RCC_OscConfig+0x1e>
 8000b9c:	e069      	b.n	8000c72 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b9e:	4bc8      	ldr	r3, [pc, #800]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2238      	movs	r2, #56	; 0x38
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d105      	bne.n	8000bba <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d15d      	bne.n	8000c72 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e1bc      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	025b      	lsls	r3, r3, #9
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d107      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x56>
 8000bc6:	4bbe      	ldr	r3, [pc, #760]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4bbd      	ldr	r3, [pc, #756]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0249      	lsls	r1, r1, #9
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	e020      	b.n	8000c18 <HAL_RCC_OscConfig+0x98>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	23a0      	movs	r3, #160	; 0xa0
 8000bdc:	02db      	lsls	r3, r3, #11
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d10e      	bne.n	8000c00 <HAL_RCC_OscConfig+0x80>
 8000be2:	4bb7      	ldr	r3, [pc, #732]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4bb6      	ldr	r3, [pc, #728]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	02c9      	lsls	r1, r1, #11
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	4bb3      	ldr	r3, [pc, #716]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4bb2      	ldr	r3, [pc, #712]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	0249      	lsls	r1, r1, #9
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e00b      	b.n	8000c18 <HAL_RCC_OscConfig+0x98>
 8000c00:	4baf      	ldr	r3, [pc, #700]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4bae      	ldr	r3, [pc, #696]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c06:	49af      	ldr	r1, [pc, #700]	; (8000ec4 <HAL_RCC_OscConfig+0x344>)
 8000c08:	400a      	ands	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	4bac      	ldr	r3, [pc, #688]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4bab      	ldr	r3, [pc, #684]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c12:	49ad      	ldr	r1, [pc, #692]	; (8000ec8 <HAL_RCC_OscConfig+0x348>)
 8000c14:	400a      	ands	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d014      	beq.n	8000c4a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c20:	f7ff fd7e 	bl	8000720 <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c28:	e008      	b.n	8000c3c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000c2a:	f7ff fd79 	bl	8000720 <HAL_GetTick>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	2b64      	cmp	r3, #100	; 0x64
 8000c36:	d901      	bls.n	8000c3c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e17b      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c3c:	4ba0      	ldr	r3, [pc, #640]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	d0f0      	beq.n	8000c2a <HAL_RCC_OscConfig+0xaa>
 8000c48:	e013      	b.n	8000c72 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fd69 	bl	8000720 <HAL_GetTick>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000c54:	f7ff fd64 	bl	8000720 <HAL_GetTick>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b64      	cmp	r3, #100	; 0x64
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e166      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c66:	4b96      	ldr	r3, [pc, #600]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	029b      	lsls	r3, r3, #10
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2202      	movs	r2, #2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	d100      	bne.n	8000c7e <HAL_RCC_OscConfig+0xfe>
 8000c7c:	e086      	b.n	8000d8c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c7e:	4b90      	ldr	r3, [pc, #576]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2238      	movs	r2, #56	; 0x38
 8000c84:	4013      	ands	r3, r2
 8000c86:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d12f      	bne.n	8000cee <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e14c      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9a:	4b89      	ldr	r3, [pc, #548]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a8b      	ldr	r2, [pc, #556]	; (8000ecc <HAL_RCC_OscConfig+0x34c>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	021a      	lsls	r2, r3, #8
 8000caa:	4b85      	ldr	r3, [pc, #532]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000cac:	430a      	orrs	r2, r1
 8000cae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d112      	bne.n	8000cdc <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cb6:	4b82      	ldr	r3, [pc, #520]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a85      	ldr	r2, [pc, #532]	; (8000ed0 <HAL_RCC_OscConfig+0x350>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	4b7e      	ldr	r3, [pc, #504]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000cca:	4b7d      	ldr	r3, [pc, #500]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0adb      	lsrs	r3, r3, #11
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	4a7f      	ldr	r2, [pc, #508]	; (8000ed4 <HAL_RCC_OscConfig+0x354>)
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	4b7f      	ldr	r3, [pc, #508]	; (8000ed8 <HAL_RCC_OscConfig+0x358>)
 8000cda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000cdc:	4b7f      	ldr	r3, [pc, #508]	; (8000edc <HAL_RCC_OscConfig+0x35c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fcc1 	bl	8000668 <HAL_InitTick>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d050      	beq.n	8000d8c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e122      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d030      	beq.n	8000d58 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cf6:	4b72      	ldr	r3, [pc, #456]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a75      	ldr	r2, [pc, #468]	; (8000ed0 <HAL_RCC_OscConfig+0x350>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	0019      	movs	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000d0a:	4b6d      	ldr	r3, [pc, #436]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0049      	lsls	r1, r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d18:	f7ff fd02 	bl	8000720 <HAL_GetTick>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000d22:	f7ff fcfd 	bl	8000720 <HAL_GetTick>
 8000d26:	0002      	movs	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e0ff      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d34:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a61      	ldr	r2, [pc, #388]	; (8000ecc <HAL_RCC_OscConfig+0x34c>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	0019      	movs	r1, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	021a      	lsls	r2, r3, #8
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d52:	430a      	orrs	r2, r1
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	e019      	b.n	8000d8c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000d58:	4b59      	ldr	r3, [pc, #356]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d5e:	4960      	ldr	r1, [pc, #384]	; (8000ee0 <HAL_RCC_OscConfig+0x360>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d64:	f7ff fcdc 	bl	8000720 <HAL_GetTick>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fcd7 	bl	8000720 <HAL_GetTick>
 8000d72:	0002      	movs	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e0d9      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d80:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d1f0      	bne.n	8000d6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2208      	movs	r2, #8
 8000d92:	4013      	ands	r3, r2
 8000d94:	d042      	beq.n	8000e1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000d96:	4b4a      	ldr	r3, [pc, #296]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2238      	movs	r2, #56	; 0x38
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b18      	cmp	r3, #24
 8000da0:	d105      	bne.n	8000dae <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d138      	bne.n	8000e1c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e0c2      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d019      	beq.n	8000dea <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dba:	4b41      	ldr	r3, [pc, #260]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fcad 	bl	8000720 <HAL_GetTick>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fca8 	bl	8000720 <HAL_GetTick>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e0aa      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	2202      	movs	r2, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d0f1      	beq.n	8000dcc <HAL_RCC_OscConfig+0x24c>
 8000de8:	e018      	b.n	8000e1c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	438a      	bics	r2, r1
 8000df4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df6:	f7ff fc93 	bl	8000720 <HAL_GetTick>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc8e 	bl	8000720 <HAL_GetTick>
 8000e04:	0002      	movs	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e090      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	2202      	movs	r2, #2
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d1f1      	bne.n	8000e00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2204      	movs	r2, #4
 8000e22:	4013      	ands	r3, r2
 8000e24:	d100      	bne.n	8000e28 <HAL_RCC_OscConfig+0x2a8>
 8000e26:	e084      	b.n	8000f32 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2238      	movs	r2, #56	; 0x38
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b20      	cmp	r3, #32
 8000e3a:	d106      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d000      	beq.n	8000e46 <HAL_RCC_OscConfig+0x2c6>
 8000e44:	e075      	b.n	8000f32 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e074      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d106      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2e0>
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x31a>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x302>
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e6e:	2104      	movs	r1, #4
 8000e70:	430a      	orrs	r2, r1
 8000e72:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x31a>
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_RCC_OscConfig+0x340>)
 8000e94:	2104      	movs	r1, #4
 8000e96:	438a      	bics	r2, r1
 8000e98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d028      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fc3d 	bl	8000720 <HAL_GetTick>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000eaa:	e01d      	b.n	8000ee8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eac:	f7ff fc38 	bl	8000720 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_RCC_OscConfig+0x364>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d915      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e039      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	fffeffff 	.word	0xfffeffff
 8000ec8:	fffbffff 	.word	0xfffbffff
 8000ecc:	ffff80ff 	.word	0xffff80ff
 8000ed0:	ffffc7ff 	.word	0xffffc7ff
 8000ed4:	02dc6c00 	.word	0x02dc6c00
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	fffffeff 	.word	0xfffffeff
 8000ee4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_RCC_OscConfig+0x3bc>)
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	2202      	movs	r2, #2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d0dc      	beq.n	8000eac <HAL_RCC_OscConfig+0x32c>
 8000ef2:	e013      	b.n	8000f1c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc14 	bl	8000720 <HAL_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000efc:	e009      	b.n	8000f12 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fc0f 	bl	8000720 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_RCC_OscConfig+0x3c0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e010      	b.n	8000f34 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_RCC_OscConfig+0x3bc>)
 8000f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f16:	2202      	movs	r2, #2
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d1f0      	bne.n	8000efe <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d105      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_RCC_OscConfig+0x3bc>)
 8000f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_RCC_OscConfig+0x3bc>)
 8000f2c:	4905      	ldr	r1, [pc, #20]	; (8000f44 <HAL_RCC_OscConfig+0x3c4>)
 8000f2e:	400a      	ands	r2, r1
 8000f30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b006      	add	sp, #24
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00001388 	.word	0x00001388
 8000f44:	efffffff 	.word	0xefffffff

08000f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e0e9      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f5c:	4b76      	ldr	r3, [pc, #472]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2207      	movs	r2, #7
 8000f62:	4013      	ands	r3, r2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d91e      	bls.n	8000fa8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2207      	movs	r2, #7
 8000f70:	4393      	bics	r3, r2
 8000f72:	0019      	movs	r1, r3
 8000f74:	4b70      	ldr	r3, [pc, #448]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000f7c:	f7ff fbd0 	bl	8000720 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f84:	e009      	b.n	8000f9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000f86:	f7ff fbcb 	bl	8000720 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a6a      	ldr	r2, [pc, #424]	; (800113c <HAL_RCC_ClockConfig+0x1f4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e0ca      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d1ee      	bne.n	8000f86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2202      	movs	r2, #2
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d017      	beq.n	8000fe2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d008      	beq.n	8000fce <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000fbc:	4b60      	ldr	r3, [pc, #384]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a60      	ldr	r2, [pc, #384]	; (8001144 <HAL_RCC_ClockConfig+0x1fc>)
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8000fc6:	21b0      	movs	r1, #176	; 0xb0
 8000fc8:	0109      	lsls	r1, r1, #4
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4a5d      	ldr	r2, [pc, #372]	; (8001148 <HAL_RCC_ClockConfig+0x200>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d055      	beq.n	8001098 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8000fec:	4b54      	ldr	r3, [pc, #336]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	221c      	movs	r2, #28
 8000ff2:	4393      	bics	r3, r2
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	4b51      	ldr	r3, [pc, #324]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d107      	bne.n	8001018 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001008:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	029b      	lsls	r3, r3, #10
 8001010:	4013      	ands	r3, r2
 8001012:	d11f      	bne.n	8001054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e08b      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d107      	bne.n	8001030 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4013      	ands	r3, r2
 800102a:	d113      	bne.n	8001054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e07f      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d106      	bne.n	8001046 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	2202      	movs	r2, #2
 800103e:	4013      	ands	r3, r2
 8001040:	d108      	bne.n	8001054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e074      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001046:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8001048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e06d      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2207      	movs	r2, #7
 800105a:	4393      	bics	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8001064:	430a      	orrs	r2, r1
 8001066:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001068:	f7ff fb5a 	bl	8000720 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001070:	e009      	b.n	8001086 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001072:	f7ff fb55 	bl	8000720 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	4a2f      	ldr	r2, [pc, #188]	; (800113c <HAL_RCC_ClockConfig+0x1f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e054      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2238      	movs	r2, #56	; 0x38
 800108c:	401a      	ands	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	429a      	cmp	r2, r3
 8001096:	d1ec      	bne.n	8001072 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2207      	movs	r2, #7
 800109e:	4013      	ands	r3, r2
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d21e      	bcs.n	80010e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2207      	movs	r2, #7
 80010ac:	4393      	bics	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fb32 	bl	8000720 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010c0:	e009      	b.n	80010d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80010c2:	f7ff fb2d 	bl	8000720 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <HAL_RCC_ClockConfig+0x1f4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e02c      	b.n	8001130 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_RCC_ClockConfig+0x1f0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2207      	movs	r2, #7
 80010dc:	4013      	ands	r3, r2
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2204      	movs	r2, #4
 80010ea:	4013      	ands	r3, r2
 80010ec:	d009      	beq.n	8001102 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_RCC_ClockConfig+0x204>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 80010fe:	430a      	orrs	r2, r1
 8001100:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001102:	f000 f82b 	bl	800115c <HAL_RCC_GetSysClockFreq>
 8001106:	0001      	movs	r1, r0
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_RCC_ClockConfig+0x1f8>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	220f      	movs	r2, #15
 8001110:	401a      	ands	r2, r3
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_RCC_ClockConfig+0x208>)
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	221f      	movs	r2, #31
 800111a:	4013      	ands	r3, r2
 800111c:	000a      	movs	r2, r1
 800111e:	40da      	lsrs	r2, r3
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_RCC_ClockConfig+0x20c>)
 8001122:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_RCC_ClockConfig+0x210>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff fa9d 	bl	8000668 <HAL_InitTick>
 800112e:	0003      	movs	r3, r0
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40022000 	.word	0x40022000
 800113c:	00001388 	.word	0x00001388
 8001140:	40021000 	.word	0x40021000
 8001144:	ffff84ff 	.word	0xffff84ff
 8001148:	fffff0ff 	.word	0xfffff0ff
 800114c:	ffff8fff 	.word	0xffff8fff
 8001150:	080022bc 	.word	0x080022bc
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2238      	movs	r2, #56	; 0x38
 8001168:	4013      	ands	r3, r2
 800116a:	d10f      	bne.n	800118c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0adb      	lsrs	r3, r3, #11
 8001172:	2207      	movs	r2, #7
 8001174:	4013      	ands	r3, r2
 8001176:	2201      	movs	r2, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	4815      	ldr	r0, [pc, #84]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001182:	f7fe ffc1 	bl	8000108 <__udivsi3>
 8001186:	0003      	movs	r3, r0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	e01e      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2238      	movs	r2, #56	; 0x38
 8001192:	4013      	ands	r3, r2
 8001194:	2b08      	cmp	r3, #8
 8001196:	d102      	bne.n	800119e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_RCC_GetSysClockFreq+0x80>)
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e015      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x78>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2238      	movs	r2, #56	; 0x38
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b20      	cmp	r3, #32
 80011a8:	d103      	bne.n	80011b2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	e00b      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_RCC_GetSysClockFreq+0x78>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2238      	movs	r2, #56	; 0x38
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b18      	cmp	r3, #24
 80011bc:	d103      	bne.n	80011c6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80011be:	23fa      	movs	r3, #250	; 0xfa
 80011c0:	01db      	lsls	r3, r3, #7
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	e001      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40021000 	.word	0x40021000
 80011d8:	02dc6c00 	.word	0x02dc6c00
 80011dc:	007a1200 	.word	0x007a1200

080011e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e04a      	b.n	8001288 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	223d      	movs	r2, #61	; 0x3d
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	223c      	movs	r2, #60	; 0x3c
 8001202:	2100      	movs	r1, #0
 8001204:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff f96d 	bl	80004e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	223d      	movs	r2, #61	; 0x3d
 8001212:	2102      	movs	r1, #2
 8001214:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	0019      	movs	r1, r3
 8001220:	0010      	movs	r0, r2
 8001222:	f000 fb43 	bl	80018ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2248      	movs	r2, #72	; 0x48
 800122a:	2101      	movs	r1, #1
 800122c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	223e      	movs	r2, #62	; 0x3e
 8001232:	2101      	movs	r1, #1
 8001234:	5499      	strb	r1, [r3, r2]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	223f      	movs	r2, #63	; 0x3f
 800123a:	2101      	movs	r1, #1
 800123c:	5499      	strb	r1, [r3, r2]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	2101      	movs	r1, #1
 8001244:	5499      	strb	r1, [r3, r2]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2241      	movs	r2, #65	; 0x41
 800124a:	2101      	movs	r1, #1
 800124c:	5499      	strb	r1, [r3, r2]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2242      	movs	r2, #66	; 0x42
 8001252:	2101      	movs	r1, #1
 8001254:	5499      	strb	r1, [r3, r2]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2243      	movs	r2, #67	; 0x43
 800125a:	2101      	movs	r1, #1
 800125c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2244      	movs	r2, #68	; 0x44
 8001262:	2101      	movs	r1, #1
 8001264:	5499      	strb	r1, [r3, r2]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2245      	movs	r2, #69	; 0x45
 800126a:	2101      	movs	r1, #1
 800126c:	5499      	strb	r1, [r3, r2]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2246      	movs	r2, #70	; 0x46
 8001272:	2101      	movs	r1, #1
 8001274:	5499      	strb	r1, [r3, r2]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2247      	movs	r2, #71	; 0x47
 800127a:	2101      	movs	r1, #1
 800127c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	223d      	movs	r2, #61	; 0x3d
 8001282:	2101      	movs	r1, #1
 8001284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e04a      	b.n	8001338 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	223d      	movs	r2, #61	; 0x3d
 80012a6:	5c9b      	ldrb	r3, [r3, r2]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d107      	bne.n	80012be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	223c      	movs	r2, #60	; 0x3c
 80012b2:	2100      	movs	r1, #0
 80012b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 f841 	bl	8001340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	223d      	movs	r2, #61	; 0x3d
 80012c2:	2102      	movs	r1, #2
 80012c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3304      	adds	r3, #4
 80012ce:	0019      	movs	r1, r3
 80012d0:	0010      	movs	r0, r2
 80012d2:	f000 faeb 	bl	80018ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2248      	movs	r2, #72	; 0x48
 80012da:	2101      	movs	r1, #1
 80012dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	223e      	movs	r2, #62	; 0x3e
 80012e2:	2101      	movs	r1, #1
 80012e4:	5499      	strb	r1, [r3, r2]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	223f      	movs	r2, #63	; 0x3f
 80012ea:	2101      	movs	r1, #1
 80012ec:	5499      	strb	r1, [r3, r2]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	2101      	movs	r1, #1
 80012f4:	5499      	strb	r1, [r3, r2]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2241      	movs	r2, #65	; 0x41
 80012fa:	2101      	movs	r1, #1
 80012fc:	5499      	strb	r1, [r3, r2]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2242      	movs	r2, #66	; 0x42
 8001302:	2101      	movs	r1, #1
 8001304:	5499      	strb	r1, [r3, r2]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2243      	movs	r2, #67	; 0x43
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2244      	movs	r2, #68	; 0x44
 8001312:	2101      	movs	r1, #1
 8001314:	5499      	strb	r1, [r3, r2]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2245      	movs	r2, #69	; 0x45
 800131a:	2101      	movs	r1, #1
 800131c:	5499      	strb	r1, [r3, r2]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2246      	movs	r2, #70	; 0x46
 8001322:	2101      	movs	r1, #1
 8001324:	5499      	strb	r1, [r3, r2]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2247      	movs	r2, #71	; 0x47
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	223d      	movs	r2, #61	; 0x3d
 8001332:	2101      	movs	r1, #1
 8001334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <HAL_TIM_PWM_Start+0x22>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	223e      	movs	r2, #62	; 0x3e
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	1e5a      	subs	r2, r3, #1
 800136c:	4193      	sbcs	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	e037      	b.n	80013e2 <HAL_TIM_PWM_Start+0x92>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d108      	bne.n	800138a <HAL_TIM_PWM_Start+0x3a>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	223f      	movs	r2, #63	; 0x3f
 800137c:	5c9b      	ldrb	r3, [r3, r2]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	1e5a      	subs	r2, r3, #1
 8001384:	4193      	sbcs	r3, r2
 8001386:	b2db      	uxtb	r3, r3
 8001388:	e02b      	b.n	80013e2 <HAL_TIM_PWM_Start+0x92>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d108      	bne.n	80013a2 <HAL_TIM_PWM_Start+0x52>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	5c9b      	ldrb	r3, [r3, r2]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	4193      	sbcs	r3, r2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	e01f      	b.n	80013e2 <HAL_TIM_PWM_Start+0x92>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d108      	bne.n	80013ba <HAL_TIM_PWM_Start+0x6a>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2241      	movs	r2, #65	; 0x41
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	1e5a      	subs	r2, r3, #1
 80013b4:	4193      	sbcs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	e013      	b.n	80013e2 <HAL_TIM_PWM_Start+0x92>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d108      	bne.n	80013d2 <HAL_TIM_PWM_Start+0x82>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2242      	movs	r2, #66	; 0x42
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3b01      	subs	r3, #1
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	4193      	sbcs	r3, r2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	e007      	b.n	80013e2 <HAL_TIM_PWM_Start+0x92>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2243      	movs	r2, #67	; 0x43
 80013d6:	5c9b      	ldrb	r3, [r3, r2]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3b01      	subs	r3, #1
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	4193      	sbcs	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e07b      	b.n	80014e2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d104      	bne.n	80013fa <HAL_TIM_PWM_Start+0xaa>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	223e      	movs	r2, #62	; 0x3e
 80013f4:	2102      	movs	r1, #2
 80013f6:	5499      	strb	r1, [r3, r2]
 80013f8:	e023      	b.n	8001442 <HAL_TIM_PWM_Start+0xf2>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d104      	bne.n	800140a <HAL_TIM_PWM_Start+0xba>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	223f      	movs	r2, #63	; 0x3f
 8001404:	2102      	movs	r1, #2
 8001406:	5499      	strb	r1, [r3, r2]
 8001408:	e01b      	b.n	8001442 <HAL_TIM_PWM_Start+0xf2>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d104      	bne.n	800141a <HAL_TIM_PWM_Start+0xca>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	2102      	movs	r1, #2
 8001416:	5499      	strb	r1, [r3, r2]
 8001418:	e013      	b.n	8001442 <HAL_TIM_PWM_Start+0xf2>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d104      	bne.n	800142a <HAL_TIM_PWM_Start+0xda>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2241      	movs	r2, #65	; 0x41
 8001424:	2102      	movs	r1, #2
 8001426:	5499      	strb	r1, [r3, r2]
 8001428:	e00b      	b.n	8001442 <HAL_TIM_PWM_Start+0xf2>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b10      	cmp	r3, #16
 800142e:	d104      	bne.n	800143a <HAL_TIM_PWM_Start+0xea>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2242      	movs	r2, #66	; 0x42
 8001434:	2102      	movs	r1, #2
 8001436:	5499      	strb	r1, [r3, r2]
 8001438:	e003      	b.n	8001442 <HAL_TIM_PWM_Start+0xf2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2243      	movs	r2, #67	; 0x43
 800143e:	2102      	movs	r1, #2
 8001440:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	0018      	movs	r0, r3
 800144c:	f000 fdd2 	bl	8001ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a25      	ldr	r2, [pc, #148]	; (80014ec <HAL_TIM_PWM_Start+0x19c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d009      	beq.n	800146e <HAL_TIM_PWM_Start+0x11e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_TIM_PWM_Start+0x1a0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d004      	beq.n	800146e <HAL_TIM_PWM_Start+0x11e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_TIM_PWM_Start+0x1a4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PWM_Start+0x122>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_TIM_PWM_Start+0x124>
 8001472:	2300      	movs	r3, #0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	0209      	lsls	r1, r1, #8
 8001486:	430a      	orrs	r2, r1
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_TIM_PWM_Start+0x19c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d004      	beq.n	800149e <HAL_TIM_PWM_Start+0x14e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_TIM_PWM_Start+0x1a8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d116      	bne.n	80014cc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <HAL_TIM_PWM_Start+0x1ac>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d016      	beq.n	80014de <HAL_TIM_PWM_Start+0x18e>
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d011      	beq.n	80014de <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ca:	e008      	b.n	80014de <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2101      	movs	r1, #1
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e000      	b.n	80014e0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b004      	add	sp, #16
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	40014400 	.word	0x40014400
 80014f4:	40014800 	.word	0x40014800
 80014f8:	40000400 	.word	0x40000400
 80014fc:	00010007 	.word	0x00010007

08001500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150c:	2317      	movs	r3, #23
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	223c      	movs	r2, #60	; 0x3c
 8001518:	5c9b      	ldrb	r3, [r3, r2]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_TIM_PWM_ConfigChannel+0x22>
 800151e:	2302      	movs	r3, #2
 8001520:	e0e5      	b.n	80016ee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	223c      	movs	r2, #60	; 0x3c
 8001526:	2101      	movs	r1, #1
 8001528:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b14      	cmp	r3, #20
 800152e:	d900      	bls.n	8001532 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001530:	e0d1      	b.n	80016d6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	009a      	lsls	r2, r3, #2
 8001536:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	0011      	movs	r1, r2
 8001546:	0018      	movs	r0, r3
 8001548:	f000 fa1c 	bl	8001984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2108      	movs	r1, #8
 8001558:	430a      	orrs	r2, r1
 800155a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2104      	movs	r1, #4
 8001568:	438a      	bics	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6999      	ldr	r1, [r3, #24]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	619a      	str	r2, [r3, #24]
      break;
 800157e:	e0af      	b.n	80016e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f000 fa7b 	bl	8001a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0109      	lsls	r1, r1, #4
 800159c:	430a      	orrs	r2, r1
 800159e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4954      	ldr	r1, [pc, #336]	; (80016fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6999      	ldr	r1, [r3, #24]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	021a      	lsls	r2, r3, #8
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	619a      	str	r2, [r3, #24]
      break;
 80015c4:	e08c      	b.n	80016e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 fad6 	bl	8001b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2108      	movs	r1, #8
 80015e0:	430a      	orrs	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2104      	movs	r1, #4
 80015f0:	438a      	bics	r2, r1
 80015f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	69d9      	ldr	r1, [r3, #28]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	61da      	str	r2, [r3, #28]
      break;
 8001606:	e06b      	b.n	80016e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f000 fb37 	bl	8001c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69da      	ldr	r2, [r3, #28]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0109      	lsls	r1, r1, #4
 8001624:	430a      	orrs	r2, r1
 8001626:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4932      	ldr	r1, [pc, #200]	; (80016fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001634:	400a      	ands	r2, r1
 8001636:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	69d9      	ldr	r1, [r3, #28]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	021a      	lsls	r2, r3, #8
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	61da      	str	r2, [r3, #28]
      break;
 800164c:	e048      	b.n	80016e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fb78 	bl	8001d4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2108      	movs	r1, #8
 8001668:	430a      	orrs	r2, r1
 800166a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800168e:	e027      	b.n	80016e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	0011      	movs	r1, r2
 8001698:	0018      	movs	r0, r3
 800169a:	f000 fbb1 	bl	8001e00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0109      	lsls	r1, r1, #4
 80016ac:	430a      	orrs	r2, r1
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4910      	ldr	r1, [pc, #64]	; (80016fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80016bc:	400a      	ands	r2, r1
 80016be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	021a      	lsls	r2, r3, #8
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80016d4:	e004      	b.n	80016e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80016d6:	2317      	movs	r3, #23
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
      break;
 80016de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	223c      	movs	r2, #60	; 0x3c
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]

  return status;
 80016e8:	2317      	movs	r3, #23
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	781b      	ldrb	r3, [r3, #0]
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b006      	add	sp, #24
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	080022fc 	.word	0x080022fc
 80016fc:	fffffbff 	.word	0xfffffbff

08001700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	230f      	movs	r3, #15
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	223c      	movs	r2, #60	; 0x3c
 8001716:	5c9b      	ldrb	r3, [r3, r2]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_TIM_ConfigClockSource+0x20>
 800171c:	2302      	movs	r3, #2
 800171e:	e0bc      	b.n	800189a <HAL_TIM_ConfigClockSource+0x19a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	223c      	movs	r2, #60	; 0x3c
 8001724:	2101      	movs	r1, #1
 8001726:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	223d      	movs	r2, #61	; 0x3d
 800172c:	2102      	movs	r1, #2
 800172e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4a59      	ldr	r2, [pc, #356]	; (80018a8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0192      	lsls	r2, r2, #6
 8001758:	4293      	cmp	r3, r2
 800175a:	d040      	beq.n	80017de <HAL_TIM_ConfigClockSource+0xde>
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0192      	lsls	r2, r2, #6
 8001760:	4293      	cmp	r3, r2
 8001762:	d900      	bls.n	8001766 <HAL_TIM_ConfigClockSource+0x66>
 8001764:	e088      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	0152      	lsls	r2, r2, #5
 800176a:	4293      	cmp	r3, r2
 800176c:	d100      	bne.n	8001770 <HAL_TIM_ConfigClockSource+0x70>
 800176e:	e088      	b.n	8001882 <HAL_TIM_ConfigClockSource+0x182>
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	0152      	lsls	r2, r2, #5
 8001774:	4293      	cmp	r3, r2
 8001776:	d900      	bls.n	800177a <HAL_TIM_ConfigClockSource+0x7a>
 8001778:	e07e      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 800177a:	2b70      	cmp	r3, #112	; 0x70
 800177c:	d018      	beq.n	80017b0 <HAL_TIM_ConfigClockSource+0xb0>
 800177e:	d900      	bls.n	8001782 <HAL_TIM_ConfigClockSource+0x82>
 8001780:	e07a      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 8001782:	2b60      	cmp	r3, #96	; 0x60
 8001784:	d04f      	beq.n	8001826 <HAL_TIM_ConfigClockSource+0x126>
 8001786:	d900      	bls.n	800178a <HAL_TIM_ConfigClockSource+0x8a>
 8001788:	e076      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 800178a:	2b50      	cmp	r3, #80	; 0x50
 800178c:	d03b      	beq.n	8001806 <HAL_TIM_ConfigClockSource+0x106>
 800178e:	d900      	bls.n	8001792 <HAL_TIM_ConfigClockSource+0x92>
 8001790:	e072      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 8001792:	2b40      	cmp	r3, #64	; 0x40
 8001794:	d057      	beq.n	8001846 <HAL_TIM_ConfigClockSource+0x146>
 8001796:	d900      	bls.n	800179a <HAL_TIM_ConfigClockSource+0x9a>
 8001798:	e06e      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 800179a:	2b30      	cmp	r3, #48	; 0x30
 800179c:	d063      	beq.n	8001866 <HAL_TIM_ConfigClockSource+0x166>
 800179e:	d86b      	bhi.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d060      	beq.n	8001866 <HAL_TIM_ConfigClockSource+0x166>
 80017a4:	d868      	bhi.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d05d      	beq.n	8001866 <HAL_TIM_ConfigClockSource+0x166>
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d05b      	beq.n	8001866 <HAL_TIM_ConfigClockSource+0x166>
 80017ae:	e063      	b.n	8001878 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80017c0:	f000 fbf8 	bl	8001fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2277      	movs	r2, #119	; 0x77
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	609a      	str	r2, [r3, #8]
      break;
 80017dc:	e052      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80017ee:	f000 fbe1 	bl	8001fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	01c9      	lsls	r1, r1, #7
 8001800:	430a      	orrs	r2, r1
 8001802:	609a      	str	r2, [r3, #8]
      break;
 8001804:	e03e      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001812:	001a      	movs	r2, r3
 8001814:	f000 fb52 	bl	8001ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2150      	movs	r1, #80	; 0x50
 800181e:	0018      	movs	r0, r3
 8001820:	f000 fbac 	bl	8001f7c <TIM_ITRx_SetConfig>
      break;
 8001824:	e02e      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001832:	001a      	movs	r2, r3
 8001834:	f000 fb70 	bl	8001f18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2160      	movs	r1, #96	; 0x60
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fb9c 	bl	8001f7c <TIM_ITRx_SetConfig>
      break;
 8001844:	e01e      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001852:	001a      	movs	r2, r3
 8001854:	f000 fb32 	bl	8001ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2140      	movs	r1, #64	; 0x40
 800185e:	0018      	movs	r0, r3
 8001860:	f000 fb8c 	bl	8001f7c <TIM_ITRx_SetConfig>
      break;
 8001864:	e00e      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0019      	movs	r1, r3
 8001870:	0010      	movs	r0, r2
 8001872:	f000 fb83 	bl	8001f7c <TIM_ITRx_SetConfig>
      break;
 8001876:	e005      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001878:	230f      	movs	r3, #15
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
      break;
 8001880:	e000      	b.n	8001884 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001882:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	223d      	movs	r2, #61	; 0x3d
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	223c      	movs	r2, #60	; 0x3c
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]

  return status;
 8001894:	230f      	movs	r3, #15
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	ffceff88 	.word	0xffceff88
 80018a8:	ffff00ff 	.word	0xffff00ff

080018ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a2b      	ldr	r2, [pc, #172]	; (800196c <TIM_Base_SetConfig+0xc0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d003      	beq.n	80018cc <TIM_Base_SetConfig+0x20>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <TIM_Base_SetConfig+0xc4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d108      	bne.n	80018de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2270      	movs	r2, #112	; 0x70
 80018d0:	4393      	bics	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <TIM_Base_SetConfig+0xc0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00f      	beq.n	8001906 <TIM_Base_SetConfig+0x5a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <TIM_Base_SetConfig+0xc4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00b      	beq.n	8001906 <TIM_Base_SetConfig+0x5a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a20      	ldr	r2, [pc, #128]	; (8001974 <TIM_Base_SetConfig+0xc8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d007      	beq.n	8001906 <TIM_Base_SetConfig+0x5a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <TIM_Base_SetConfig+0xcc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d003      	beq.n	8001906 <TIM_Base_SetConfig+0x5a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a1e      	ldr	r2, [pc, #120]	; (800197c <TIM_Base_SetConfig+0xd0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d108      	bne.n	8001918 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <TIM_Base_SetConfig+0xd4>)
 800190a:	4013      	ands	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	4393      	bics	r3, r2
 800191e:	001a      	movs	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <TIM_Base_SetConfig+0xc0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <TIM_Base_SetConfig+0xaa>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <TIM_Base_SetConfig+0xcc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d003      	beq.n	8001956 <TIM_Base_SetConfig+0xaa>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <TIM_Base_SetConfig+0xd0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d103      	bne.n	800195e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	615a      	str	r2, [r3, #20]
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b004      	add	sp, #16
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40000400 	.word	0x40000400
 8001974:	40002000 	.word	0x40002000
 8001978:	40014400 	.word	0x40014400
 800197c:	40014800 	.word	0x40014800
 8001980:	fffffcff 	.word	0xfffffcff

08001984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	2201      	movs	r2, #1
 800199a:	4393      	bics	r3, r2
 800199c:	001a      	movs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a2e      	ldr	r2, [pc, #184]	; (8001a6c <TIM_OC1_SetConfig+0xe8>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2203      	movs	r2, #3
 80019ba:	4393      	bics	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4393      	bics	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <TIM_OC1_SetConfig+0xec>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <TIM_OC1_SetConfig+0x6e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <TIM_OC1_SetConfig+0xf0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_OC1_SetConfig+0x6e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <TIM_OC1_SetConfig+0xf4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10c      	bne.n	8001a0c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2208      	movs	r2, #8
 80019f6:	4393      	bics	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2204      	movs	r2, #4
 8001a08:	4393      	bics	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a18      	ldr	r2, [pc, #96]	; (8001a70 <TIM_OC1_SetConfig+0xec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <TIM_OC1_SetConfig+0xa0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <TIM_OC1_SetConfig+0xf0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <TIM_OC1_SetConfig+0xa0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <TIM_OC1_SetConfig+0xf4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d111      	bne.n	8001a48 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <TIM_OC1_SetConfig+0xf8>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <TIM_OC1_SetConfig+0xfc>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	621a      	str	r2, [r3, #32]
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b006      	add	sp, #24
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	fffeff8f 	.word	0xfffeff8f
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40014400 	.word	0x40014400
 8001a78:	40014800 	.word	0x40014800
 8001a7c:	fffffeff 	.word	0xfffffeff
 8001a80:	fffffdff 	.word	0xfffffdff

08001a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	2210      	movs	r2, #16
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <TIM_OC2_SetConfig+0xe0>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <TIM_OC2_SetConfig+0xe4>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2220      	movs	r2, #32
 8001ace:	4393      	bics	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <TIM_OC2_SetConfig+0xe8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10d      	bne.n	8001b02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	4393      	bics	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	4393      	bics	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <TIM_OC2_SetConfig+0xe8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <TIM_OC2_SetConfig+0x96>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <TIM_OC2_SetConfig+0xec>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d003      	beq.n	8001b1a <TIM_OC2_SetConfig+0x96>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <TIM_OC2_SetConfig+0xf0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d113      	bne.n	8001b42 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <TIM_OC2_SetConfig+0xf4>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <TIM_OC2_SetConfig+0xf8>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	621a      	str	r2, [r3, #32]
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b006      	add	sp, #24
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	feff8fff 	.word	0xfeff8fff
 8001b68:	fffffcff 	.word	0xfffffcff
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40014400 	.word	0x40014400
 8001b74:	40014800 	.word	0x40014800
 8001b78:	fffffbff 	.word	0xfffffbff
 8001b7c:	fffff7ff 	.word	0xfffff7ff

08001b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <TIM_OC3_SetConfig+0xdc>)
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <TIM_OC3_SetConfig+0xe0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <TIM_OC3_SetConfig+0xe4>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <TIM_OC3_SetConfig+0xe8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10d      	bne.n	8001bfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <TIM_OC3_SetConfig+0xec>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <TIM_OC3_SetConfig+0xf0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <TIM_OC3_SetConfig+0xe8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <TIM_OC3_SetConfig+0x92>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <TIM_OC3_SetConfig+0xf4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <TIM_OC3_SetConfig+0x92>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <TIM_OC3_SetConfig+0xf8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d113      	bne.n	8001c3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <TIM_OC3_SetConfig+0xfc>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <TIM_OC3_SetConfig+0x100>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	621a      	str	r2, [r3, #32]
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b006      	add	sp, #24
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	fffffeff 	.word	0xfffffeff
 8001c60:	fffeff8f 	.word	0xfffeff8f
 8001c64:	fffffdff 	.word	0xfffffdff
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	fffff7ff 	.word	0xfffff7ff
 8001c70:	fffffbff 	.word	0xfffffbff
 8001c74:	40014400 	.word	0x40014400
 8001c78:	40014800 	.word	0x40014800
 8001c7c:	ffffefff 	.word	0xffffefff
 8001c80:	ffffdfff 	.word	0xffffdfff

08001c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <TIM_OC4_SetConfig+0xa8>)
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <TIM_OC4_SetConfig+0xac>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <TIM_OC4_SetConfig+0xb0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <TIM_OC4_SetConfig+0xb4>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	031b      	lsls	r3, r3, #12
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a17      	ldr	r2, [pc, #92]	; (8001d3c <TIM_OC4_SetConfig+0xb8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d007      	beq.n	8001cf4 <TIM_OC4_SetConfig+0x70>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <TIM_OC4_SetConfig+0xbc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d003      	beq.n	8001cf4 <TIM_OC4_SetConfig+0x70>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <TIM_OC4_SetConfig+0xc0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d109      	bne.n	8001d08 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <TIM_OC4_SetConfig+0xc4>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	621a      	str	r2, [r3, #32]
}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b006      	add	sp, #24
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	ffffefff 	.word	0xffffefff
 8001d30:	feff8fff 	.word	0xfeff8fff
 8001d34:	fffffcff 	.word	0xfffffcff
 8001d38:	ffffdfff 	.word	0xffffdfff
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40014400 	.word	0x40014400
 8001d44:	40014800 	.word	0x40014800
 8001d48:	ffffbfff 	.word	0xffffbfff

08001d4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a21      	ldr	r2, [pc, #132]	; (8001de8 <TIM_OC5_SetConfig+0x9c>)
 8001d62:	401a      	ands	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <TIM_OC5_SetConfig+0xa0>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <TIM_OC5_SetConfig+0xa4>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <TIM_OC5_SetConfig+0xa8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <TIM_OC5_SetConfig+0x66>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <TIM_OC5_SetConfig+0xac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d003      	beq.n	8001db2 <TIM_OC5_SetConfig+0x66>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <TIM_OC5_SetConfig+0xb0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d109      	bne.n	8001dc6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <TIM_OC5_SetConfig+0x9c>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	621a      	str	r2, [r3, #32]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b006      	add	sp, #24
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	fffeffff 	.word	0xfffeffff
 8001dec:	fffeff8f 	.word	0xfffeff8f
 8001df0:	fffdffff 	.word	0xfffdffff
 8001df4:	40012c00 	.word	0x40012c00
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	40014800 	.word	0x40014800

08001e00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <TIM_OC6_SetConfig+0xa0>)
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <TIM_OC6_SetConfig+0xa4>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <TIM_OC6_SetConfig+0xa8>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <TIM_OC6_SetConfig+0xac>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <TIM_OC6_SetConfig+0x68>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <TIM_OC6_SetConfig+0xb0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <TIM_OC6_SetConfig+0x68>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <TIM_OC6_SetConfig+0xb4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d109      	bne.n	8001e7c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <TIM_OC6_SetConfig+0xb8>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	621a      	str	r2, [r3, #32]
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b006      	add	sp, #24
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	ffefffff 	.word	0xffefffff
 8001ea4:	feff8fff 	.word	0xfeff8fff
 8001ea8:	ffdfffff 	.word	0xffdfffff
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40014400 	.word	0x40014400
 8001eb4:	40014800 	.word	0x40014800
 8001eb8:	fffbffff 	.word	0xfffbffff

08001ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	22f0      	movs	r2, #240	; 0xf0
 8001ee6:	4393      	bics	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	220a      	movs	r2, #10
 8001ef8:	4393      	bics	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	621a      	str	r2, [r3, #32]
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b006      	add	sp, #24
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	4393      	bics	r3, r2
 8001f32:	001a      	movs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <TIM_TI2_ConfigInputStage+0x60>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	031b      	lsls	r3, r3, #12
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	22a0      	movs	r2, #160	; 0xa0
 8001f54:	4393      	bics	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	621a      	str	r2, [r3, #32]
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b006      	add	sp, #24
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	ffff0fff 	.word	0xffff0fff

08001f7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <TIM_ITRx_SetConfig+0x34>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	609a      	str	r2, [r3, #8]
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	ffcfff8f 	.word	0xffcfff8f

08001fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <TIM_ETR_SetConfig+0x3c>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b006      	add	sp, #24
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	ffff00ff 	.word	0xffff00ff

08001ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	221f      	movs	r2, #31
 8002004:	4013      	ands	r3, r2
 8002006:	2201      	movs	r2, #1
 8002008:	409a      	lsls	r2, r3
 800200a:	0013      	movs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	43d2      	mvns	r2, r2
 8002016:	401a      	ands	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a1a      	ldr	r2, [r3, #32]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	211f      	movs	r1, #31
 8002024:	400b      	ands	r3, r1
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4099      	lsls	r1, r3
 800202a:	000b      	movs	r3, r1
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	621a      	str	r2, [r3, #32]
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b006      	add	sp, #24
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223c      	movs	r2, #60	; 0x3c
 800204a:	5c9b      	ldrb	r3, [r3, r2]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002050:	2302      	movs	r3, #2
 8002052:	e04a      	b.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	223c      	movs	r2, #60	; 0x3c
 8002058:	2101      	movs	r1, #1
 800205a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	223d      	movs	r2, #61	; 0x3d
 8002060:	2102      	movs	r1, #2
 8002062:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d108      	bne.n	8002090 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2270      	movs	r2, #112	; 0x70
 8002094:	4393      	bics	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10c      	bne.n	80020d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	4393      	bics	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	223d      	movs	r2, #61	; 0x3d
 80020dc:	2101      	movs	r1, #1
 80020de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	223c      	movs	r2, #60	; 0x3c
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b004      	add	sp, #16
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	ff0fffff 	.word	0xff0fffff
 80020fc:	40000400 	.word	0x40000400

08002100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	223c      	movs	r2, #60	; 0x3c
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002118:	2302      	movs	r3, #2
 800211a:	e079      	b.n	8002210 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	223c      	movs	r2, #60	; 0x3c
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	4393      	bics	r3, r2
 800212a:	001a      	movs	r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a38      	ldr	r2, [pc, #224]	; (8002218 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002138:	401a      	ands	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a35      	ldr	r2, [pc, #212]	; (800221c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002146:	401a      	ands	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a33      	ldr	r2, [pc, #204]	; (8002220 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002154:	401a      	ands	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002162:	401a      	ands	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002170:	401a      	ands	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a2b      	ldr	r2, [pc, #172]	; (800222c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800217e:	401a      	ands	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a29      	ldr	r2, [pc, #164]	; (8002230 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800218c:	401a      	ands	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d106      	bne.n	80021b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80021a6:	401a      	ands	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d121      	bne.n	80021fe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80021be:	401a      	ands	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	051b      	lsls	r3, r3, #20
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80021ce:	401a      	ands	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80021dc:	401a      	ands	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d106      	bne.n	80021fe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80021f4:	401a      	ands	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	223c      	movs	r2, #60	; 0x3c
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b004      	add	sp, #16
 8002216:	bd80      	pop	{r7, pc}
 8002218:	fffffcff 	.word	0xfffffcff
 800221c:	fffffbff 	.word	0xfffffbff
 8002220:	fffff7ff 	.word	0xfffff7ff
 8002224:	ffffefff 	.word	0xffffefff
 8002228:	ffffdfff 	.word	0xffffdfff
 800222c:	ffffbfff 	.word	0xffffbfff
 8002230:	fff0ffff 	.word	0xfff0ffff
 8002234:	40012c00 	.word	0x40012c00
 8002238:	efffffff 	.word	0xefffffff
 800223c:	ff0fffff 	.word	0xff0fffff
 8002240:	feffffff 	.word	0xfeffffff
 8002244:	fdffffff 	.word	0xfdffffff
 8002248:	dfffffff 	.word	0xdfffffff

0800224c <memset>:
 800224c:	0003      	movs	r3, r0
 800224e:	1882      	adds	r2, r0, r2
 8002250:	4293      	cmp	r3, r2
 8002252:	d100      	bne.n	8002256 <memset+0xa>
 8002254:	4770      	bx	lr
 8002256:	7019      	strb	r1, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	e7f9      	b.n	8002250 <memset+0x4>

0800225c <__libc_init_array>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	2600      	movs	r6, #0
 8002260:	4c0c      	ldr	r4, [pc, #48]	; (8002294 <__libc_init_array+0x38>)
 8002262:	4d0d      	ldr	r5, [pc, #52]	; (8002298 <__libc_init_array+0x3c>)
 8002264:	1b64      	subs	r4, r4, r5
 8002266:	10a4      	asrs	r4, r4, #2
 8002268:	42a6      	cmp	r6, r4
 800226a:	d109      	bne.n	8002280 <__libc_init_array+0x24>
 800226c:	2600      	movs	r6, #0
 800226e:	f000 f819 	bl	80022a4 <_init>
 8002272:	4c0a      	ldr	r4, [pc, #40]	; (800229c <__libc_init_array+0x40>)
 8002274:	4d0a      	ldr	r5, [pc, #40]	; (80022a0 <__libc_init_array+0x44>)
 8002276:	1b64      	subs	r4, r4, r5
 8002278:	10a4      	asrs	r4, r4, #2
 800227a:	42a6      	cmp	r6, r4
 800227c:	d105      	bne.n	800228a <__libc_init_array+0x2e>
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	00b3      	lsls	r3, r6, #2
 8002282:	58eb      	ldr	r3, [r5, r3]
 8002284:	4798      	blx	r3
 8002286:	3601      	adds	r6, #1
 8002288:	e7ee      	b.n	8002268 <__libc_init_array+0xc>
 800228a:	00b3      	lsls	r3, r6, #2
 800228c:	58eb      	ldr	r3, [r5, r3]
 800228e:	4798      	blx	r3
 8002290:	3601      	adds	r6, #1
 8002292:	e7f2      	b.n	800227a <__libc_init_array+0x1e>
 8002294:	08002350 	.word	0x08002350
 8002298:	08002350 	.word	0x08002350
 800229c:	08002354 	.word	0x08002354
 80022a0:	08002350 	.word	0x08002350

080022a4 <_init>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr

080022b0 <_fini>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr
