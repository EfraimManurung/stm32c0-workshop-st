
stm32c0-printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08002c00  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08002c00  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000892a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000152f  00000000  00000000  000289fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000561  00000000  00000000  0002a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013925  00000000  00000000  0002ab99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000915e  00000000  00000000  0003e4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076f80  00000000  00000000  0004761c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f44  00000000  00000000  000be59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c04e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002aac 	.word	0x08002aac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002aac 	.word	0x08002aac

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fa0f 	bl	800065a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f810 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f886 	bl	8000350 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f850 	bl	80002e8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("** Hello World, Efraim! ** \n\r");
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <main+0x28>)
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fd88 	bl	8001d60 <iprintf>
	  HAL_Delay(1000);
 8000250:	23fa      	movs	r3, #250	; 0xfa
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fa7d 	bl	8000754 <HAL_Delay>
  {
 800025a:	e7f5      	b.n	8000248 <main+0x14>
 800025c:	08002ac4 	.word	0x08002ac4

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b08d      	sub	sp, #52	; 0x34
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2414      	movs	r4, #20
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	231c      	movs	r3, #28
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f001 fdd1 	bl	8001e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f001 fdca 	bl	8001e18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2202      	movs	r2, #2
 8000288:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2240      	movs	r2, #64	; 0x40
 800029c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fca1 	bl	8000be8 <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002aa:	f000 f87b 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	003b      	movs	r3, r7
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002cc:	003b      	movs	r3, r7
 80002ce:	2101      	movs	r1, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe6d 	bl	8000fb0 <HAL_RCC_ClockConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002da:	f000 f863 	bl	80003a4 <Error_Handler>
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b00d      	add	sp, #52	; 0x34
 80002e4:	bd90      	pop	{r4, r7, pc}
	...

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_USART2_UART_Init+0x60>)
 80002ee:	4a17      	ldr	r2, [pc, #92]	; (800034c <MX_USART2_UART_Init+0x64>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_USART2_UART_Init+0x60>)
 80002f4:	22e1      	movs	r2, #225	; 0xe1
 80002f6:	0252      	lsls	r2, r2, #9
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <MX_USART2_UART_Init+0x60>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_USART2_UART_Init+0x60>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <MX_USART2_UART_Init+0x60>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_USART2_UART_Init+0x60>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <MX_USART2_UART_Init+0x60>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_USART2_UART_Init+0x60>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <MX_USART2_UART_Init+0x60>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_USART2_UART_Init+0x60>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <MX_USART2_UART_Init+0x60>)
 800032c:	2200      	movs	r2, #0
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <MX_USART2_UART_Init+0x60>)
 8000332:	0018      	movs	r0, r3
 8000334:	f000 ffaa 	bl	800128c <HAL_UART_Init>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800033c:	f000 f832 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	20000084 	.word	0x20000084
 800034c:	40004400 	.word	0x40004400

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_GPIO_Init+0x28>)
 8000358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_GPIO_Init+0x28>)
 800035c:	2101      	movs	r1, #1
 800035e:	430a      	orrs	r2, r1
 8000360:	635a      	str	r2, [r3, #52]	; 0x34
 8000362:	4b05      	ldr	r3, [pc, #20]	; (8000378 <MX_GPIO_Init+0x28>)
 8000364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000366:	2201      	movs	r2, #1
 8000368:	4013      	ands	r3, r2
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b002      	add	sp, #8
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	40021000 	.word	0x40021000

0800037c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <__io_putchar+0x20>)
 8000386:	1d39      	adds	r1, r7, #4
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <__io_putchar+0x24>)
 800038a:	2201      	movs	r2, #1
 800038c:	f000 ffd4 	bl	8001338 <HAL_UART_Transmit>
	return ch;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	0018      	movs	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	b002      	add	sp, #8
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	0000ffff 	.word	0x0000ffff
 80003a0:	20000084 	.word	0x20000084

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <HAL_MspInit+0x44>)
 80003b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <HAL_MspInit+0x44>)
 80003bc:	2101      	movs	r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	641a      	str	r2, [r3, #64]	; 0x40
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <HAL_MspInit+0x44>)
 80003c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c6:	2201      	movs	r2, #1
 80003c8:	4013      	ands	r3, r2
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <HAL_MspInit+0x44>)
 80003d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <HAL_MspInit+0x44>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0549      	lsls	r1, r1, #21
 80003d8:	430a      	orrs	r2, r1
 80003da:	63da      	str	r2, [r3, #60]	; 0x3c
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <HAL_MspInit+0x44>)
 80003de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	055b      	lsls	r3, r3, #21
 80003e4:	4013      	ands	r3, r2
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b002      	add	sp, #8
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b08b      	sub	sp, #44	; 0x2c
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	2414      	movs	r4, #20
 8000402:	193b      	adds	r3, r7, r4
 8000404:	0018      	movs	r0, r3
 8000406:	2314      	movs	r3, #20
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f001 fd04 	bl	8001e18 <memset>
  if(huart->Instance==USART2)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <HAL_UART_MspInit+0x8c>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d130      	bne.n	800047c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <HAL_UART_MspInit+0x90>)
 800041c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0289      	lsls	r1, r1, #10
 8000424:	430a      	orrs	r2, r1
 8000426:	63da      	str	r2, [r3, #60]	; 0x3c
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <HAL_UART_MspInit+0x90>)
 800042a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	029b      	lsls	r3, r3, #10
 8000430:	4013      	ands	r3, r2
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800043a:	4b13      	ldr	r3, [pc, #76]	; (8000488 <HAL_UART_MspInit+0x90>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <HAL_UART_MspInit+0x90>)
 8000444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000446:	2201      	movs	r2, #1
 8000448:	4013      	ands	r3, r2
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800044e:	0021      	movs	r1, r4
 8000450:	187b      	adds	r3, r7, r1
 8000452:	220c      	movs	r2, #12
 8000454:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2202      	movs	r2, #2
 800045a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2201      	movs	r2, #1
 800046c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046e:	187a      	adds	r2, r7, r1
 8000470:	23a0      	movs	r3, #160	; 0xa0
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fa44 	bl	8000904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b00b      	add	sp, #44	; 0x2c
 8000482:	bd90      	pop	{r4, r7, pc}
 8000484:	40004400 	.word	0x40004400
 8000488:	40021000 	.word	0x40021000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f934 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	60f8      	str	r0, [r7, #12]
 80004c2:	60b9      	str	r1, [r7, #8]
 80004c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e00a      	b.n	80004e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004cc:	e000      	b.n	80004d0 <_read+0x16>
 80004ce:	bf00      	nop
 80004d0:	0001      	movs	r1, r0
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	60ba      	str	r2, [r7, #8]
 80004d8:	b2ca      	uxtb	r2, r1
 80004da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	dbf0      	blt.n	80004cc <_read+0x12>
  }

  return len;
 80004ea:	687b      	ldr	r3, [r7, #4]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b006      	add	sp, #24
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e009      	b.n	800051a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	60ba      	str	r2, [r7, #8]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ff34 	bl	800037c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	dbf1      	blt.n	8000506 <_write+0x12>
  }
  return len;
 8000522:	687b      	ldr	r3, [r7, #4]
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b006      	add	sp, #24
 800052a:	bd80      	pop	{r7, pc}

0800052c <_close>:

int _close(int file)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000534:	2301      	movs	r3, #1
 8000536:	425b      	negs	r3, r3
}
 8000538:	0018      	movs	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}

08000540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0192      	lsls	r2, r2, #6
 8000550:	605a      	str	r2, [r3, #4]
  return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}

0800055c <_isatty>:

int _isatty(int file)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000564:	2301      	movs	r3, #1
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}

0800056e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b004      	add	sp, #16
 8000582:	bd80      	pop	{r7, pc}

08000584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <_sbrk+0x5c>)
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <_sbrk+0x60>)
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d102      	bne.n	80005a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <_sbrk+0x64>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <_sbrk+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	18d3      	adds	r3, r2, r3
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d207      	bcs.n	80005c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b4:	f001 fc86 	bl	8001ec4 <__errno>
 80005b8:	0003      	movs	r3, r0
 80005ba:	220c      	movs	r2, #12
 80005bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005be:	2301      	movs	r3, #1
 80005c0:	425b      	negs	r3, r3
 80005c2:	e009      	b.n	80005d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	18d2      	adds	r2, r2, r3
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <_sbrk+0x64>)
 80005d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	b006      	add	sp, #24
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20003000 	.word	0x20003000
 80005e4:	00000400 	.word	0x00000400
 80005e8:	20000118 	.word	0x20000118
 80005ec:	20000270 	.word	0x20000270

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <SystemInit+0x14>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0512      	lsls	r2, r2, #20
 80005fa:	609a      	str	r2, [r3, #8]
#endif
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff fff0 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000610:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000612:	e003      	b.n	800061c <LoopCopyDataInit>

08000614 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000616:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000618:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800061a:	3104      	adds	r1, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <LoopForever+0xa>)
  ldr r3, =_edata
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <LoopForever+0xe>)
  adds r2, r0, r1
 8000620:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000622:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000624:	d3f6      	bcc.n	8000614 <CopyDataInit>
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  b LoopFillZerobss
 8000628:	e002      	b.n	8000630 <LoopFillZerobss>

0800062a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  str  r3, [r2]
 800062c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062e:	3204      	adds	r2, #4

08000630 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <LoopForever+0x16>)
  cmp r2, r3
 8000632:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000634:	d3f9      	bcc.n	800062a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000636:	f001 fc4b 	bl	8001ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fdfb 	bl	8000234 <main>

0800063e <LoopForever>:

LoopForever:
    b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000644:	08002b98 	.word	0x08002b98
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800064c:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000650:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000654:	2000026c 	.word	0x2000026c

08000658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_IRQHandler>

0800065a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000666:	2003      	movs	r0, #3
 8000668:	f000 f80e 	bl	8000688 <HAL_InitTick>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d003      	beq.n	8000678 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e001      	b.n	800067c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000678:	f7ff fe9a 	bl	80003b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000690:	230f      	movs	r3, #15
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <HAL_InitTick+0x88>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d02b      	beq.n	80006f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <HAL_InitTick+0x8c>)
 80006a2:	681c      	ldr	r4, [r3, #0]
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_InitTick+0x88>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	0019      	movs	r1, r3
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	0098      	lsls	r0, r3, #2
 80006ae:	f7ff fd35 	bl	800011c <__udivsi3>
 80006b2:	0003      	movs	r3, r0
 80006b4:	0019      	movs	r1, r3
 80006b6:	0020      	movs	r0, r4
 80006b8:	f7ff fd30 	bl	800011c <__udivsi3>
 80006bc:	0003      	movs	r3, r0
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f913 	bl	80008ea <HAL_SYSTICK_Config>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d112      	bne.n	80006ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d80a      	bhi.n	80006e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2301      	movs	r3, #1
 80006d2:	425b      	negs	r3, r3
 80006d4:	2200      	movs	r2, #0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 f8f2 	bl	80008c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_InitTick+0x90>)
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	e00d      	b.n	8000700 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006e4:	230f      	movs	r3, #15
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e008      	b.n	8000700 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e003      	b.n	8000700 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f8:	230f      	movs	r3, #15
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000700:	230f      	movs	r3, #15
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	781b      	ldrb	r3, [r3, #0]
}
 8000706:	0018      	movs	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	b005      	add	sp, #20
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	20000008 	.word	0x20000008
 8000714:	20000000 	.word	0x20000000
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	001a      	movs	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	18d2      	adds	r2, r2, r3
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000008 	.word	0x20000008
 800073c:	2000011c 	.word	0x2000011c

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	0018      	movs	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	2000011c 	.word	0x2000011c

08000754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff fff0 	bl	8000740 <HAL_GetTick>
 8000760:	0003      	movs	r3, r0
 8000762:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	d005      	beq.n	800077a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_Delay+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	001a      	movs	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	189b      	adds	r3, r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	f7ff ffe0 	bl	8000740 <HAL_GetTick>
 8000780:	0002      	movs	r2, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8f7      	bhi.n	800077c <HAL_Delay+0x28>
  {
  }
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b004      	add	sp, #16
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	0002      	movs	r2, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b7f      	cmp	r3, #127	; 0x7f
 80007b0:	d828      	bhi.n	8000804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b2:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <__NVIC_SetPriority+0xd4>)
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	089b      	lsrs	r3, r3, #2
 80007bc:	33c0      	adds	r3, #192	; 0xc0
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	589b      	ldr	r3, [r3, r2]
 80007c2:	1dfa      	adds	r2, r7, #7
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	0011      	movs	r1, r2
 80007c8:	2203      	movs	r2, #3
 80007ca:	400a      	ands	r2, r1
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	21ff      	movs	r1, #255	; 0xff
 80007d0:	4091      	lsls	r1, r2
 80007d2:	000a      	movs	r2, r1
 80007d4:	43d2      	mvns	r2, r2
 80007d6:	401a      	ands	r2, r3
 80007d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	019b      	lsls	r3, r3, #6
 80007de:	22ff      	movs	r2, #255	; 0xff
 80007e0:	401a      	ands	r2, r3
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	0018      	movs	r0, r3
 80007e8:	2303      	movs	r3, #3
 80007ea:	4003      	ands	r3, r0
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f0:	481f      	ldr	r0, [pc, #124]	; (8000870 <__NVIC_SetPriority+0xd4>)
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	430a      	orrs	r2, r1
 80007fc:	33c0      	adds	r3, #192	; 0xc0
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000802:	e031      	b.n	8000868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <__NVIC_SetPriority+0xd8>)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0019      	movs	r1, r3
 800080c:	230f      	movs	r3, #15
 800080e:	400b      	ands	r3, r1
 8000810:	3b08      	subs	r3, #8
 8000812:	089b      	lsrs	r3, r3, #2
 8000814:	3306      	adds	r3, #6
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	18d3      	adds	r3, r2, r3
 800081a:	3304      	adds	r3, #4
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	0011      	movs	r1, r2
 8000824:	2203      	movs	r2, #3
 8000826:	400a      	ands	r2, r1
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	21ff      	movs	r1, #255	; 0xff
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	019b      	lsls	r3, r3, #6
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	401a      	ands	r2, r3
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	0018      	movs	r0, r3
 8000844:	2303      	movs	r3, #3
 8000846:	4003      	ands	r3, r0
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <__NVIC_SetPriority+0xd8>)
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	001c      	movs	r4, r3
 8000854:	230f      	movs	r3, #15
 8000856:	4023      	ands	r3, r4
 8000858:	3b08      	subs	r3, #8
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	430a      	orrs	r2, r1
 800085e:	3306      	adds	r3, #6
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	18c3      	adds	r3, r0, r3
 8000864:	3304      	adds	r3, #4
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b003      	add	sp, #12
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	045b      	lsls	r3, r3, #17
 8000888:	429a      	cmp	r2, r3
 800088a:	d301      	bcc.n	8000890 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088c:	2301      	movs	r3, #1
 800088e:	e010      	b.n	80008b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <SysTick_Config+0x44>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	3a01      	subs	r2, #1
 8000896:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2103      	movs	r1, #3
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff ff7c 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x44>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x44>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	210f      	movs	r1, #15
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	1c02      	adds	r2, r0, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ffbf 	bl	8000878 <SysTick_Config>
 80008fa:	0003      	movs	r3, r0
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000912:	e153      	b.n	8000bbc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4091      	lsls	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d100      	bne.n	800092c <HAL_GPIO_Init+0x28>
 800092a:	e144      	b.n	8000bb6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d003      	beq.n	800093c <HAL_GPIO_Init+0x38>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	2b12      	cmp	r3, #18
 800093a:	d125      	bne.n	8000988 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	58d3      	ldr	r3, [r2, r3]
 8000948:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	2207      	movs	r2, #7
 800094e:	4013      	ands	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	409a      	lsls	r2, r3
 8000956:	0013      	movs	r3, r2
 8000958:	43da      	mvns	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4013      	ands	r3, r2
 800095e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	220f      	movs	r2, #15
 8000966:	401a      	ands	r2, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	2107      	movs	r1, #7
 800096c:	400b      	ands	r3, r1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	409a      	lsls	r2, r3
 8000972:	0013      	movs	r3, r2
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	4313      	orrs	r3, r2
 8000978:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	6979      	ldr	r1, [r7, #20]
 8000986:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2203      	movs	r2, #3
 8000994:	409a      	lsls	r2, r3
 8000996:	0013      	movs	r3, r2
 8000998:	43da      	mvns	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	4013      	ands	r3, r2
 800099e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2203      	movs	r2, #3
 80009a6:	401a      	ands	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	409a      	lsls	r2, r3
 80009ae:	0013      	movs	r3, r2
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d00b      	beq.n	80009dc <HAL_GPIO_Init+0xd8>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d007      	beq.n	80009dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d0:	2b11      	cmp	r3, #17
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b12      	cmp	r3, #18
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4013      	ands	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	2201      	movs	r2, #1
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d017      	beq.n	8000a76 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	43da      	mvns	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	055b      	lsls	r3, r3, #21
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d100      	bne.n	8000a84 <HAL_GPIO_Init+0x180>
 8000a82:	e098      	b.n	8000bb6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000a84:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3318      	adds	r3, #24
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	589b      	ldr	r3, [r3, r2]
 8000a90:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	2203      	movs	r2, #3
 8000a96:	4013      	ands	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	43da      	mvns	r2, r3
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d019      	beq.n	8000ae6 <HAL_GPIO_Init+0x1e2>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x2d4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x1de>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a47      	ldr	r2, [pc, #284]	; (8000bdc <HAL_GPIO_Init+0x2d8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x1da>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a46      	ldr	r2, [pc, #280]	; (8000be0 <HAL_GPIO_Init+0x2dc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x1d6>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a45      	ldr	r2, [pc, #276]	; (8000be4 <HAL_GPIO_Init+0x2e0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x1d2>
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	e008      	b.n	8000ae8 <HAL_GPIO_Init+0x1e4>
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	e006      	b.n	8000ae8 <HAL_GPIO_Init+0x1e4>
 8000ada:	2303      	movs	r3, #3
 8000adc:	e004      	b.n	8000ae8 <HAL_GPIO_Init+0x1e4>
 8000ade:	2302      	movs	r3, #2
 8000ae0:	e002      	b.n	8000ae8 <HAL_GPIO_Init+0x1e4>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <HAL_GPIO_Init+0x1e4>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	2103      	movs	r1, #3
 8000aec:	400a      	ands	r2, r1
 8000aee:	00d2      	lsls	r2, r2, #3
 8000af0:	4093      	lsls	r3, r2
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000af8:	4936      	ldr	r1, [pc, #216]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3318      	adds	r3, #24
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000b06:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	58d3      	ldr	r3, [r2, r3]
 8000b0c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43da      	mvns	r2, r3
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4013      	ands	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	025b      	lsls	r3, r3, #9
 8000b20:	4013      	ands	r3, r2
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000b2c:	4929      	ldr	r1, [pc, #164]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b36:	2384      	movs	r3, #132	; 0x84
 8000b38:	58d3      	ldr	r3, [r2, r3]
 8000b3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	4013      	ands	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	029b      	lsls	r3, r3, #10
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000b5a:	491e      	ldr	r1, [pc, #120]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	2284      	movs	r2, #132	; 0x84
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43da      	mvns	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	039b      	lsls	r3, r3, #14
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	1e13      	subs	r3, r2, #0
 8000bc6:	d000      	beq.n	8000bca <HAL_GPIO_Init+0x2c6>
 8000bc8:	e6a4      	b.n	8000914 <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b006      	add	sp, #24
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021800 	.word	0x40021800
 8000bd8:	50000400 	.word	0x50000400
 8000bdc:	50000800 	.word	0x50000800
 8000be0:	50000c00 	.word	0x50000c00
 8000be4:	50001400 	.word	0x50001400

08000be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e1d0      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4013      	ands	r3, r2
 8000c02:	d100      	bne.n	8000c06 <HAL_RCC_OscConfig+0x1e>
 8000c04:	e069      	b.n	8000cda <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c06:	4bc8      	ldr	r3, [pc, #800]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2238      	movs	r2, #56	; 0x38
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d105      	bne.n	8000c22 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d15d      	bne.n	8000cda <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1bc      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d107      	bne.n	8000c3e <HAL_RCC_OscConfig+0x56>
 8000c2e:	4bbe      	ldr	r3, [pc, #760]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4bbd      	ldr	r3, [pc, #756]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0249      	lsls	r1, r1, #9
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e020      	b.n	8000c80 <HAL_RCC_OscConfig+0x98>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	23a0      	movs	r3, #160	; 0xa0
 8000c44:	02db      	lsls	r3, r3, #11
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d10e      	bne.n	8000c68 <HAL_RCC_OscConfig+0x80>
 8000c4a:	4bb7      	ldr	r3, [pc, #732]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4bb6      	ldr	r3, [pc, #728]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	02c9      	lsls	r1, r1, #11
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	4bb3      	ldr	r3, [pc, #716]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4bb2      	ldr	r3, [pc, #712]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0249      	lsls	r1, r1, #9
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0x98>
 8000c68:	4baf      	ldr	r3, [pc, #700]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4bae      	ldr	r3, [pc, #696]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c6e:	49af      	ldr	r1, [pc, #700]	; (8000f2c <HAL_RCC_OscConfig+0x344>)
 8000c70:	400a      	ands	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	4bac      	ldr	r3, [pc, #688]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4bab      	ldr	r3, [pc, #684]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000c7a:	49ad      	ldr	r1, [pc, #692]	; (8000f30 <HAL_RCC_OscConfig+0x348>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d014      	beq.n	8000cb2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c88:	f7ff fd5a 	bl	8000740 <HAL_GetTick>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000c92:	f7ff fd55 	bl	8000740 <HAL_GetTick>
 8000c96:	0002      	movs	r2, r0
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b64      	cmp	r3, #100	; 0x64
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e17b      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ca4:	4ba0      	ldr	r3, [pc, #640]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	029b      	lsls	r3, r3, #10
 8000cac:	4013      	ands	r3, r2
 8000cae:	d0f0      	beq.n	8000c92 <HAL_RCC_OscConfig+0xaa>
 8000cb0:	e013      	b.n	8000cda <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb2:	f7ff fd45 	bl	8000740 <HAL_GetTick>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000cbc:	f7ff fd40 	bl	8000740 <HAL_GetTick>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b64      	cmp	r3, #100	; 0x64
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e166      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cce:	4b96      	ldr	r3, [pc, #600]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d1f0      	bne.n	8000cbc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d100      	bne.n	8000ce6 <HAL_RCC_OscConfig+0xfe>
 8000ce4:	e086      	b.n	8000df4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ce6:	4b90      	ldr	r3, [pc, #576]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2238      	movs	r2, #56	; 0x38
 8000cec:	4013      	ands	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d12f      	bne.n	8000d56 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e14c      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d02:	4b89      	ldr	r3, [pc, #548]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4a8b      	ldr	r2, [pc, #556]	; (8000f34 <HAL_RCC_OscConfig+0x34c>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	021a      	lsls	r2, r3, #8
 8000d12:	4b85      	ldr	r3, [pc, #532]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d14:	430a      	orrs	r2, r1
 8000d16:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d112      	bne.n	8000d44 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d1e:	4b82      	ldr	r3, [pc, #520]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a85      	ldr	r2, [pc, #532]	; (8000f38 <HAL_RCC_OscConfig+0x350>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	0019      	movs	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	4b7e      	ldr	r3, [pc, #504]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000d32:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0adb      	lsrs	r3, r3, #11
 8000d38:	2207      	movs	r2, #7
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	4a7f      	ldr	r2, [pc, #508]	; (8000f3c <HAL_RCC_OscConfig+0x354>)
 8000d3e:	40da      	lsrs	r2, r3
 8000d40:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x358>)
 8000d42:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d44:	4b7f      	ldr	r3, [pc, #508]	; (8000f44 <HAL_RCC_OscConfig+0x35c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff fc9d 	bl	8000688 <HAL_InitTick>
 8000d4e:	1e03      	subs	r3, r0, #0
 8000d50:	d050      	beq.n	8000df4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e122      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d030      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d5e:	4b72      	ldr	r3, [pc, #456]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a75      	ldr	r2, [pc, #468]	; (8000f38 <HAL_RCC_OscConfig+0x350>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	0019      	movs	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	4b6e      	ldr	r3, [pc, #440]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000d72:	4b6d      	ldr	r3, [pc, #436]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d80:	f7ff fcde 	bl	8000740 <HAL_GetTick>
 8000d84:	0003      	movs	r3, r0
 8000d86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fcd9 	bl	8000740 <HAL_GetTick>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e0ff      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d9c:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4013      	ands	r3, r2
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da8:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a61      	ldr	r2, [pc, #388]	; (8000f34 <HAL_RCC_OscConfig+0x34c>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	0019      	movs	r1, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	021a      	lsls	r2, r3, #8
 8000db8:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	e019      	b.n	8000df4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000dc0:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000dc6:	4960      	ldr	r1, [pc, #384]	; (8000f48 <HAL_RCC_OscConfig+0x360>)
 8000dc8:	400a      	ands	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fcb8 	bl	8000740 <HAL_GetTick>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fcb3 	bl	8000740 <HAL_GetTick>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e0d9      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000de8:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4013      	ands	r3, r2
 8000df2:	d1f0      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2208      	movs	r2, #8
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d042      	beq.n	8000e84 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000dfe:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2238      	movs	r2, #56	; 0x38
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b18      	cmp	r3, #24
 8000e08:	d105      	bne.n	8000e16 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d138      	bne.n	8000e84 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e0c2      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d019      	beq.n	8000e52 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e22:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fc89 	bl	8000740 <HAL_GetTick>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fc84 	bl	8000740 <HAL_GetTick>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e0aa      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000e46:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d0f1      	beq.n	8000e34 <HAL_RCC_OscConfig+0x24c>
 8000e50:	e018      	b.n	8000e84 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fc6f 	bl	8000740 <HAL_GetTick>
 8000e62:	0003      	movs	r3, r0
 8000e64:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000e68:	f7ff fc6a 	bl	8000740 <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e090      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	d1f1      	bne.n	8000e68 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d100      	bne.n	8000e90 <HAL_RCC_OscConfig+0x2a8>
 8000e8e:	e084      	b.n	8000f9a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2238      	movs	r2, #56	; 0x38
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d000      	beq.n	8000eae <HAL_RCC_OscConfig+0x2c6>
 8000eac:	e075      	b.n	8000f9a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e074      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d106      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x2e0>
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ec6:	e01c      	b.n	8000f02 <HAL_RCC_OscConfig+0x31a>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d10c      	bne.n	8000eea <HAL_RCC_OscConfig+0x302>
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	65da      	str	r2, [r3, #92]	; 0x5c
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ede:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ee8:	e00b      	b.n	8000f02 <HAL_RCC_OscConfig+0x31a>
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	438a      	bics	r2, r1
 8000ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000ef8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_RCC_OscConfig+0x340>)
 8000efc:	2104      	movs	r1, #4
 8000efe:	438a      	bics	r2, r1
 8000f00:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d028      	beq.n	8000f5c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc19 	bl	8000740 <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f12:	e01d      	b.n	8000f50 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc14 	bl	8000740 <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_RCC_OscConfig+0x364>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d915      	bls.n	8000f50 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e039      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	fffeffff 	.word	0xfffeffff
 8000f30:	fffbffff 	.word	0xfffbffff
 8000f34:	ffff80ff 	.word	0xffff80ff
 8000f38:	ffffc7ff 	.word	0xffffc7ff
 8000f3c:	02dc6c00 	.word	0x02dc6c00
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004
 8000f48:	fffffeff 	.word	0xfffffeff
 8000f4c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_RCC_OscConfig+0x3bc>)
 8000f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f54:	2202      	movs	r2, #2
 8000f56:	4013      	ands	r3, r2
 8000f58:	d0dc      	beq.n	8000f14 <HAL_RCC_OscConfig+0x32c>
 8000f5a:	e013      	b.n	8000f84 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fbf0 	bl	8000740 <HAL_GetTick>
 8000f60:	0003      	movs	r3, r0
 8000f62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000f64:	e009      	b.n	8000f7a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fbeb 	bl	8000740 <HAL_GetTick>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_RCC_OscConfig+0x3c0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e010      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_RCC_OscConfig+0x3bc>)
 8000f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7e:	2202      	movs	r2, #2
 8000f80:	4013      	ands	r3, r2
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d105      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_RCC_OscConfig+0x3bc>)
 8000f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_RCC_OscConfig+0x3bc>)
 8000f94:	4905      	ldr	r1, [pc, #20]	; (8000fac <HAL_RCC_OscConfig+0x3c4>)
 8000f96:	400a      	ands	r2, r1
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b006      	add	sp, #24
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	00001388 	.word	0x00001388
 8000fac:	efffffff 	.word	0xefffffff

08000fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0e9      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2207      	movs	r2, #7
 8000fca:	4013      	ands	r3, r2
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d91e      	bls.n	8001010 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	4393      	bics	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000fe4:	f7ff fbac 	bl	8000740 <HAL_GetTick>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fec:	e009      	b.n	8001002 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8000fee:	f7ff fba7 	bl	8000740 <HAL_GetTick>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a6a      	ldr	r2, [pc, #424]	; (80011a4 <HAL_RCC_ClockConfig+0x1f4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e0ca      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001002:	4b67      	ldr	r3, [pc, #412]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2207      	movs	r2, #7
 8001008:	4013      	ands	r3, r2
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d1ee      	bne.n	8000fee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	d017      	beq.n	800104a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2204      	movs	r2, #4
 8001020:	4013      	ands	r3, r2
 8001022:	d008      	beq.n	8001036 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001024:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a60      	ldr	r2, [pc, #384]	; (80011ac <HAL_RCC_ClockConfig+0x1fc>)
 800102a:	401a      	ands	r2, r3
 800102c:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 800102e:	21b0      	movs	r1, #176	; 0xb0
 8001030:	0109      	lsls	r1, r1, #4
 8001032:	430a      	orrs	r2, r1
 8001034:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4a5d      	ldr	r2, [pc, #372]	; (80011b0 <HAL_RCC_ClockConfig+0x200>)
 800103c:	4013      	ands	r3, r2
 800103e:	0019      	movs	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2201      	movs	r2, #1
 8001050:	4013      	ands	r3, r2
 8001052:	d055      	beq.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	221c      	movs	r2, #28
 800105a:	4393      	bics	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d107      	bne.n	8001080 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d11f      	bne.n	80010bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e08b      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d107      	bne.n	8001098 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4013      	ands	r3, r2
 8001092:	d113      	bne.n	80010bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e07f      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d106      	bne.n	80010ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d108      	bne.n	80010bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e074      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	2202      	movs	r2, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e06d      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	2207      	movs	r2, #7
 80010c2:	4393      	bics	r3, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 80010cc:	430a      	orrs	r2, r1
 80010ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010d0:	f7ff fb36 	bl	8000740 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d8:	e009      	b.n	80010ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80010da:	f7ff fb31 	bl	8000740 <HAL_GetTick>
 80010de:	0002      	movs	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_RCC_ClockConfig+0x1f4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e054      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2238      	movs	r2, #56	; 0x38
 80010f4:	401a      	ands	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d1ec      	bne.n	80010da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2207      	movs	r2, #7
 8001106:	4013      	ands	r3, r2
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d21e      	bcs.n	800114c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2207      	movs	r2, #7
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001120:	f7ff fb0e 	bl	8000740 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001128:	e009      	b.n	800113e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800112a:	f7ff fb09 	bl	8000740 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e02c      	b.n	8001198 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2207      	movs	r2, #7
 8001144:	4013      	ands	r3, r2
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d1ee      	bne.n	800112a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2204      	movs	r2, #4
 8001152:	4013      	ands	r3, r2
 8001154:	d009      	beq.n	800116a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <HAL_RCC_ClockConfig+0x204>)
 800115c:	4013      	ands	r3, r2
 800115e:	0019      	movs	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001166:	430a      	orrs	r2, r1
 8001168:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800116a:	f000 f82b 	bl	80011c4 <HAL_RCC_GetSysClockFreq>
 800116e:	0001      	movs	r1, r0
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	220f      	movs	r2, #15
 8001178:	401a      	ands	r2, r3
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_RCC_ClockConfig+0x208>)
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	58d3      	ldr	r3, [r2, r3]
 8001180:	221f      	movs	r2, #31
 8001182:	4013      	ands	r3, r2
 8001184:	000a      	movs	r2, r1
 8001186:	40da      	lsrs	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_RCC_ClockConfig+0x20c>)
 800118a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_RCC_ClockConfig+0x210>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fa79 	bl	8000688 <HAL_InitTick>
 8001196:	0003      	movs	r3, r0
}
 8001198:	0018      	movs	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40022000 	.word	0x40022000
 80011a4:	00001388 	.word	0x00001388
 80011a8:	40021000 	.word	0x40021000
 80011ac:	ffff84ff 	.word	0xffff84ff
 80011b0:	fffff0ff 	.word	0xfffff0ff
 80011b4:	ffff8fff 	.word	0xffff8fff
 80011b8:	08002ae4 	.word	0x08002ae4
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_RCC_GetSysClockFreq+0x78>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	4013      	ands	r3, r2
 80011d2:	d10f      	bne.n	80011f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_RCC_GetSysClockFreq+0x78>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0adb      	lsrs	r3, r3, #11
 80011da:	2207      	movs	r2, #7
 80011dc:	4013      	ands	r3, r2
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	4815      	ldr	r0, [pc, #84]	; (8001240 <HAL_RCC_GetSysClockFreq+0x7c>)
 80011ea:	f7fe ff97 	bl	800011c <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	e01e      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_RCC_GetSysClockFreq+0x78>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	2238      	movs	r2, #56	; 0x38
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d102      	bne.n	8001206 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_RCC_GetSysClockFreq+0x80>)
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	e015      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_RCC_GetSysClockFreq+0x78>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2238      	movs	r2, #56	; 0x38
 800120c:	4013      	ands	r3, r2
 800120e:	2b20      	cmp	r3, #32
 8001210:	d103      	bne.n	800121a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	e00b      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_RCC_GetSysClockFreq+0x78>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2238      	movs	r2, #56	; 0x38
 8001220:	4013      	ands	r3, r2
 8001222:	2b18      	cmp	r3, #24
 8001224:	d103      	bne.n	800122e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001226:	23fa      	movs	r3, #250	; 0xfa
 8001228:	01db      	lsls	r3, r3, #7
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	02dc6c00 	.word	0x02dc6c00
 8001244:	007a1200 	.word	0x007a1200

08001248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_RCC_GetHCLKFreq+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001260:	f7ff fff2 	bl	8001248 <HAL_RCC_GetHCLKFreq>
 8001264:	0001      	movs	r1, r0
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	2207      	movs	r2, #7
 800126e:	401a      	ands	r2, r3
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	58d3      	ldr	r3, [r2, r3]
 8001276:	221f      	movs	r2, #31
 8001278:	4013      	ands	r3, r2
 800127a:	40d9      	lsrs	r1, r3
 800127c:	000b      	movs	r3, r1
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000
 8001288:	08002b24 	.word	0x08002b24

0800128c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e046      	b.n	800132c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2288      	movs	r2, #136	; 0x88
 80012a2:	589b      	ldr	r3, [r3, r2]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2284      	movs	r2, #132	; 0x84
 80012ac:	2100      	movs	r1, #0
 80012ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7ff f8a0 	bl	80003f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2288      	movs	r2, #136	; 0x88
 80012bc:	2124      	movs	r1, #36	; 0x24
 80012be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2101      	movs	r1, #1
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 fa4e 	bl	800177c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8cc 	bl	8001480 <UART_SetConfig>
 80012e8:	0003      	movs	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e01c      	b.n	800132c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	490d      	ldr	r1, [pc, #52]	; (8001334 <HAL_UART_Init+0xa8>)
 80012fe:	400a      	ands	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	212a      	movs	r1, #42	; 0x2a
 800130e:	438a      	bics	r2, r1
 8001310:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0018      	movs	r0, r3
 8001326:	f000 fadd 	bl	80018e4 <UART_CheckIdleState>
 800132a:	0003      	movs	r3, r0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}
 8001334:	ffffb7ff 	.word	0xffffb7ff

08001338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2288      	movs	r2, #136	; 0x88
 800134c:	589b      	ldr	r3, [r3, r2]
 800134e:	2b20      	cmp	r3, #32
 8001350:	d000      	beq.n	8001354 <HAL_UART_Transmit+0x1c>
 8001352:	e090      	b.n	8001476 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_UART_Transmit+0x2a>
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e088      	b.n	8001478 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	429a      	cmp	r2, r3
 8001370:	d109      	bne.n	8001386 <HAL_UART_Transmit+0x4e>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2201      	movs	r2, #1
 800137e:	4013      	ands	r3, r2
 8001380:	d001      	beq.n	8001386 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e078      	b.n	8001478 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2290      	movs	r2, #144	; 0x90
 800138a:	2100      	movs	r1, #0
 800138c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2288      	movs	r2, #136	; 0x88
 8001392:	2121      	movs	r1, #33	; 0x21
 8001394:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001396:	f7ff f9d3 	bl	8000740 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1dba      	adds	r2, r7, #6
 80013a2:	2154      	movs	r1, #84	; 0x54
 80013a4:	8812      	ldrh	r2, [r2, #0]
 80013a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1dba      	adds	r2, r7, #6
 80013ac:	2156      	movs	r1, #86	; 0x56
 80013ae:	8812      	ldrh	r2, [r2, #0]
 80013b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	015b      	lsls	r3, r3, #5
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d108      	bne.n	80013d0 <HAL_UART_Transmit+0x98>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d104      	bne.n	80013d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e003      	b.n	80013d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80013d8:	e030      	b.n	800143c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	0013      	movs	r3, r2
 80013e4:	2200      	movs	r2, #0
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	f000 fb26 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d005      	beq.n	80013fc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2288      	movs	r2, #136	; 0x88
 80013f4:	2120      	movs	r1, #32
 80013f6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e03d      	b.n	8001478 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10b      	bne.n	800141a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	001a      	movs	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	05d2      	lsls	r2, r2, #23
 800140e:	0dd2      	lsrs	r2, r2, #23
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3302      	adds	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	e007      	b.n	800142a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3301      	adds	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2256      	movs	r2, #86	; 0x56
 800142e:	5a9b      	ldrh	r3, [r3, r2]
 8001430:	b29b      	uxth	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b299      	uxth	r1, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2256      	movs	r2, #86	; 0x56
 800143a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2256      	movs	r2, #86	; 0x56
 8001440:	5a9b      	ldrh	r3, [r3, r2]
 8001442:	b29b      	uxth	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1c8      	bne.n	80013da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	0013      	movs	r3, r2
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	f000 faef 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d005      	beq.n	800146a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2288      	movs	r2, #136	; 0x88
 8001462:	2120      	movs	r1, #32
 8001464:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e006      	b.n	8001478 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2288      	movs	r2, #136	; 0x88
 800146e:	2120      	movs	r1, #32
 8001470:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
  }
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b008      	add	sp, #32
 800147e:	bd80      	pop	{r7, pc}

08001480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001488:	231e      	movs	r3, #30
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4aab      	ldr	r2, [pc, #684]	; (800175c <UART_SetConfig+0x2dc>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4aa6      	ldr	r2, [pc, #664]	; (8001760 <UART_SetConfig+0x2e0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4a9d      	ldr	r2, [pc, #628]	; (8001764 <UART_SetConfig+0x2e4>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	0019      	movs	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	220f      	movs	r2, #15
 8001504:	4393      	bics	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a93      	ldr	r2, [pc, #588]	; (8001768 <UART_SetConfig+0x2e8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d127      	bne.n	800156e <UART_SetConfig+0xee>
 800151e:	4b93      	ldr	r3, [pc, #588]	; (800176c <UART_SetConfig+0x2ec>)
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	2203      	movs	r2, #3
 8001524:	4013      	ands	r3, r2
 8001526:	2b03      	cmp	r3, #3
 8001528:	d017      	beq.n	800155a <UART_SetConfig+0xda>
 800152a:	d81b      	bhi.n	8001564 <UART_SetConfig+0xe4>
 800152c:	2b02      	cmp	r3, #2
 800152e:	d00a      	beq.n	8001546 <UART_SetConfig+0xc6>
 8001530:	d818      	bhi.n	8001564 <UART_SetConfig+0xe4>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <UART_SetConfig+0xbc>
 8001536:	2b01      	cmp	r3, #1
 8001538:	d00a      	beq.n	8001550 <UART_SetConfig+0xd0>
 800153a:	e013      	b.n	8001564 <UART_SetConfig+0xe4>
 800153c:	231f      	movs	r3, #31
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e021      	b.n	800158a <UART_SetConfig+0x10a>
 8001546:	231f      	movs	r3, #31
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2202      	movs	r2, #2
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e01c      	b.n	800158a <UART_SetConfig+0x10a>
 8001550:	231f      	movs	r3, #31
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2204      	movs	r2, #4
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e017      	b.n	800158a <UART_SetConfig+0x10a>
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2208      	movs	r2, #8
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e012      	b.n	800158a <UART_SetConfig+0x10a>
 8001564:	231f      	movs	r3, #31
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2210      	movs	r2, #16
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e00d      	b.n	800158a <UART_SetConfig+0x10a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <UART_SetConfig+0x2f0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d104      	bne.n	8001582 <UART_SetConfig+0x102>
 8001578:	231f      	movs	r3, #31
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e003      	b.n	800158a <UART_SetConfig+0x10a>
 8001582:	231f      	movs	r3, #31
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2210      	movs	r2, #16
 8001588:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	429a      	cmp	r2, r3
 8001594:	d000      	beq.n	8001598 <UART_SetConfig+0x118>
 8001596:	e06f      	b.n	8001678 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001598:	231f      	movs	r3, #31
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d01f      	beq.n	80015e2 <UART_SetConfig+0x162>
 80015a2:	dc22      	bgt.n	80015ea <UART_SetConfig+0x16a>
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d017      	beq.n	80015d8 <UART_SetConfig+0x158>
 80015a8:	dc1f      	bgt.n	80015ea <UART_SetConfig+0x16a>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <UART_SetConfig+0x134>
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d005      	beq.n	80015be <UART_SetConfig+0x13e>
 80015b2:	e01a      	b.n	80015ea <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80015b4:	f7ff fe52 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
        break;
 80015bc:	e01c      	b.n	80015f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <UART_SetConfig+0x2ec>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2207      	movs	r2, #7
 80015c6:	4013      	ands	r3, r2
 80015c8:	3301      	adds	r3, #1
 80015ca:	0019      	movs	r1, r3
 80015cc:	4869      	ldr	r0, [pc, #420]	; (8001774 <UART_SetConfig+0x2f4>)
 80015ce:	f7fe fda5 	bl	800011c <__udivsi3>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]
        break;
 80015d6:	e00f      	b.n	80015f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80015d8:	f7ff fdf4 	bl	80011c4 <HAL_RCC_GetSysClockFreq>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
        break;
 80015e0:	e00a      	b.n	80015f8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	61bb      	str	r3, [r7, #24]
        break;
 80015e8:	e006      	b.n	80015f8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80015ee:	231e      	movs	r3, #30
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
        break;
 80015f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <UART_SetConfig+0x180>
 80015fe:	e097      	b.n	8001730 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <UART_SetConfig+0x2f8>)
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	5ad3      	ldrh	r3, [r2, r3]
 800160a:	0019      	movs	r1, r3
 800160c:	69b8      	ldr	r0, [r7, #24]
 800160e:	f7fe fd85 	bl	800011c <__udivsi3>
 8001612:	0003      	movs	r3, r0
 8001614:	005a      	lsls	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	18d2      	adds	r2, r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	0019      	movs	r1, r3
 8001624:	0010      	movs	r0, r2
 8001626:	f7fe fd79 	bl	800011c <__udivsi3>
 800162a:	0003      	movs	r3, r0
 800162c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d91c      	bls.n	800166e <UART_SetConfig+0x1ee>
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	429a      	cmp	r2, r3
 800163c:	d217      	bcs.n	800166e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	b29a      	uxth	r2, r3
 8001642:	200e      	movs	r0, #14
 8001644:	183b      	adds	r3, r7, r0
 8001646:	210f      	movs	r1, #15
 8001648:	438a      	bics	r2, r1
 800164a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	2207      	movs	r2, #7
 8001654:	4013      	ands	r3, r2
 8001656:	b299      	uxth	r1, r3
 8001658:	183b      	adds	r3, r7, r0
 800165a:	183a      	adds	r2, r7, r0
 800165c:	8812      	ldrh	r2, [r2, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	183a      	adds	r2, r7, r0
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	e060      	b.n	8001730 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800166e:	231e      	movs	r3, #30
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e05b      	b.n	8001730 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001678:	231f      	movs	r3, #31
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d01f      	beq.n	80016c2 <UART_SetConfig+0x242>
 8001682:	dc22      	bgt.n	80016ca <UART_SetConfig+0x24a>
 8001684:	2b04      	cmp	r3, #4
 8001686:	d017      	beq.n	80016b8 <UART_SetConfig+0x238>
 8001688:	dc1f      	bgt.n	80016ca <UART_SetConfig+0x24a>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <UART_SetConfig+0x214>
 800168e:	2b02      	cmp	r3, #2
 8001690:	d005      	beq.n	800169e <UART_SetConfig+0x21e>
 8001692:	e01a      	b.n	80016ca <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001694:	f7ff fde2 	bl	800125c <HAL_RCC_GetPCLK1Freq>
 8001698:	0003      	movs	r3, r0
 800169a:	61bb      	str	r3, [r7, #24]
        break;
 800169c:	e01c      	b.n	80016d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <UART_SetConfig+0x2ec>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2207      	movs	r2, #7
 80016a6:	4013      	ands	r3, r2
 80016a8:	3301      	adds	r3, #1
 80016aa:	0019      	movs	r1, r3
 80016ac:	4831      	ldr	r0, [pc, #196]	; (8001774 <UART_SetConfig+0x2f4>)
 80016ae:	f7fe fd35 	bl	800011c <__udivsi3>
 80016b2:	0003      	movs	r3, r0
 80016b4:	61bb      	str	r3, [r7, #24]
        break;
 80016b6:	e00f      	b.n	80016d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016b8:	f7ff fd84 	bl	80011c4 <HAL_RCC_GetSysClockFreq>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
        break;
 80016c0:	e00a      	b.n	80016d8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	61bb      	str	r3, [r7, #24]
        break;
 80016c8:	e006      	b.n	80016d8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80016ce:	231e      	movs	r3, #30
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
        break;
 80016d6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d028      	beq.n	8001730 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <UART_SetConfig+0x2f8>)
 80016e4:	0052      	lsls	r2, r2, #1
 80016e6:	5ad3      	ldrh	r3, [r2, r3]
 80016e8:	0019      	movs	r1, r3
 80016ea:	69b8      	ldr	r0, [r7, #24]
 80016ec:	f7fe fd16 	bl	800011c <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	001a      	movs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	18d2      	adds	r2, r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	0019      	movs	r1, r3
 8001702:	0010      	movs	r0, r2
 8001704:	f7fe fd0a 	bl	800011c <__udivsi3>
 8001708:	0003      	movs	r3, r0
 800170a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	d90a      	bls.n	8001728 <UART_SetConfig+0x2a8>
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	429a      	cmp	r2, r3
 800171a:	d205      	bcs.n	8001728 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	e003      	b.n	8001730 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001728:	231e      	movs	r3, #30
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	226a      	movs	r2, #106	; 0x6a
 8001734:	2101      	movs	r1, #1
 8001736:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2268      	movs	r2, #104	; 0x68
 800173c:	2101      	movs	r1, #1
 800173e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800174c:	231e      	movs	r3, #30
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	781b      	ldrb	r3, [r3, #0]
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b008      	add	sp, #32
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	cfff69f3 	.word	0xcfff69f3
 8001760:	ffffcfff 	.word	0xffffcfff
 8001764:	11fff4ff 	.word	0x11fff4ff
 8001768:	40013800 	.word	0x40013800
 800176c:	40021000 	.word	0x40021000
 8001770:	40004400 	.word	0x40004400
 8001774:	02dc6c00 	.word	0x02dc6c00
 8001778:	08002b44 	.word	0x08002b44

0800177c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	2208      	movs	r2, #8
 800178a:	4013      	ands	r3, r2
 800178c:	d00b      	beq.n	80017a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <UART_AdvFeatureConfig+0x144>)
 8001796:	4013      	ands	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	2201      	movs	r2, #1
 80017ac:	4013      	ands	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <UART_AdvFeatureConfig+0x148>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	0019      	movs	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d00b      	beq.n	80017ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a3b      	ldr	r2, [pc, #236]	; (80018c8 <UART_AdvFeatureConfig+0x14c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d00b      	beq.n	800180c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <UART_AdvFeatureConfig+0x150>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	2210      	movs	r2, #16
 8001812:	4013      	ands	r3, r2
 8001814:	d00b      	beq.n	800182e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <UART_AdvFeatureConfig+0x154>)
 800181e:	4013      	ands	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	2220      	movs	r2, #32
 8001834:	4013      	ands	r3, r2
 8001836:	d00b      	beq.n	8001850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <UART_AdvFeatureConfig+0x158>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	4013      	ands	r3, r2
 8001858:	d01d      	beq.n	8001896 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <UART_AdvFeatureConfig+0x15c>)
 8001862:	4013      	ands	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	035b      	lsls	r3, r3, #13
 800187a:	429a      	cmp	r2, r3
 800187c:	d10b      	bne.n	8001896 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a15      	ldr	r2, [pc, #84]	; (80018dc <UART_AdvFeatureConfig+0x160>)
 8001886:	4013      	ands	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	4013      	ands	r3, r2
 800189e:	d00b      	beq.n	80018b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <UART_AdvFeatureConfig+0x164>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
  }
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	ffff7fff 	.word	0xffff7fff
 80018c4:	fffdffff 	.word	0xfffdffff
 80018c8:	fffeffff 	.word	0xfffeffff
 80018cc:	fffbffff 	.word	0xfffbffff
 80018d0:	ffffefff 	.word	0xffffefff
 80018d4:	ffffdfff 	.word	0xffffdfff
 80018d8:	ffefffff 	.word	0xffefffff
 80018dc:	ff9fffff 	.word	0xff9fffff
 80018e0:	fff7ffff 	.word	0xfff7ffff

080018e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b092      	sub	sp, #72	; 0x48
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2290      	movs	r2, #144	; 0x90
 80018f0:	2100      	movs	r1, #0
 80018f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80018f4:	f7fe ff24 	bl	8000740 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2208      	movs	r2, #8
 8001904:	4013      	ands	r3, r2
 8001906:	2b08      	cmp	r3, #8
 8001908:	d12d      	bne.n	8001966 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	0391      	lsls	r1, r2, #14
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <UART_CheckIdleState+0x14c>)
 8001914:	9200      	str	r2, [sp, #0]
 8001916:	2200      	movs	r2, #0
 8001918:	f000 f88e 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d022      	beq.n	8001966 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001920:	f3ef 8310 	mrs	r3, PRIMASK
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
 800192a:	2301      	movs	r3, #1
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	f383 8810 	msr	PRIMASK, r3
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	438a      	bics	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	f383 8810 	msr	PRIMASK, r3
}
 8001950:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2288      	movs	r2, #136	; 0x88
 8001956:	2120      	movs	r1, #32
 8001958:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2284      	movs	r2, #132	; 0x84
 800195e:	2100      	movs	r1, #0
 8001960:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e060      	b.n	8001a28 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2204      	movs	r2, #4
 800196e:	4013      	ands	r3, r2
 8001970:	2b04      	cmp	r3, #4
 8001972:	d146      	bne.n	8001a02 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	03d1      	lsls	r1, r2, #15
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <UART_CheckIdleState+0x14c>)
 800197e:	9200      	str	r2, [sp, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	f000 f859 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d03b      	beq.n	8001a02 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800198a:	f3ef 8310 	mrs	r3, PRIMASK
 800198e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001990:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
 8001994:	2301      	movs	r3, #1
 8001996:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f383 8810 	msr	PRIMASK, r3
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4922      	ldr	r1, [pc, #136]	; (8001a34 <UART_CheckIdleState+0x150>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f383 8810 	msr	PRIMASK, r3
}
 80019ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019bc:	f3ef 8310 	mrs	r3, PRIMASK
 80019c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80019c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
 80019c6:	2301      	movs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f383 8810 	msr	PRIMASK, r3
}
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	438a      	bics	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	f383 8810 	msr	PRIMASK, r3
}
 80019ec:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	228c      	movs	r2, #140	; 0x8c
 80019f2:	2120      	movs	r1, #32
 80019f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2284      	movs	r2, #132	; 0x84
 80019fa:	2100      	movs	r1, #0
 80019fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e012      	b.n	8001a28 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2288      	movs	r2, #136	; 0x88
 8001a06:	2120      	movs	r1, #32
 8001a08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	228c      	movs	r2, #140	; 0x8c
 8001a0e:	2120      	movs	r1, #32
 8001a10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2284      	movs	r2, #132	; 0x84
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b010      	add	sp, #64	; 0x40
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	01ffffff 	.word	0x01ffffff
 8001a34:	fffffedf 	.word	0xfffffedf

08001a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a48:	e04b      	b.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	d048      	beq.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a50:	f7fe fe76 	bl	8000740 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d302      	bcc.n	8001a66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e04b      	b.n	8001b02 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2204      	movs	r2, #4
 8001a72:	4013      	ands	r3, r2
 8001a74:	d035      	beq.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d111      	bne.n	8001aa8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f83c 	bl	8001b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2290      	movs	r2, #144	; 0x90
 8001a98:	2108      	movs	r1, #8
 8001a9a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2284      	movs	r2, #132	; 0x84
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e02c      	b.n	8001b02 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d112      	bne.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 f81f 	bl	8001b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2290      	movs	r2, #144	; 0x90
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2284      	movs	r2, #132	; 0x84
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e00f      	b.n	8001b02 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	4013      	ands	r3, r2
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	425a      	negs	r2, r3
 8001af2:	4153      	adcs	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	001a      	movs	r2, r3
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d0a4      	beq.n	8001a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b004      	add	sp, #16
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	; 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b14:	f3ef 8310 	mrs	r3, PRIMASK
 8001b18:	617b      	str	r3, [r7, #20]
  return(result);
 8001b1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f383 8810 	msr	PRIMASK, r3
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4926      	ldr	r1, [pc, #152]	; (8001bd0 <UART_EndRxTransfer+0xc4>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f383 8810 	msr	PRIMASK, r3
}
 8001b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b46:	f3ef 8310 	mrs	r3, PRIMASK
 8001b4a:	623b      	str	r3, [r7, #32]
  return(result);
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b50:	2301      	movs	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	f383 8810 	msr	PRIMASK, r3
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <UART_EndRxTransfer+0xc8>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	f383 8810 	msr	PRIMASK, r3
}
 8001b76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d118      	bne.n	8001bb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001b80:	f3ef 8310 	mrs	r3, PRIMASK
 8001b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f383 8810 	msr	PRIMASK, r3
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	438a      	bics	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f383 8810 	msr	PRIMASK, r3
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	228c      	movs	r2, #140	; 0x8c
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b00e      	add	sp, #56	; 0x38
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	fffffedf 	.word	0xfffffedf
 8001bd4:	effffffe 	.word	0xeffffffe

08001bd8 <std>:
 8001bd8:	2300      	movs	r3, #0
 8001bda:	b510      	push	{r4, lr}
 8001bdc:	0004      	movs	r4, r0
 8001bde:	6003      	str	r3, [r0, #0]
 8001be0:	6043      	str	r3, [r0, #4]
 8001be2:	6083      	str	r3, [r0, #8]
 8001be4:	8181      	strh	r1, [r0, #12]
 8001be6:	6643      	str	r3, [r0, #100]	; 0x64
 8001be8:	81c2      	strh	r2, [r0, #14]
 8001bea:	6103      	str	r3, [r0, #16]
 8001bec:	6143      	str	r3, [r0, #20]
 8001bee:	6183      	str	r3, [r0, #24]
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	305c      	adds	r0, #92	; 0x5c
 8001bf6:	f000 f90f 	bl	8001e18 <memset>
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <std+0x50>)
 8001bfc:	6224      	str	r4, [r4, #32]
 8001bfe:	6263      	str	r3, [r4, #36]	; 0x24
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <std+0x54>)
 8001c02:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <std+0x58>)
 8001c06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <std+0x5c>)
 8001c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <std+0x60>)
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	d005      	beq.n	8001c1e <std+0x46>
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <std+0x64>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	d002      	beq.n	8001c1e <std+0x46>
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <std+0x68>)
 8001c1a:	429c      	cmp	r4, r3
 8001c1c:	d103      	bne.n	8001c26 <std+0x4e>
 8001c1e:	0020      	movs	r0, r4
 8001c20:	3058      	adds	r0, #88	; 0x58
 8001c22:	f000 f979 	bl	8001f18 <__retarget_lock_init_recursive>
 8001c26:	bd10      	pop	{r4, pc}
 8001c28:	08001d81 	.word	0x08001d81
 8001c2c:	08001da9 	.word	0x08001da9
 8001c30:	08001de1 	.word	0x08001de1
 8001c34:	08001e0d 	.word	0x08001e0d
 8001c38:	20000120 	.word	0x20000120
 8001c3c:	20000188 	.word	0x20000188
 8001c40:	200001f0 	.word	0x200001f0

08001c44 <stdio_exit_handler>:
 8001c44:	b510      	push	{r4, lr}
 8001c46:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <stdio_exit_handler+0x10>)
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <stdio_exit_handler+0x14>)
 8001c4a:	4804      	ldr	r0, [pc, #16]	; (8001c5c <stdio_exit_handler+0x18>)
 8001c4c:	f000 f86c 	bl	8001d28 <_fwalk_sglue>
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	080027b9 	.word	0x080027b9
 8001c5c:	20000018 	.word	0x20000018

08001c60 <cleanup_stdio>:
 8001c60:	6841      	ldr	r1, [r0, #4]
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <cleanup_stdio+0x30>)
 8001c64:	b510      	push	{r4, lr}
 8001c66:	0004      	movs	r4, r0
 8001c68:	4299      	cmp	r1, r3
 8001c6a:	d001      	beq.n	8001c70 <cleanup_stdio+0x10>
 8001c6c:	f000 fda4 	bl	80027b8 <_fflush_r>
 8001c70:	68a1      	ldr	r1, [r4, #8]
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <cleanup_stdio+0x34>)
 8001c74:	4299      	cmp	r1, r3
 8001c76:	d002      	beq.n	8001c7e <cleanup_stdio+0x1e>
 8001c78:	0020      	movs	r0, r4
 8001c7a:	f000 fd9d 	bl	80027b8 <_fflush_r>
 8001c7e:	68e1      	ldr	r1, [r4, #12]
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <cleanup_stdio+0x38>)
 8001c82:	4299      	cmp	r1, r3
 8001c84:	d002      	beq.n	8001c8c <cleanup_stdio+0x2c>
 8001c86:	0020      	movs	r0, r4
 8001c88:	f000 fd96 	bl	80027b8 <_fflush_r>
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	20000120 	.word	0x20000120
 8001c94:	20000188 	.word	0x20000188
 8001c98:	200001f0 	.word	0x200001f0

08001c9c <global_stdio_init.part.0>:
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <global_stdio_init.part.0+0x28>)
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <global_stdio_init.part.0+0x2c>)
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	4809      	ldr	r0, [pc, #36]	; (8001ccc <global_stdio_init.part.0+0x30>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f7ff ff95 	bl	8001bd8 <std>
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2109      	movs	r1, #9
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <global_stdio_init.part.0+0x34>)
 8001cb4:	f7ff ff90 	bl	8001bd8 <std>
 8001cb8:	2202      	movs	r2, #2
 8001cba:	2112      	movs	r1, #18
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <global_stdio_init.part.0+0x38>)
 8001cbe:	f7ff ff8b 	bl	8001bd8 <std>
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	20000258 	.word	0x20000258
 8001cc8:	08001c45 	.word	0x08001c45
 8001ccc:	20000120 	.word	0x20000120
 8001cd0:	20000188 	.word	0x20000188
 8001cd4:	200001f0 	.word	0x200001f0

08001cd8 <__sfp_lock_acquire>:
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <__sfp_lock_acquire+0xc>)
 8001cdc:	f000 f91d 	bl	8001f1a <__retarget_lock_acquire_recursive>
 8001ce0:	bd10      	pop	{r4, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000261 	.word	0x20000261

08001ce8 <__sfp_lock_release>:
 8001ce8:	b510      	push	{r4, lr}
 8001cea:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <__sfp_lock_release+0xc>)
 8001cec:	f000 f916 	bl	8001f1c <__retarget_lock_release_recursive>
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	20000261 	.word	0x20000261

08001cf8 <__sinit>:
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	0004      	movs	r4, r0
 8001cfc:	f7ff ffec 	bl	8001cd8 <__sfp_lock_acquire>
 8001d00:	6a23      	ldr	r3, [r4, #32]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <__sinit+0x14>
 8001d06:	f7ff ffef 	bl	8001ce8 <__sfp_lock_release>
 8001d0a:	bd10      	pop	{r4, pc}
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__sinit+0x28>)
 8001d0e:	6223      	str	r3, [r4, #32]
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__sinit+0x2c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f6      	bne.n	8001d06 <__sinit+0xe>
 8001d18:	f7ff ffc0 	bl	8001c9c <global_stdio_init.part.0>
 8001d1c:	e7f3      	b.n	8001d06 <__sinit+0xe>
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	08001c61 	.word	0x08001c61
 8001d24:	20000258 	.word	0x20000258

08001d28 <_fwalk_sglue>:
 8001d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d2a:	0014      	movs	r4, r2
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	9000      	str	r0, [sp, #0]
 8001d30:	9101      	str	r1, [sp, #4]
 8001d32:	68a5      	ldr	r5, [r4, #8]
 8001d34:	6867      	ldr	r7, [r4, #4]
 8001d36:	3f01      	subs	r7, #1
 8001d38:	d504      	bpl.n	8001d44 <_fwalk_sglue+0x1c>
 8001d3a:	6824      	ldr	r4, [r4, #0]
 8001d3c:	2c00      	cmp	r4, #0
 8001d3e:	d1f8      	bne.n	8001d32 <_fwalk_sglue+0xa>
 8001d40:	0030      	movs	r0, r6
 8001d42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001d44:	89ab      	ldrh	r3, [r5, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d908      	bls.n	8001d5c <_fwalk_sglue+0x34>
 8001d4a:	220e      	movs	r2, #14
 8001d4c:	5eab      	ldrsh	r3, [r5, r2]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	d004      	beq.n	8001d5c <_fwalk_sglue+0x34>
 8001d52:	0029      	movs	r1, r5
 8001d54:	9800      	ldr	r0, [sp, #0]
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	4798      	blx	r3
 8001d5a:	4306      	orrs	r6, r0
 8001d5c:	3568      	adds	r5, #104	; 0x68
 8001d5e:	e7ea      	b.n	8001d36 <_fwalk_sglue+0xe>

08001d60 <iprintf>:
 8001d60:	b40f      	push	{r0, r1, r2, r3}
 8001d62:	b507      	push	{r0, r1, r2, lr}
 8001d64:	4905      	ldr	r1, [pc, #20]	; (8001d7c <iprintf+0x1c>)
 8001d66:	ab04      	add	r3, sp, #16
 8001d68:	6808      	ldr	r0, [r1, #0]
 8001d6a:	cb04      	ldmia	r3!, {r2}
 8001d6c:	6881      	ldr	r1, [r0, #8]
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	f000 f9fc 	bl	800216c <_vfiprintf_r>
 8001d74:	b003      	add	sp, #12
 8001d76:	bc08      	pop	{r3}
 8001d78:	b004      	add	sp, #16
 8001d7a:	4718      	bx	r3
 8001d7c:	20000064 	.word	0x20000064

08001d80 <__sread>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	000c      	movs	r4, r1
 8001d84:	250e      	movs	r5, #14
 8001d86:	5f49      	ldrsh	r1, [r1, r5]
 8001d88:	f000 f874 	bl	8001e74 <_read_r>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	db03      	blt.n	8001d98 <__sread+0x18>
 8001d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d92:	181b      	adds	r3, r3, r0
 8001d94:	6563      	str	r3, [r4, #84]	; 0x54
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
 8001d98:	89a3      	ldrh	r3, [r4, #12]
 8001d9a:	4a02      	ldr	r2, [pc, #8]	; (8001da4 <__sread+0x24>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	81a3      	strh	r3, [r4, #12]
 8001da0:	e7f9      	b.n	8001d96 <__sread+0x16>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	ffffefff 	.word	0xffffefff

08001da8 <__swrite>:
 8001da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001daa:	001f      	movs	r7, r3
 8001dac:	898b      	ldrh	r3, [r1, #12]
 8001dae:	0005      	movs	r5, r0
 8001db0:	000c      	movs	r4, r1
 8001db2:	0016      	movs	r6, r2
 8001db4:	05db      	lsls	r3, r3, #23
 8001db6:	d505      	bpl.n	8001dc4 <__swrite+0x1c>
 8001db8:	230e      	movs	r3, #14
 8001dba:	5ec9      	ldrsh	r1, [r1, r3]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f000 f844 	bl	8001e4c <_lseek_r>
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <__swrite+0x34>)
 8001dc8:	0028      	movs	r0, r5
 8001dca:	4013      	ands	r3, r2
 8001dcc:	81a3      	strh	r3, [r4, #12]
 8001dce:	0032      	movs	r2, r6
 8001dd0:	230e      	movs	r3, #14
 8001dd2:	5ee1      	ldrsh	r1, [r4, r3]
 8001dd4:	003b      	movs	r3, r7
 8001dd6:	f000 f861 	bl	8001e9c <_write_r>
 8001dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ddc:	ffffefff 	.word	0xffffefff

08001de0 <__sseek>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	000c      	movs	r4, r1
 8001de4:	250e      	movs	r5, #14
 8001de6:	5f49      	ldrsh	r1, [r1, r5]
 8001de8:	f000 f830 	bl	8001e4c <_lseek_r>
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	1c42      	adds	r2, r0, #1
 8001df0:	d103      	bne.n	8001dfa <__sseek+0x1a>
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <__sseek+0x28>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	81a3      	strh	r3, [r4, #12]
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0152      	lsls	r2, r2, #5
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	81a3      	strh	r3, [r4, #12]
 8001e02:	6560      	str	r0, [r4, #84]	; 0x54
 8001e04:	e7f8      	b.n	8001df8 <__sseek+0x18>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	ffffefff 	.word	0xffffefff

08001e0c <__sclose>:
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	230e      	movs	r3, #14
 8001e10:	5ec9      	ldrsh	r1, [r1, r3]
 8001e12:	f000 f809 	bl	8001e28 <_close_r>
 8001e16:	bd10      	pop	{r4, pc}

08001e18 <memset>:
 8001e18:	0003      	movs	r3, r0
 8001e1a:	1882      	adds	r2, r0, r2
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d100      	bne.n	8001e22 <memset+0xa>
 8001e20:	4770      	bx	lr
 8001e22:	7019      	strb	r1, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	e7f9      	b.n	8001e1c <memset+0x4>

08001e28 <_close_r>:
 8001e28:	2300      	movs	r3, #0
 8001e2a:	b570      	push	{r4, r5, r6, lr}
 8001e2c:	4d06      	ldr	r5, [pc, #24]	; (8001e48 <_close_r+0x20>)
 8001e2e:	0004      	movs	r4, r0
 8001e30:	0008      	movs	r0, r1
 8001e32:	602b      	str	r3, [r5, #0]
 8001e34:	f7fe fb7a 	bl	800052c <_close>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d103      	bne.n	8001e44 <_close_r+0x1c>
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d000      	beq.n	8001e44 <_close_r+0x1c>
 8001e42:	6023      	str	r3, [r4, #0]
 8001e44:	bd70      	pop	{r4, r5, r6, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	2000025c 	.word	0x2000025c

08001e4c <_lseek_r>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	0004      	movs	r4, r0
 8001e50:	0008      	movs	r0, r1
 8001e52:	0011      	movs	r1, r2
 8001e54:	001a      	movs	r2, r3
 8001e56:	2300      	movs	r3, #0
 8001e58:	4d05      	ldr	r5, [pc, #20]	; (8001e70 <_lseek_r+0x24>)
 8001e5a:	602b      	str	r3, [r5, #0]
 8001e5c:	f7fe fb87 	bl	800056e <_lseek>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	d103      	bne.n	8001e6c <_lseek_r+0x20>
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d000      	beq.n	8001e6c <_lseek_r+0x20>
 8001e6a:	6023      	str	r3, [r4, #0]
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	2000025c 	.word	0x2000025c

08001e74 <_read_r>:
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	0004      	movs	r4, r0
 8001e78:	0008      	movs	r0, r1
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2300      	movs	r3, #0
 8001e80:	4d05      	ldr	r5, [pc, #20]	; (8001e98 <_read_r+0x24>)
 8001e82:	602b      	str	r3, [r5, #0]
 8001e84:	f7fe fb19 	bl	80004ba <_read>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d103      	bne.n	8001e94 <_read_r+0x20>
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d000      	beq.n	8001e94 <_read_r+0x20>
 8001e92:	6023      	str	r3, [r4, #0]
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	2000025c 	.word	0x2000025c

08001e9c <_write_r>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	0004      	movs	r4, r0
 8001ea0:	0008      	movs	r0, r1
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	4d05      	ldr	r5, [pc, #20]	; (8001ec0 <_write_r+0x24>)
 8001eaa:	602b      	str	r3, [r5, #0]
 8001eac:	f7fe fb22 	bl	80004f4 <_write>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d103      	bne.n	8001ebc <_write_r+0x20>
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d000      	beq.n	8001ebc <_write_r+0x20>
 8001eba:	6023      	str	r3, [r4, #0]
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	2000025c 	.word	0x2000025c

08001ec4 <__errno>:
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <__errno+0x8>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	4770      	bx	lr
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	20000064 	.word	0x20000064

08001ed0 <__libc_init_array>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	4c0c      	ldr	r4, [pc, #48]	; (8001f08 <__libc_init_array+0x38>)
 8001ed6:	4d0d      	ldr	r5, [pc, #52]	; (8001f0c <__libc_init_array+0x3c>)
 8001ed8:	1b64      	subs	r4, r4, r5
 8001eda:	10a4      	asrs	r4, r4, #2
 8001edc:	42a6      	cmp	r6, r4
 8001ede:	d109      	bne.n	8001ef4 <__libc_init_array+0x24>
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	f000 fde3 	bl	8002aac <_init>
 8001ee6:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <__libc_init_array+0x40>)
 8001ee8:	4d0a      	ldr	r5, [pc, #40]	; (8001f14 <__libc_init_array+0x44>)
 8001eea:	1b64      	subs	r4, r4, r5
 8001eec:	10a4      	asrs	r4, r4, #2
 8001eee:	42a6      	cmp	r6, r4
 8001ef0:	d105      	bne.n	8001efe <__libc_init_array+0x2e>
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	00b3      	lsls	r3, r6, #2
 8001ef6:	58eb      	ldr	r3, [r5, r3]
 8001ef8:	4798      	blx	r3
 8001efa:	3601      	adds	r6, #1
 8001efc:	e7ee      	b.n	8001edc <__libc_init_array+0xc>
 8001efe:	00b3      	lsls	r3, r6, #2
 8001f00:	58eb      	ldr	r3, [r5, r3]
 8001f02:	4798      	blx	r3
 8001f04:	3601      	adds	r6, #1
 8001f06:	e7f2      	b.n	8001eee <__libc_init_array+0x1e>
 8001f08:	08002b90 	.word	0x08002b90
 8001f0c:	08002b90 	.word	0x08002b90
 8001f10:	08002b94 	.word	0x08002b94
 8001f14:	08002b90 	.word	0x08002b90

08001f18 <__retarget_lock_init_recursive>:
 8001f18:	4770      	bx	lr

08001f1a <__retarget_lock_acquire_recursive>:
 8001f1a:	4770      	bx	lr

08001f1c <__retarget_lock_release_recursive>:
 8001f1c:	4770      	bx	lr
	...

08001f20 <_free_r>:
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	0005      	movs	r5, r0
 8001f24:	2900      	cmp	r1, #0
 8001f26:	d010      	beq.n	8001f4a <_free_r+0x2a>
 8001f28:	1f0c      	subs	r4, r1, #4
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da00      	bge.n	8001f32 <_free_r+0x12>
 8001f30:	18e4      	adds	r4, r4, r3
 8001f32:	0028      	movs	r0, r5
 8001f34:	f000 f8e2 	bl	80020fc <__malloc_lock>
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <_free_r+0x90>)
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <_free_r+0x2c>
 8001f40:	6063      	str	r3, [r4, #4]
 8001f42:	6014      	str	r4, [r2, #0]
 8001f44:	0028      	movs	r0, r5
 8001f46:	f000 f8e1 	bl	800210c <__malloc_unlock>
 8001f4a:	bd70      	pop	{r4, r5, r6, pc}
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	d908      	bls.n	8001f62 <_free_r+0x42>
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	1821      	adds	r1, r4, r0
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d1f3      	bne.n	8001f40 <_free_r+0x20>
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	1809      	adds	r1, r1, r0
 8001f5e:	6021      	str	r1, [r4, #0]
 8001f60:	e7ee      	b.n	8001f40 <_free_r+0x20>
 8001f62:	001a      	movs	r2, r3
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <_free_r+0x4e>
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	d9f9      	bls.n	8001f62 <_free_r+0x42>
 8001f6e:	6811      	ldr	r1, [r2, #0]
 8001f70:	1850      	adds	r0, r2, r1
 8001f72:	42a0      	cmp	r0, r4
 8001f74:	d10b      	bne.n	8001f8e <_free_r+0x6e>
 8001f76:	6820      	ldr	r0, [r4, #0]
 8001f78:	1809      	adds	r1, r1, r0
 8001f7a:	1850      	adds	r0, r2, r1
 8001f7c:	6011      	str	r1, [r2, #0]
 8001f7e:	4283      	cmp	r3, r0
 8001f80:	d1e0      	bne.n	8001f44 <_free_r+0x24>
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	1841      	adds	r1, r0, r1
 8001f88:	6011      	str	r1, [r2, #0]
 8001f8a:	6053      	str	r3, [r2, #4]
 8001f8c:	e7da      	b.n	8001f44 <_free_r+0x24>
 8001f8e:	42a0      	cmp	r0, r4
 8001f90:	d902      	bls.n	8001f98 <_free_r+0x78>
 8001f92:	230c      	movs	r3, #12
 8001f94:	602b      	str	r3, [r5, #0]
 8001f96:	e7d5      	b.n	8001f44 <_free_r+0x24>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	1821      	adds	r1, r4, r0
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d103      	bne.n	8001fa8 <_free_r+0x88>
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	1809      	adds	r1, r1, r0
 8001fa6:	6021      	str	r1, [r4, #0]
 8001fa8:	6063      	str	r3, [r4, #4]
 8001faa:	6054      	str	r4, [r2, #4]
 8001fac:	e7ca      	b.n	8001f44 <_free_r+0x24>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000264 	.word	0x20000264

08001fb4 <sbrk_aligned>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	4e0f      	ldr	r6, [pc, #60]	; (8001ff4 <sbrk_aligned+0x40>)
 8001fb8:	000d      	movs	r5, r1
 8001fba:	6831      	ldr	r1, [r6, #0]
 8001fbc:	0004      	movs	r4, r0
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	d102      	bne.n	8001fc8 <sbrk_aligned+0x14>
 8001fc2:	f000 fccb 	bl	800295c <_sbrk_r>
 8001fc6:	6030      	str	r0, [r6, #0]
 8001fc8:	0029      	movs	r1, r5
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f000 fcc6 	bl	800295c <_sbrk_r>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d00a      	beq.n	8001fea <sbrk_aligned+0x36>
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	1cc5      	adds	r5, r0, #3
 8001fd8:	439d      	bics	r5, r3
 8001fda:	42a8      	cmp	r0, r5
 8001fdc:	d007      	beq.n	8001fee <sbrk_aligned+0x3a>
 8001fde:	1a29      	subs	r1, r5, r0
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	f000 fcbb 	bl	800295c <_sbrk_r>
 8001fe6:	3001      	adds	r0, #1
 8001fe8:	d101      	bne.n	8001fee <sbrk_aligned+0x3a>
 8001fea:	2501      	movs	r5, #1
 8001fec:	426d      	negs	r5, r5
 8001fee:	0028      	movs	r0, r5
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	20000268 	.word	0x20000268

08001ff8 <_malloc_r>:
 8001ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	1ccb      	adds	r3, r1, #3
 8001ffe:	4393      	bics	r3, r2
 8002000:	3308      	adds	r3, #8
 8002002:	0006      	movs	r6, r0
 8002004:	001f      	movs	r7, r3
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d238      	bcs.n	800207c <_malloc_r+0x84>
 800200a:	270c      	movs	r7, #12
 800200c:	42b9      	cmp	r1, r7
 800200e:	d837      	bhi.n	8002080 <_malloc_r+0x88>
 8002010:	0030      	movs	r0, r6
 8002012:	f000 f873 	bl	80020fc <__malloc_lock>
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <_malloc_r+0x100>)
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	001c      	movs	r4, r3
 800201e:	2c00      	cmp	r4, #0
 8002020:	d133      	bne.n	800208a <_malloc_r+0x92>
 8002022:	0039      	movs	r1, r7
 8002024:	0030      	movs	r0, r6
 8002026:	f7ff ffc5 	bl	8001fb4 <sbrk_aligned>
 800202a:	0004      	movs	r4, r0
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d15e      	bne.n	80020ee <_malloc_r+0xf6>
 8002030:	9b00      	ldr	r3, [sp, #0]
 8002032:	681c      	ldr	r4, [r3, #0]
 8002034:	0025      	movs	r5, r4
 8002036:	2d00      	cmp	r5, #0
 8002038:	d14e      	bne.n	80020d8 <_malloc_r+0xe0>
 800203a:	2c00      	cmp	r4, #0
 800203c:	d051      	beq.n	80020e2 <_malloc_r+0xea>
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	0029      	movs	r1, r5
 8002042:	18e3      	adds	r3, r4, r3
 8002044:	0030      	movs	r0, r6
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	f000 fc88 	bl	800295c <_sbrk_r>
 800204c:	9b01      	ldr	r3, [sp, #4]
 800204e:	4283      	cmp	r3, r0
 8002050:	d147      	bne.n	80020e2 <_malloc_r+0xea>
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	0030      	movs	r0, r6
 8002056:	1aff      	subs	r7, r7, r3
 8002058:	0039      	movs	r1, r7
 800205a:	f7ff ffab 	bl	8001fb4 <sbrk_aligned>
 800205e:	3001      	adds	r0, #1
 8002060:	d03f      	beq.n	80020e2 <_malloc_r+0xea>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	19db      	adds	r3, r3, r7
 8002066:	6023      	str	r3, [r4, #0]
 8002068:	9b00      	ldr	r3, [sp, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d040      	beq.n	80020f2 <_malloc_r+0xfa>
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	42a2      	cmp	r2, r4
 8002074:	d133      	bne.n	80020de <_malloc_r+0xe6>
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	e014      	b.n	80020a6 <_malloc_r+0xae>
 800207c:	2b00      	cmp	r3, #0
 800207e:	dac5      	bge.n	800200c <_malloc_r+0x14>
 8002080:	230c      	movs	r3, #12
 8002082:	2500      	movs	r5, #0
 8002084:	6033      	str	r3, [r6, #0]
 8002086:	0028      	movs	r0, r5
 8002088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800208a:	6821      	ldr	r1, [r4, #0]
 800208c:	1bc9      	subs	r1, r1, r7
 800208e:	d420      	bmi.n	80020d2 <_malloc_r+0xda>
 8002090:	290b      	cmp	r1, #11
 8002092:	d918      	bls.n	80020c6 <_malloc_r+0xce>
 8002094:	19e2      	adds	r2, r4, r7
 8002096:	6027      	str	r7, [r4, #0]
 8002098:	42a3      	cmp	r3, r4
 800209a:	d112      	bne.n	80020c2 <_malloc_r+0xca>
 800209c:	9b00      	ldr	r3, [sp, #0]
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	6011      	str	r1, [r2, #0]
 80020a4:	6053      	str	r3, [r2, #4]
 80020a6:	0030      	movs	r0, r6
 80020a8:	0025      	movs	r5, r4
 80020aa:	f000 f82f 	bl	800210c <__malloc_unlock>
 80020ae:	2207      	movs	r2, #7
 80020b0:	350b      	adds	r5, #11
 80020b2:	1d23      	adds	r3, r4, #4
 80020b4:	4395      	bics	r5, r2
 80020b6:	1aea      	subs	r2, r5, r3
 80020b8:	429d      	cmp	r5, r3
 80020ba:	d0e4      	beq.n	8002086 <_malloc_r+0x8e>
 80020bc:	1b5b      	subs	r3, r3, r5
 80020be:	50a3      	str	r3, [r4, r2]
 80020c0:	e7e1      	b.n	8002086 <_malloc_r+0x8e>
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	e7ec      	b.n	80020a0 <_malloc_r+0xa8>
 80020c6:	6862      	ldr	r2, [r4, #4]
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	d1d5      	bne.n	8002078 <_malloc_r+0x80>
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e7e9      	b.n	80020a6 <_malloc_r+0xae>
 80020d2:	0023      	movs	r3, r4
 80020d4:	6864      	ldr	r4, [r4, #4]
 80020d6:	e7a2      	b.n	800201e <_malloc_r+0x26>
 80020d8:	002c      	movs	r4, r5
 80020da:	686d      	ldr	r5, [r5, #4]
 80020dc:	e7ab      	b.n	8002036 <_malloc_r+0x3e>
 80020de:	0013      	movs	r3, r2
 80020e0:	e7c4      	b.n	800206c <_malloc_r+0x74>
 80020e2:	230c      	movs	r3, #12
 80020e4:	0030      	movs	r0, r6
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	f000 f810 	bl	800210c <__malloc_unlock>
 80020ec:	e7cb      	b.n	8002086 <_malloc_r+0x8e>
 80020ee:	6027      	str	r7, [r4, #0]
 80020f0:	e7d9      	b.n	80020a6 <_malloc_r+0xae>
 80020f2:	605b      	str	r3, [r3, #4]
 80020f4:	deff      	udf	#255	; 0xff
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000264 	.word	0x20000264

080020fc <__malloc_lock>:
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4802      	ldr	r0, [pc, #8]	; (8002108 <__malloc_lock+0xc>)
 8002100:	f7ff ff0b 	bl	8001f1a <__retarget_lock_acquire_recursive>
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	20000260 	.word	0x20000260

0800210c <__malloc_unlock>:
 800210c:	b510      	push	{r4, lr}
 800210e:	4802      	ldr	r0, [pc, #8]	; (8002118 <__malloc_unlock+0xc>)
 8002110:	f7ff ff04 	bl	8001f1c <__retarget_lock_release_recursive>
 8002114:	bd10      	pop	{r4, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	20000260 	.word	0x20000260

0800211c <__sfputc_r>:
 800211c:	6893      	ldr	r3, [r2, #8]
 800211e:	b510      	push	{r4, lr}
 8002120:	3b01      	subs	r3, #1
 8002122:	6093      	str	r3, [r2, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da04      	bge.n	8002132 <__sfputc_r+0x16>
 8002128:	6994      	ldr	r4, [r2, #24]
 800212a:	42a3      	cmp	r3, r4
 800212c:	db07      	blt.n	800213e <__sfputc_r+0x22>
 800212e:	290a      	cmp	r1, #10
 8002130:	d005      	beq.n	800213e <__sfputc_r+0x22>
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	1c58      	adds	r0, r3, #1
 8002136:	6010      	str	r0, [r2, #0]
 8002138:	7019      	strb	r1, [r3, #0]
 800213a:	0008      	movs	r0, r1
 800213c:	bd10      	pop	{r4, pc}
 800213e:	f000 fb66 	bl	800280e <__swbuf_r>
 8002142:	0001      	movs	r1, r0
 8002144:	e7f9      	b.n	800213a <__sfputc_r+0x1e>

08002146 <__sfputs_r>:
 8002146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002148:	0006      	movs	r6, r0
 800214a:	000f      	movs	r7, r1
 800214c:	0014      	movs	r4, r2
 800214e:	18d5      	adds	r5, r2, r3
 8002150:	42ac      	cmp	r4, r5
 8002152:	d101      	bne.n	8002158 <__sfputs_r+0x12>
 8002154:	2000      	movs	r0, #0
 8002156:	e007      	b.n	8002168 <__sfputs_r+0x22>
 8002158:	7821      	ldrb	r1, [r4, #0]
 800215a:	003a      	movs	r2, r7
 800215c:	0030      	movs	r0, r6
 800215e:	f7ff ffdd 	bl	800211c <__sfputc_r>
 8002162:	3401      	adds	r4, #1
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d1f3      	bne.n	8002150 <__sfputs_r+0xa>
 8002168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800216c <_vfiprintf_r>:
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b0a1      	sub	sp, #132	; 0x84
 8002170:	000f      	movs	r7, r1
 8002172:	0015      	movs	r5, r2
 8002174:	001e      	movs	r6, r3
 8002176:	9003      	str	r0, [sp, #12]
 8002178:	2800      	cmp	r0, #0
 800217a:	d004      	beq.n	8002186 <_vfiprintf_r+0x1a>
 800217c:	6a03      	ldr	r3, [r0, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <_vfiprintf_r+0x1a>
 8002182:	f7ff fdb9 	bl	8001cf8 <__sinit>
 8002186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002188:	07db      	lsls	r3, r3, #31
 800218a:	d405      	bmi.n	8002198 <_vfiprintf_r+0x2c>
 800218c:	89bb      	ldrh	r3, [r7, #12]
 800218e:	059b      	lsls	r3, r3, #22
 8002190:	d402      	bmi.n	8002198 <_vfiprintf_r+0x2c>
 8002192:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002194:	f7ff fec1 	bl	8001f1a <__retarget_lock_acquire_recursive>
 8002198:	89bb      	ldrh	r3, [r7, #12]
 800219a:	071b      	lsls	r3, r3, #28
 800219c:	d502      	bpl.n	80021a4 <_vfiprintf_r+0x38>
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d113      	bne.n	80021cc <_vfiprintf_r+0x60>
 80021a4:	0039      	movs	r1, r7
 80021a6:	9803      	ldr	r0, [sp, #12]
 80021a8:	f000 fb74 	bl	8002894 <__swsetup_r>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d00d      	beq.n	80021cc <_vfiprintf_r+0x60>
 80021b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b2:	07db      	lsls	r3, r3, #31
 80021b4:	d503      	bpl.n	80021be <_vfiprintf_r+0x52>
 80021b6:	2001      	movs	r0, #1
 80021b8:	4240      	negs	r0, r0
 80021ba:	b021      	add	sp, #132	; 0x84
 80021bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021be:	89bb      	ldrh	r3, [r7, #12]
 80021c0:	059b      	lsls	r3, r3, #22
 80021c2:	d4f8      	bmi.n	80021b6 <_vfiprintf_r+0x4a>
 80021c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021c6:	f7ff fea9 	bl	8001f1c <__retarget_lock_release_recursive>
 80021ca:	e7f4      	b.n	80021b6 <_vfiprintf_r+0x4a>
 80021cc:	2300      	movs	r3, #0
 80021ce:	ac08      	add	r4, sp, #32
 80021d0:	6163      	str	r3, [r4, #20]
 80021d2:	3320      	adds	r3, #32
 80021d4:	7663      	strb	r3, [r4, #25]
 80021d6:	3310      	adds	r3, #16
 80021d8:	76a3      	strb	r3, [r4, #26]
 80021da:	9607      	str	r6, [sp, #28]
 80021dc:	002e      	movs	r6, r5
 80021de:	7833      	ldrb	r3, [r6, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <_vfiprintf_r+0x7c>
 80021e4:	2b25      	cmp	r3, #37	; 0x25
 80021e6:	d148      	bne.n	800227a <_vfiprintf_r+0x10e>
 80021e8:	1b73      	subs	r3, r6, r5
 80021ea:	9305      	str	r3, [sp, #20]
 80021ec:	42ae      	cmp	r6, r5
 80021ee:	d00b      	beq.n	8002208 <_vfiprintf_r+0x9c>
 80021f0:	002a      	movs	r2, r5
 80021f2:	0039      	movs	r1, r7
 80021f4:	9803      	ldr	r0, [sp, #12]
 80021f6:	f7ff ffa6 	bl	8002146 <__sfputs_r>
 80021fa:	3001      	adds	r0, #1
 80021fc:	d100      	bne.n	8002200 <_vfiprintf_r+0x94>
 80021fe:	e0af      	b.n	8002360 <_vfiprintf_r+0x1f4>
 8002200:	6963      	ldr	r3, [r4, #20]
 8002202:	9a05      	ldr	r2, [sp, #20]
 8002204:	189b      	adds	r3, r3, r2
 8002206:	6163      	str	r3, [r4, #20]
 8002208:	7833      	ldrb	r3, [r6, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d100      	bne.n	8002210 <_vfiprintf_r+0xa4>
 800220e:	e0a7      	b.n	8002360 <_vfiprintf_r+0x1f4>
 8002210:	2201      	movs	r2, #1
 8002212:	2300      	movs	r3, #0
 8002214:	4252      	negs	r2, r2
 8002216:	6062      	str	r2, [r4, #4]
 8002218:	a904      	add	r1, sp, #16
 800221a:	3254      	adds	r2, #84	; 0x54
 800221c:	1852      	adds	r2, r2, r1
 800221e:	1c75      	adds	r5, r6, #1
 8002220:	6023      	str	r3, [r4, #0]
 8002222:	60e3      	str	r3, [r4, #12]
 8002224:	60a3      	str	r3, [r4, #8]
 8002226:	7013      	strb	r3, [r2, #0]
 8002228:	65a3      	str	r3, [r4, #88]	; 0x58
 800222a:	4b59      	ldr	r3, [pc, #356]	; (8002390 <_vfiprintf_r+0x224>)
 800222c:	2205      	movs	r2, #5
 800222e:	0018      	movs	r0, r3
 8002230:	7829      	ldrb	r1, [r5, #0]
 8002232:	9305      	str	r3, [sp, #20]
 8002234:	f000 fba4 	bl	8002980 <memchr>
 8002238:	1c6e      	adds	r6, r5, #1
 800223a:	2800      	cmp	r0, #0
 800223c:	d11f      	bne.n	800227e <_vfiprintf_r+0x112>
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	06d3      	lsls	r3, r2, #27
 8002242:	d504      	bpl.n	800224e <_vfiprintf_r+0xe2>
 8002244:	2353      	movs	r3, #83	; 0x53
 8002246:	a904      	add	r1, sp, #16
 8002248:	185b      	adds	r3, r3, r1
 800224a:	2120      	movs	r1, #32
 800224c:	7019      	strb	r1, [r3, #0]
 800224e:	0713      	lsls	r3, r2, #28
 8002250:	d504      	bpl.n	800225c <_vfiprintf_r+0xf0>
 8002252:	2353      	movs	r3, #83	; 0x53
 8002254:	a904      	add	r1, sp, #16
 8002256:	185b      	adds	r3, r3, r1
 8002258:	212b      	movs	r1, #43	; 0x2b
 800225a:	7019      	strb	r1, [r3, #0]
 800225c:	782b      	ldrb	r3, [r5, #0]
 800225e:	2b2a      	cmp	r3, #42	; 0x2a
 8002260:	d016      	beq.n	8002290 <_vfiprintf_r+0x124>
 8002262:	002e      	movs	r6, r5
 8002264:	2100      	movs	r1, #0
 8002266:	200a      	movs	r0, #10
 8002268:	68e3      	ldr	r3, [r4, #12]
 800226a:	7832      	ldrb	r2, [r6, #0]
 800226c:	1c75      	adds	r5, r6, #1
 800226e:	3a30      	subs	r2, #48	; 0x30
 8002270:	2a09      	cmp	r2, #9
 8002272:	d94e      	bls.n	8002312 <_vfiprintf_r+0x1a6>
 8002274:	2900      	cmp	r1, #0
 8002276:	d111      	bne.n	800229c <_vfiprintf_r+0x130>
 8002278:	e017      	b.n	80022aa <_vfiprintf_r+0x13e>
 800227a:	3601      	adds	r6, #1
 800227c:	e7af      	b.n	80021de <_vfiprintf_r+0x72>
 800227e:	9b05      	ldr	r3, [sp, #20]
 8002280:	6822      	ldr	r2, [r4, #0]
 8002282:	1ac0      	subs	r0, r0, r3
 8002284:	2301      	movs	r3, #1
 8002286:	4083      	lsls	r3, r0
 8002288:	4313      	orrs	r3, r2
 800228a:	0035      	movs	r5, r6
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	e7cc      	b.n	800222a <_vfiprintf_r+0xbe>
 8002290:	9b07      	ldr	r3, [sp, #28]
 8002292:	1d19      	adds	r1, r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	9107      	str	r1, [sp, #28]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db01      	blt.n	80022a0 <_vfiprintf_r+0x134>
 800229c:	930b      	str	r3, [sp, #44]	; 0x2c
 800229e:	e004      	b.n	80022aa <_vfiprintf_r+0x13e>
 80022a0:	425b      	negs	r3, r3
 80022a2:	60e3      	str	r3, [r4, #12]
 80022a4:	2302      	movs	r3, #2
 80022a6:	4313      	orrs	r3, r2
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	7833      	ldrb	r3, [r6, #0]
 80022ac:	2b2e      	cmp	r3, #46	; 0x2e
 80022ae:	d10a      	bne.n	80022c6 <_vfiprintf_r+0x15a>
 80022b0:	7873      	ldrb	r3, [r6, #1]
 80022b2:	2b2a      	cmp	r3, #42	; 0x2a
 80022b4:	d135      	bne.n	8002322 <_vfiprintf_r+0x1b6>
 80022b6:	9b07      	ldr	r3, [sp, #28]
 80022b8:	3602      	adds	r6, #2
 80022ba:	1d1a      	adds	r2, r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	9207      	str	r2, [sp, #28]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db2b      	blt.n	800231c <_vfiprintf_r+0x1b0>
 80022c4:	9309      	str	r3, [sp, #36]	; 0x24
 80022c6:	4d33      	ldr	r5, [pc, #204]	; (8002394 <_vfiprintf_r+0x228>)
 80022c8:	2203      	movs	r2, #3
 80022ca:	0028      	movs	r0, r5
 80022cc:	7831      	ldrb	r1, [r6, #0]
 80022ce:	f000 fb57 	bl	8002980 <memchr>
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d006      	beq.n	80022e4 <_vfiprintf_r+0x178>
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	1b40      	subs	r0, r0, r5
 80022da:	4083      	lsls	r3, r0
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	3601      	adds	r6, #1
 80022e0:	4313      	orrs	r3, r2
 80022e2:	6023      	str	r3, [r4, #0]
 80022e4:	7831      	ldrb	r1, [r6, #0]
 80022e6:	2206      	movs	r2, #6
 80022e8:	482b      	ldr	r0, [pc, #172]	; (8002398 <_vfiprintf_r+0x22c>)
 80022ea:	1c75      	adds	r5, r6, #1
 80022ec:	7621      	strb	r1, [r4, #24]
 80022ee:	f000 fb47 	bl	8002980 <memchr>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d043      	beq.n	800237e <_vfiprintf_r+0x212>
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <_vfiprintf_r+0x230>)
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d125      	bne.n	8002348 <_vfiprintf_r+0x1dc>
 80022fc:	2207      	movs	r2, #7
 80022fe:	9b07      	ldr	r3, [sp, #28]
 8002300:	3307      	adds	r3, #7
 8002302:	4393      	bics	r3, r2
 8002304:	3308      	adds	r3, #8
 8002306:	9307      	str	r3, [sp, #28]
 8002308:	6963      	ldr	r3, [r4, #20]
 800230a:	9a04      	ldr	r2, [sp, #16]
 800230c:	189b      	adds	r3, r3, r2
 800230e:	6163      	str	r3, [r4, #20]
 8002310:	e764      	b.n	80021dc <_vfiprintf_r+0x70>
 8002312:	4343      	muls	r3, r0
 8002314:	002e      	movs	r6, r5
 8002316:	2101      	movs	r1, #1
 8002318:	189b      	adds	r3, r3, r2
 800231a:	e7a6      	b.n	800226a <_vfiprintf_r+0xfe>
 800231c:	2301      	movs	r3, #1
 800231e:	425b      	negs	r3, r3
 8002320:	e7d0      	b.n	80022c4 <_vfiprintf_r+0x158>
 8002322:	2300      	movs	r3, #0
 8002324:	200a      	movs	r0, #10
 8002326:	001a      	movs	r2, r3
 8002328:	3601      	adds	r6, #1
 800232a:	6063      	str	r3, [r4, #4]
 800232c:	7831      	ldrb	r1, [r6, #0]
 800232e:	1c75      	adds	r5, r6, #1
 8002330:	3930      	subs	r1, #48	; 0x30
 8002332:	2909      	cmp	r1, #9
 8002334:	d903      	bls.n	800233e <_vfiprintf_r+0x1d2>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0c5      	beq.n	80022c6 <_vfiprintf_r+0x15a>
 800233a:	9209      	str	r2, [sp, #36]	; 0x24
 800233c:	e7c3      	b.n	80022c6 <_vfiprintf_r+0x15a>
 800233e:	4342      	muls	r2, r0
 8002340:	002e      	movs	r6, r5
 8002342:	2301      	movs	r3, #1
 8002344:	1852      	adds	r2, r2, r1
 8002346:	e7f1      	b.n	800232c <_vfiprintf_r+0x1c0>
 8002348:	aa07      	add	r2, sp, #28
 800234a:	9200      	str	r2, [sp, #0]
 800234c:	0021      	movs	r1, r4
 800234e:	003a      	movs	r2, r7
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_vfiprintf_r+0x234>)
 8002352:	9803      	ldr	r0, [sp, #12]
 8002354:	e000      	b.n	8002358 <_vfiprintf_r+0x1ec>
 8002356:	bf00      	nop
 8002358:	9004      	str	r0, [sp, #16]
 800235a:	9b04      	ldr	r3, [sp, #16]
 800235c:	3301      	adds	r3, #1
 800235e:	d1d3      	bne.n	8002308 <_vfiprintf_r+0x19c>
 8002360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002362:	07db      	lsls	r3, r3, #31
 8002364:	d405      	bmi.n	8002372 <_vfiprintf_r+0x206>
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	059b      	lsls	r3, r3, #22
 800236a:	d402      	bmi.n	8002372 <_vfiprintf_r+0x206>
 800236c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800236e:	f7ff fdd5 	bl	8001f1c <__retarget_lock_release_recursive>
 8002372:	89bb      	ldrh	r3, [r7, #12]
 8002374:	065b      	lsls	r3, r3, #25
 8002376:	d500      	bpl.n	800237a <_vfiprintf_r+0x20e>
 8002378:	e71d      	b.n	80021b6 <_vfiprintf_r+0x4a>
 800237a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800237c:	e71d      	b.n	80021ba <_vfiprintf_r+0x4e>
 800237e:	aa07      	add	r2, sp, #28
 8002380:	9200      	str	r2, [sp, #0]
 8002382:	0021      	movs	r1, r4
 8002384:	003a      	movs	r2, r7
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <_vfiprintf_r+0x234>)
 8002388:	9803      	ldr	r0, [sp, #12]
 800238a:	f000 f87b 	bl	8002484 <_printf_i>
 800238e:	e7e3      	b.n	8002358 <_vfiprintf_r+0x1ec>
 8002390:	08002b5c 	.word	0x08002b5c
 8002394:	08002b62 	.word	0x08002b62
 8002398:	08002b66 	.word	0x08002b66
 800239c:	00000000 	.word	0x00000000
 80023a0:	08002147 	.word	0x08002147

080023a4 <_printf_common>:
 80023a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023a6:	0016      	movs	r6, r2
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	688a      	ldr	r2, [r1, #8]
 80023ac:	690b      	ldr	r3, [r1, #16]
 80023ae:	000c      	movs	r4, r1
 80023b0:	9000      	str	r0, [sp, #0]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	da00      	bge.n	80023b8 <_printf_common+0x14>
 80023b6:	0013      	movs	r3, r2
 80023b8:	0022      	movs	r2, r4
 80023ba:	6033      	str	r3, [r6, #0]
 80023bc:	3243      	adds	r2, #67	; 0x43
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	d001      	beq.n	80023c8 <_printf_common+0x24>
 80023c4:	3301      	adds	r3, #1
 80023c6:	6033      	str	r3, [r6, #0]
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	069b      	lsls	r3, r3, #26
 80023cc:	d502      	bpl.n	80023d4 <_printf_common+0x30>
 80023ce:	6833      	ldr	r3, [r6, #0]
 80023d0:	3302      	adds	r3, #2
 80023d2:	6033      	str	r3, [r6, #0]
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	2306      	movs	r3, #6
 80023d8:	0015      	movs	r5, r2
 80023da:	401d      	ands	r5, r3
 80023dc:	421a      	tst	r2, r3
 80023de:	d027      	beq.n	8002430 <_printf_common+0x8c>
 80023e0:	0023      	movs	r3, r4
 80023e2:	3343      	adds	r3, #67	; 0x43
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	1e5a      	subs	r2, r3, #1
 80023e8:	4193      	sbcs	r3, r2
 80023ea:	6822      	ldr	r2, [r4, #0]
 80023ec:	0692      	lsls	r2, r2, #26
 80023ee:	d430      	bmi.n	8002452 <_printf_common+0xae>
 80023f0:	0022      	movs	r2, r4
 80023f2:	9901      	ldr	r1, [sp, #4]
 80023f4:	9800      	ldr	r0, [sp, #0]
 80023f6:	9d08      	ldr	r5, [sp, #32]
 80023f8:	3243      	adds	r2, #67	; 0x43
 80023fa:	47a8      	blx	r5
 80023fc:	3001      	adds	r0, #1
 80023fe:	d025      	beq.n	800244c <_printf_common+0xa8>
 8002400:	2206      	movs	r2, #6
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	2500      	movs	r5, #0
 8002406:	4013      	ands	r3, r2
 8002408:	2b04      	cmp	r3, #4
 800240a:	d105      	bne.n	8002418 <_printf_common+0x74>
 800240c:	6833      	ldr	r3, [r6, #0]
 800240e:	68e5      	ldr	r5, [r4, #12]
 8002410:	1aed      	subs	r5, r5, r3
 8002412:	43eb      	mvns	r3, r5
 8002414:	17db      	asrs	r3, r3, #31
 8002416:	401d      	ands	r5, r3
 8002418:	68a3      	ldr	r3, [r4, #8]
 800241a:	6922      	ldr	r2, [r4, #16]
 800241c:	4293      	cmp	r3, r2
 800241e:	dd01      	ble.n	8002424 <_printf_common+0x80>
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	18ed      	adds	r5, r5, r3
 8002424:	2600      	movs	r6, #0
 8002426:	42b5      	cmp	r5, r6
 8002428:	d120      	bne.n	800246c <_printf_common+0xc8>
 800242a:	2000      	movs	r0, #0
 800242c:	e010      	b.n	8002450 <_printf_common+0xac>
 800242e:	3501      	adds	r5, #1
 8002430:	68e3      	ldr	r3, [r4, #12]
 8002432:	6832      	ldr	r2, [r6, #0]
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	42ab      	cmp	r3, r5
 8002438:	ddd2      	ble.n	80023e0 <_printf_common+0x3c>
 800243a:	0022      	movs	r2, r4
 800243c:	2301      	movs	r3, #1
 800243e:	9901      	ldr	r1, [sp, #4]
 8002440:	9800      	ldr	r0, [sp, #0]
 8002442:	9f08      	ldr	r7, [sp, #32]
 8002444:	3219      	adds	r2, #25
 8002446:	47b8      	blx	r7
 8002448:	3001      	adds	r0, #1
 800244a:	d1f0      	bne.n	800242e <_printf_common+0x8a>
 800244c:	2001      	movs	r0, #1
 800244e:	4240      	negs	r0, r0
 8002450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002452:	2030      	movs	r0, #48	; 0x30
 8002454:	18e1      	adds	r1, r4, r3
 8002456:	3143      	adds	r1, #67	; 0x43
 8002458:	7008      	strb	r0, [r1, #0]
 800245a:	0021      	movs	r1, r4
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	3145      	adds	r1, #69	; 0x45
 8002460:	7809      	ldrb	r1, [r1, #0]
 8002462:	18a2      	adds	r2, r4, r2
 8002464:	3243      	adds	r2, #67	; 0x43
 8002466:	3302      	adds	r3, #2
 8002468:	7011      	strb	r1, [r2, #0]
 800246a:	e7c1      	b.n	80023f0 <_printf_common+0x4c>
 800246c:	0022      	movs	r2, r4
 800246e:	2301      	movs	r3, #1
 8002470:	9901      	ldr	r1, [sp, #4]
 8002472:	9800      	ldr	r0, [sp, #0]
 8002474:	9f08      	ldr	r7, [sp, #32]
 8002476:	321a      	adds	r2, #26
 8002478:	47b8      	blx	r7
 800247a:	3001      	adds	r0, #1
 800247c:	d0e6      	beq.n	800244c <_printf_common+0xa8>
 800247e:	3601      	adds	r6, #1
 8002480:	e7d1      	b.n	8002426 <_printf_common+0x82>
	...

08002484 <_printf_i>:
 8002484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	9206      	str	r2, [sp, #24]
 800248a:	000a      	movs	r2, r1
 800248c:	3243      	adds	r2, #67	; 0x43
 800248e:	9307      	str	r3, [sp, #28]
 8002490:	9005      	str	r0, [sp, #20]
 8002492:	9204      	str	r2, [sp, #16]
 8002494:	7e0a      	ldrb	r2, [r1, #24]
 8002496:	000c      	movs	r4, r1
 8002498:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800249a:	2a78      	cmp	r2, #120	; 0x78
 800249c:	d809      	bhi.n	80024b2 <_printf_i+0x2e>
 800249e:	2a62      	cmp	r2, #98	; 0x62
 80024a0:	d80b      	bhi.n	80024ba <_printf_i+0x36>
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d100      	bne.n	80024a8 <_printf_i+0x24>
 80024a6:	e0be      	b.n	8002626 <_printf_i+0x1a2>
 80024a8:	497c      	ldr	r1, [pc, #496]	; (800269c <_printf_i+0x218>)
 80024aa:	9103      	str	r1, [sp, #12]
 80024ac:	2a58      	cmp	r2, #88	; 0x58
 80024ae:	d100      	bne.n	80024b2 <_printf_i+0x2e>
 80024b0:	e093      	b.n	80025da <_printf_i+0x156>
 80024b2:	0026      	movs	r6, r4
 80024b4:	3642      	adds	r6, #66	; 0x42
 80024b6:	7032      	strb	r2, [r6, #0]
 80024b8:	e022      	b.n	8002500 <_printf_i+0x7c>
 80024ba:	0010      	movs	r0, r2
 80024bc:	3863      	subs	r0, #99	; 0x63
 80024be:	2815      	cmp	r0, #21
 80024c0:	d8f7      	bhi.n	80024b2 <_printf_i+0x2e>
 80024c2:	f7fd fe21 	bl	8000108 <__gnu_thumb1_case_shi>
 80024c6:	0016      	.short	0x0016
 80024c8:	fff6001f 	.word	0xfff6001f
 80024cc:	fff6fff6 	.word	0xfff6fff6
 80024d0:	001ffff6 	.word	0x001ffff6
 80024d4:	fff6fff6 	.word	0xfff6fff6
 80024d8:	fff6fff6 	.word	0xfff6fff6
 80024dc:	003600a3 	.word	0x003600a3
 80024e0:	fff60083 	.word	0xfff60083
 80024e4:	00b4fff6 	.word	0x00b4fff6
 80024e8:	0036fff6 	.word	0x0036fff6
 80024ec:	fff6fff6 	.word	0xfff6fff6
 80024f0:	0087      	.short	0x0087
 80024f2:	0026      	movs	r6, r4
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	3642      	adds	r6, #66	; 0x42
 80024f8:	1d11      	adds	r1, r2, #4
 80024fa:	6019      	str	r1, [r3, #0]
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	7033      	strb	r3, [r6, #0]
 8002500:	2301      	movs	r3, #1
 8002502:	e0a2      	b.n	800264a <_printf_i+0x1c6>
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	1d02      	adds	r2, r0, #4
 800250a:	060d      	lsls	r5, r1, #24
 800250c:	d50b      	bpl.n	8002526 <_printf_i+0xa2>
 800250e:	6805      	ldr	r5, [r0, #0]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	2d00      	cmp	r5, #0
 8002514:	da03      	bge.n	800251e <_printf_i+0x9a>
 8002516:	232d      	movs	r3, #45	; 0x2d
 8002518:	9a04      	ldr	r2, [sp, #16]
 800251a:	426d      	negs	r5, r5
 800251c:	7013      	strb	r3, [r2, #0]
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <_printf_i+0x218>)
 8002520:	270a      	movs	r7, #10
 8002522:	9303      	str	r3, [sp, #12]
 8002524:	e01b      	b.n	800255e <_printf_i+0xda>
 8002526:	6805      	ldr	r5, [r0, #0]
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	0649      	lsls	r1, r1, #25
 800252c:	d5f1      	bpl.n	8002512 <_printf_i+0x8e>
 800252e:	b22d      	sxth	r5, r5
 8002530:	e7ef      	b.n	8002512 <_printf_i+0x8e>
 8002532:	680d      	ldr	r5, [r1, #0]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	1d08      	adds	r0, r1, #4
 8002538:	6018      	str	r0, [r3, #0]
 800253a:	062e      	lsls	r6, r5, #24
 800253c:	d501      	bpl.n	8002542 <_printf_i+0xbe>
 800253e:	680d      	ldr	r5, [r1, #0]
 8002540:	e003      	b.n	800254a <_printf_i+0xc6>
 8002542:	066d      	lsls	r5, r5, #25
 8002544:	d5fb      	bpl.n	800253e <_printf_i+0xba>
 8002546:	680d      	ldr	r5, [r1, #0]
 8002548:	b2ad      	uxth	r5, r5
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <_printf_i+0x218>)
 800254c:	2708      	movs	r7, #8
 800254e:	9303      	str	r3, [sp, #12]
 8002550:	2a6f      	cmp	r2, #111	; 0x6f
 8002552:	d000      	beq.n	8002556 <_printf_i+0xd2>
 8002554:	3702      	adds	r7, #2
 8002556:	0023      	movs	r3, r4
 8002558:	2200      	movs	r2, #0
 800255a:	3343      	adds	r3, #67	; 0x43
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	6863      	ldr	r3, [r4, #4]
 8002560:	60a3      	str	r3, [r4, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db03      	blt.n	800256e <_printf_i+0xea>
 8002566:	2104      	movs	r1, #4
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	438a      	bics	r2, r1
 800256c:	6022      	str	r2, [r4, #0]
 800256e:	2d00      	cmp	r5, #0
 8002570:	d102      	bne.n	8002578 <_printf_i+0xf4>
 8002572:	9e04      	ldr	r6, [sp, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <_printf_i+0x10e>
 8002578:	9e04      	ldr	r6, [sp, #16]
 800257a:	0028      	movs	r0, r5
 800257c:	0039      	movs	r1, r7
 800257e:	f7fd fe53 	bl	8000228 <__aeabi_uidivmod>
 8002582:	9b03      	ldr	r3, [sp, #12]
 8002584:	3e01      	subs	r6, #1
 8002586:	5c5b      	ldrb	r3, [r3, r1]
 8002588:	7033      	strb	r3, [r6, #0]
 800258a:	002b      	movs	r3, r5
 800258c:	0005      	movs	r5, r0
 800258e:	429f      	cmp	r7, r3
 8002590:	d9f3      	bls.n	800257a <_printf_i+0xf6>
 8002592:	2f08      	cmp	r7, #8
 8002594:	d109      	bne.n	80025aa <_printf_i+0x126>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	07db      	lsls	r3, r3, #31
 800259a:	d506      	bpl.n	80025aa <_printf_i+0x126>
 800259c:	6862      	ldr	r2, [r4, #4]
 800259e:	6923      	ldr	r3, [r4, #16]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dc02      	bgt.n	80025aa <_printf_i+0x126>
 80025a4:	2330      	movs	r3, #48	; 0x30
 80025a6:	3e01      	subs	r6, #1
 80025a8:	7033      	strb	r3, [r6, #0]
 80025aa:	9b04      	ldr	r3, [sp, #16]
 80025ac:	1b9b      	subs	r3, r3, r6
 80025ae:	6123      	str	r3, [r4, #16]
 80025b0:	9b07      	ldr	r3, [sp, #28]
 80025b2:	0021      	movs	r1, r4
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	9805      	ldr	r0, [sp, #20]
 80025b8:	9b06      	ldr	r3, [sp, #24]
 80025ba:	aa09      	add	r2, sp, #36	; 0x24
 80025bc:	f7ff fef2 	bl	80023a4 <_printf_common>
 80025c0:	3001      	adds	r0, #1
 80025c2:	d147      	bne.n	8002654 <_printf_i+0x1d0>
 80025c4:	2001      	movs	r0, #1
 80025c6:	4240      	negs	r0, r0
 80025c8:	b00b      	add	sp, #44	; 0x2c
 80025ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025cc:	2220      	movs	r2, #32
 80025ce:	6809      	ldr	r1, [r1, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	6022      	str	r2, [r4, #0]
 80025d4:	2278      	movs	r2, #120	; 0x78
 80025d6:	4932      	ldr	r1, [pc, #200]	; (80026a0 <_printf_i+0x21c>)
 80025d8:	9103      	str	r1, [sp, #12]
 80025da:	0021      	movs	r1, r4
 80025dc:	3145      	adds	r1, #69	; 0x45
 80025de:	700a      	strb	r2, [r1, #0]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	6822      	ldr	r2, [r4, #0]
 80025e4:	c920      	ldmia	r1!, {r5}
 80025e6:	0610      	lsls	r0, r2, #24
 80025e8:	d402      	bmi.n	80025f0 <_printf_i+0x16c>
 80025ea:	0650      	lsls	r0, r2, #25
 80025ec:	d500      	bpl.n	80025f0 <_printf_i+0x16c>
 80025ee:	b2ad      	uxth	r5, r5
 80025f0:	6019      	str	r1, [r3, #0]
 80025f2:	07d3      	lsls	r3, r2, #31
 80025f4:	d502      	bpl.n	80025fc <_printf_i+0x178>
 80025f6:	2320      	movs	r3, #32
 80025f8:	4313      	orrs	r3, r2
 80025fa:	6023      	str	r3, [r4, #0]
 80025fc:	2710      	movs	r7, #16
 80025fe:	2d00      	cmp	r5, #0
 8002600:	d1a9      	bne.n	8002556 <_printf_i+0xd2>
 8002602:	2220      	movs	r2, #32
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	4393      	bics	r3, r2
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	e7a4      	b.n	8002556 <_printf_i+0xd2>
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	680d      	ldr	r5, [r1, #0]
 8002610:	1d10      	adds	r0, r2, #4
 8002612:	6949      	ldr	r1, [r1, #20]
 8002614:	6018      	str	r0, [r3, #0]
 8002616:	6813      	ldr	r3, [r2, #0]
 8002618:	062e      	lsls	r6, r5, #24
 800261a:	d501      	bpl.n	8002620 <_printf_i+0x19c>
 800261c:	6019      	str	r1, [r3, #0]
 800261e:	e002      	b.n	8002626 <_printf_i+0x1a2>
 8002620:	066d      	lsls	r5, r5, #25
 8002622:	d5fb      	bpl.n	800261c <_printf_i+0x198>
 8002624:	8019      	strh	r1, [r3, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	9e04      	ldr	r6, [sp, #16]
 800262a:	6123      	str	r3, [r4, #16]
 800262c:	e7c0      	b.n	80025b0 <_printf_i+0x12c>
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	1d11      	adds	r1, r2, #4
 8002632:	6019      	str	r1, [r3, #0]
 8002634:	6816      	ldr	r6, [r2, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	0030      	movs	r0, r6
 800263a:	6862      	ldr	r2, [r4, #4]
 800263c:	f000 f9a0 	bl	8002980 <memchr>
 8002640:	2800      	cmp	r0, #0
 8002642:	d001      	beq.n	8002648 <_printf_i+0x1c4>
 8002644:	1b80      	subs	r0, r0, r6
 8002646:	6060      	str	r0, [r4, #4]
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	6123      	str	r3, [r4, #16]
 800264c:	2300      	movs	r3, #0
 800264e:	9a04      	ldr	r2, [sp, #16]
 8002650:	7013      	strb	r3, [r2, #0]
 8002652:	e7ad      	b.n	80025b0 <_printf_i+0x12c>
 8002654:	0032      	movs	r2, r6
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	9906      	ldr	r1, [sp, #24]
 800265a:	9805      	ldr	r0, [sp, #20]
 800265c:	9d07      	ldr	r5, [sp, #28]
 800265e:	47a8      	blx	r5
 8002660:	3001      	adds	r0, #1
 8002662:	d0af      	beq.n	80025c4 <_printf_i+0x140>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	079b      	lsls	r3, r3, #30
 8002668:	d415      	bmi.n	8002696 <_printf_i+0x212>
 800266a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800266c:	68e0      	ldr	r0, [r4, #12]
 800266e:	4298      	cmp	r0, r3
 8002670:	daaa      	bge.n	80025c8 <_printf_i+0x144>
 8002672:	0018      	movs	r0, r3
 8002674:	e7a8      	b.n	80025c8 <_printf_i+0x144>
 8002676:	0022      	movs	r2, r4
 8002678:	2301      	movs	r3, #1
 800267a:	9906      	ldr	r1, [sp, #24]
 800267c:	9805      	ldr	r0, [sp, #20]
 800267e:	9e07      	ldr	r6, [sp, #28]
 8002680:	3219      	adds	r2, #25
 8002682:	47b0      	blx	r6
 8002684:	3001      	adds	r0, #1
 8002686:	d09d      	beq.n	80025c4 <_printf_i+0x140>
 8002688:	3501      	adds	r5, #1
 800268a:	68e3      	ldr	r3, [r4, #12]
 800268c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	42ab      	cmp	r3, r5
 8002692:	dcf0      	bgt.n	8002676 <_printf_i+0x1f2>
 8002694:	e7e9      	b.n	800266a <_printf_i+0x1e6>
 8002696:	2500      	movs	r5, #0
 8002698:	e7f7      	b.n	800268a <_printf_i+0x206>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	08002b6d 	.word	0x08002b6d
 80026a0:	08002b7e 	.word	0x08002b7e

080026a4 <__sflush_r>:
 80026a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026a6:	898b      	ldrh	r3, [r1, #12]
 80026a8:	0005      	movs	r5, r0
 80026aa:	000c      	movs	r4, r1
 80026ac:	071a      	lsls	r2, r3, #28
 80026ae:	d45c      	bmi.n	800276a <__sflush_r+0xc6>
 80026b0:	684a      	ldr	r2, [r1, #4]
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	dc04      	bgt.n	80026c0 <__sflush_r+0x1c>
 80026b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	dc01      	bgt.n	80026c0 <__sflush_r+0x1c>
 80026bc:	2000      	movs	r0, #0
 80026be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026c2:	2f00      	cmp	r7, #0
 80026c4:	d0fa      	beq.n	80026bc <__sflush_r+0x18>
 80026c6:	2200      	movs	r2, #0
 80026c8:	2080      	movs	r0, #128	; 0x80
 80026ca:	682e      	ldr	r6, [r5, #0]
 80026cc:	602a      	str	r2, [r5, #0]
 80026ce:	001a      	movs	r2, r3
 80026d0:	0140      	lsls	r0, r0, #5
 80026d2:	6a21      	ldr	r1, [r4, #32]
 80026d4:	4002      	ands	r2, r0
 80026d6:	4203      	tst	r3, r0
 80026d8:	d034      	beq.n	8002744 <__sflush_r+0xa0>
 80026da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026dc:	89a3      	ldrh	r3, [r4, #12]
 80026de:	075b      	lsls	r3, r3, #29
 80026e0:	d506      	bpl.n	80026f0 <__sflush_r+0x4c>
 80026e2:	6863      	ldr	r3, [r4, #4]
 80026e4:	1ac0      	subs	r0, r0, r3
 80026e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <__sflush_r+0x4c>
 80026ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026ee:	1ac0      	subs	r0, r0, r3
 80026f0:	0002      	movs	r2, r0
 80026f2:	2300      	movs	r3, #0
 80026f4:	0028      	movs	r0, r5
 80026f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026f8:	6a21      	ldr	r1, [r4, #32]
 80026fa:	47b8      	blx	r7
 80026fc:	89a2      	ldrh	r2, [r4, #12]
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	d106      	bne.n	8002710 <__sflush_r+0x6c>
 8002702:	6829      	ldr	r1, [r5, #0]
 8002704:	291d      	cmp	r1, #29
 8002706:	d82c      	bhi.n	8002762 <__sflush_r+0xbe>
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <__sflush_r+0x110>)
 800270a:	410b      	asrs	r3, r1
 800270c:	07db      	lsls	r3, r3, #31
 800270e:	d428      	bmi.n	8002762 <__sflush_r+0xbe>
 8002710:	2300      	movs	r3, #0
 8002712:	6063      	str	r3, [r4, #4]
 8002714:	6923      	ldr	r3, [r4, #16]
 8002716:	6023      	str	r3, [r4, #0]
 8002718:	04d2      	lsls	r2, r2, #19
 800271a:	d505      	bpl.n	8002728 <__sflush_r+0x84>
 800271c:	1c43      	adds	r3, r0, #1
 800271e:	d102      	bne.n	8002726 <__sflush_r+0x82>
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d100      	bne.n	8002728 <__sflush_r+0x84>
 8002726:	6560      	str	r0, [r4, #84]	; 0x54
 8002728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800272a:	602e      	str	r6, [r5, #0]
 800272c:	2900      	cmp	r1, #0
 800272e:	d0c5      	beq.n	80026bc <__sflush_r+0x18>
 8002730:	0023      	movs	r3, r4
 8002732:	3344      	adds	r3, #68	; 0x44
 8002734:	4299      	cmp	r1, r3
 8002736:	d002      	beq.n	800273e <__sflush_r+0x9a>
 8002738:	0028      	movs	r0, r5
 800273a:	f7ff fbf1 	bl	8001f20 <_free_r>
 800273e:	2000      	movs	r0, #0
 8002740:	6360      	str	r0, [r4, #52]	; 0x34
 8002742:	e7bc      	b.n	80026be <__sflush_r+0x1a>
 8002744:	2301      	movs	r3, #1
 8002746:	0028      	movs	r0, r5
 8002748:	47b8      	blx	r7
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	d1c6      	bne.n	80026dc <__sflush_r+0x38>
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0c3      	beq.n	80026dc <__sflush_r+0x38>
 8002754:	2b1d      	cmp	r3, #29
 8002756:	d001      	beq.n	800275c <__sflush_r+0xb8>
 8002758:	2b16      	cmp	r3, #22
 800275a:	d101      	bne.n	8002760 <__sflush_r+0xbc>
 800275c:	602e      	str	r6, [r5, #0]
 800275e:	e7ad      	b.n	80026bc <__sflush_r+0x18>
 8002760:	89a2      	ldrh	r2, [r4, #12]
 8002762:	2340      	movs	r3, #64	; 0x40
 8002764:	4313      	orrs	r3, r2
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	e7a9      	b.n	80026be <__sflush_r+0x1a>
 800276a:	690e      	ldr	r6, [r1, #16]
 800276c:	2e00      	cmp	r6, #0
 800276e:	d0a5      	beq.n	80026bc <__sflush_r+0x18>
 8002770:	680f      	ldr	r7, [r1, #0]
 8002772:	600e      	str	r6, [r1, #0]
 8002774:	1bba      	subs	r2, r7, r6
 8002776:	9201      	str	r2, [sp, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	079b      	lsls	r3, r3, #30
 800277c:	d100      	bne.n	8002780 <__sflush_r+0xdc>
 800277e:	694a      	ldr	r2, [r1, #20]
 8002780:	60a2      	str	r2, [r4, #8]
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	dd99      	ble.n	80026bc <__sflush_r+0x18>
 8002788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800278a:	0032      	movs	r2, r6
 800278c:	001f      	movs	r7, r3
 800278e:	0028      	movs	r0, r5
 8002790:	9b01      	ldr	r3, [sp, #4]
 8002792:	6a21      	ldr	r1, [r4, #32]
 8002794:	47b8      	blx	r7
 8002796:	2800      	cmp	r0, #0
 8002798:	dc06      	bgt.n	80027a8 <__sflush_r+0x104>
 800279a:	2340      	movs	r3, #64	; 0x40
 800279c:	2001      	movs	r0, #1
 800279e:	89a2      	ldrh	r2, [r4, #12]
 80027a0:	4240      	negs	r0, r0
 80027a2:	4313      	orrs	r3, r2
 80027a4:	81a3      	strh	r3, [r4, #12]
 80027a6:	e78a      	b.n	80026be <__sflush_r+0x1a>
 80027a8:	9b01      	ldr	r3, [sp, #4]
 80027aa:	1836      	adds	r6, r6, r0
 80027ac:	1a1b      	subs	r3, r3, r0
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	e7e7      	b.n	8002782 <__sflush_r+0xde>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	dfbffffe 	.word	0xdfbffffe

080027b8 <_fflush_r>:
 80027b8:	690b      	ldr	r3, [r1, #16]
 80027ba:	b570      	push	{r4, r5, r6, lr}
 80027bc:	0005      	movs	r5, r0
 80027be:	000c      	movs	r4, r1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_fflush_r+0x12>
 80027c4:	2500      	movs	r5, #0
 80027c6:	0028      	movs	r0, r5
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d004      	beq.n	80027d8 <_fflush_r+0x20>
 80027ce:	6a03      	ldr	r3, [r0, #32]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <_fflush_r+0x20>
 80027d4:	f7ff fa90 	bl	8001cf8 <__sinit>
 80027d8:	220c      	movs	r2, #12
 80027da:	5ea3      	ldrsh	r3, [r4, r2]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f1      	beq.n	80027c4 <_fflush_r+0xc>
 80027e0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027e2:	07d2      	lsls	r2, r2, #31
 80027e4:	d404      	bmi.n	80027f0 <_fflush_r+0x38>
 80027e6:	059b      	lsls	r3, r3, #22
 80027e8:	d402      	bmi.n	80027f0 <_fflush_r+0x38>
 80027ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027ec:	f7ff fb95 	bl	8001f1a <__retarget_lock_acquire_recursive>
 80027f0:	0028      	movs	r0, r5
 80027f2:	0021      	movs	r1, r4
 80027f4:	f7ff ff56 	bl	80026a4 <__sflush_r>
 80027f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027fa:	0005      	movs	r5, r0
 80027fc:	07db      	lsls	r3, r3, #31
 80027fe:	d4e2      	bmi.n	80027c6 <_fflush_r+0xe>
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	059b      	lsls	r3, r3, #22
 8002804:	d4df      	bmi.n	80027c6 <_fflush_r+0xe>
 8002806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002808:	f7ff fb88 	bl	8001f1c <__retarget_lock_release_recursive>
 800280c:	e7db      	b.n	80027c6 <_fflush_r+0xe>

0800280e <__swbuf_r>:
 800280e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002810:	0006      	movs	r6, r0
 8002812:	000d      	movs	r5, r1
 8002814:	0014      	movs	r4, r2
 8002816:	2800      	cmp	r0, #0
 8002818:	d004      	beq.n	8002824 <__swbuf_r+0x16>
 800281a:	6a03      	ldr	r3, [r0, #32]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <__swbuf_r+0x16>
 8002820:	f7ff fa6a 	bl	8001cf8 <__sinit>
 8002824:	69a3      	ldr	r3, [r4, #24]
 8002826:	60a3      	str	r3, [r4, #8]
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	071b      	lsls	r3, r3, #28
 800282c:	d528      	bpl.n	8002880 <__swbuf_r+0x72>
 800282e:	6923      	ldr	r3, [r4, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d025      	beq.n	8002880 <__swbuf_r+0x72>
 8002834:	6923      	ldr	r3, [r4, #16]
 8002836:	6820      	ldr	r0, [r4, #0]
 8002838:	b2ef      	uxtb	r7, r5
 800283a:	1ac0      	subs	r0, r0, r3
 800283c:	6963      	ldr	r3, [r4, #20]
 800283e:	b2ed      	uxtb	r5, r5
 8002840:	4283      	cmp	r3, r0
 8002842:	dc05      	bgt.n	8002850 <__swbuf_r+0x42>
 8002844:	0021      	movs	r1, r4
 8002846:	0030      	movs	r0, r6
 8002848:	f7ff ffb6 	bl	80027b8 <_fflush_r>
 800284c:	2800      	cmp	r0, #0
 800284e:	d11d      	bne.n	800288c <__swbuf_r+0x7e>
 8002850:	68a3      	ldr	r3, [r4, #8]
 8002852:	3001      	adds	r0, #1
 8002854:	3b01      	subs	r3, #1
 8002856:	60a3      	str	r3, [r4, #8]
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	6022      	str	r2, [r4, #0]
 800285e:	701f      	strb	r7, [r3, #0]
 8002860:	6963      	ldr	r3, [r4, #20]
 8002862:	4283      	cmp	r3, r0
 8002864:	d004      	beq.n	8002870 <__swbuf_r+0x62>
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	07db      	lsls	r3, r3, #31
 800286a:	d507      	bpl.n	800287c <__swbuf_r+0x6e>
 800286c:	2d0a      	cmp	r5, #10
 800286e:	d105      	bne.n	800287c <__swbuf_r+0x6e>
 8002870:	0021      	movs	r1, r4
 8002872:	0030      	movs	r0, r6
 8002874:	f7ff ffa0 	bl	80027b8 <_fflush_r>
 8002878:	2800      	cmp	r0, #0
 800287a:	d107      	bne.n	800288c <__swbuf_r+0x7e>
 800287c:	0028      	movs	r0, r5
 800287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002880:	0021      	movs	r1, r4
 8002882:	0030      	movs	r0, r6
 8002884:	f000 f806 	bl	8002894 <__swsetup_r>
 8002888:	2800      	cmp	r0, #0
 800288a:	d0d3      	beq.n	8002834 <__swbuf_r+0x26>
 800288c:	2501      	movs	r5, #1
 800288e:	426d      	negs	r5, r5
 8002890:	e7f4      	b.n	800287c <__swbuf_r+0x6e>
	...

08002894 <__swsetup_r>:
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <__swsetup_r+0xc4>)
 8002896:	b570      	push	{r4, r5, r6, lr}
 8002898:	0005      	movs	r5, r0
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	000c      	movs	r4, r1
 800289e:	2800      	cmp	r0, #0
 80028a0:	d004      	beq.n	80028ac <__swsetup_r+0x18>
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <__swsetup_r+0x18>
 80028a8:	f7ff fa26 	bl	8001cf8 <__sinit>
 80028ac:	230c      	movs	r3, #12
 80028ae:	5ee2      	ldrsh	r2, [r4, r3]
 80028b0:	b293      	uxth	r3, r2
 80028b2:	0711      	lsls	r1, r2, #28
 80028b4:	d423      	bmi.n	80028fe <__swsetup_r+0x6a>
 80028b6:	06d9      	lsls	r1, r3, #27
 80028b8:	d407      	bmi.n	80028ca <__swsetup_r+0x36>
 80028ba:	2309      	movs	r3, #9
 80028bc:	2001      	movs	r0, #1
 80028be:	602b      	str	r3, [r5, #0]
 80028c0:	3337      	adds	r3, #55	; 0x37
 80028c2:	4313      	orrs	r3, r2
 80028c4:	81a3      	strh	r3, [r4, #12]
 80028c6:	4240      	negs	r0, r0
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	075b      	lsls	r3, r3, #29
 80028cc:	d513      	bpl.n	80028f6 <__swsetup_r+0x62>
 80028ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028d0:	2900      	cmp	r1, #0
 80028d2:	d008      	beq.n	80028e6 <__swsetup_r+0x52>
 80028d4:	0023      	movs	r3, r4
 80028d6:	3344      	adds	r3, #68	; 0x44
 80028d8:	4299      	cmp	r1, r3
 80028da:	d002      	beq.n	80028e2 <__swsetup_r+0x4e>
 80028dc:	0028      	movs	r0, r5
 80028de:	f7ff fb1f 	bl	8001f20 <_free_r>
 80028e2:	2300      	movs	r3, #0
 80028e4:	6363      	str	r3, [r4, #52]	; 0x34
 80028e6:	2224      	movs	r2, #36	; 0x24
 80028e8:	89a3      	ldrh	r3, [r4, #12]
 80028ea:	4393      	bics	r3, r2
 80028ec:	81a3      	strh	r3, [r4, #12]
 80028ee:	2300      	movs	r3, #0
 80028f0:	6063      	str	r3, [r4, #4]
 80028f2:	6923      	ldr	r3, [r4, #16]
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	2308      	movs	r3, #8
 80028f8:	89a2      	ldrh	r2, [r4, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	81a3      	strh	r3, [r4, #12]
 80028fe:	6923      	ldr	r3, [r4, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <__swsetup_r+0x88>
 8002904:	21a0      	movs	r1, #160	; 0xa0
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	0089      	lsls	r1, r1, #2
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	400b      	ands	r3, r1
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <__swsetup_r+0x88>
 8002914:	0021      	movs	r1, r4
 8002916:	0028      	movs	r0, r5
 8002918:	f000 f866 	bl	80029e8 <__smakebuf_r>
 800291c:	220c      	movs	r2, #12
 800291e:	5ea3      	ldrsh	r3, [r4, r2]
 8002920:	2001      	movs	r0, #1
 8002922:	001a      	movs	r2, r3
 8002924:	b299      	uxth	r1, r3
 8002926:	4002      	ands	r2, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00f      	beq.n	800294c <__swsetup_r+0xb8>
 800292c:	2200      	movs	r2, #0
 800292e:	60a2      	str	r2, [r4, #8]
 8002930:	6962      	ldr	r2, [r4, #20]
 8002932:	4252      	negs	r2, r2
 8002934:	61a2      	str	r2, [r4, #24]
 8002936:	2000      	movs	r0, #0
 8002938:	6922      	ldr	r2, [r4, #16]
 800293a:	4282      	cmp	r2, r0
 800293c:	d1c4      	bne.n	80028c8 <__swsetup_r+0x34>
 800293e:	0609      	lsls	r1, r1, #24
 8002940:	d5c2      	bpl.n	80028c8 <__swsetup_r+0x34>
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	4313      	orrs	r3, r2
 8002946:	81a3      	strh	r3, [r4, #12]
 8002948:	3801      	subs	r0, #1
 800294a:	e7bd      	b.n	80028c8 <__swsetup_r+0x34>
 800294c:	0788      	lsls	r0, r1, #30
 800294e:	d400      	bmi.n	8002952 <__swsetup_r+0xbe>
 8002950:	6962      	ldr	r2, [r4, #20]
 8002952:	60a2      	str	r2, [r4, #8]
 8002954:	e7ef      	b.n	8002936 <__swsetup_r+0xa2>
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000064 	.word	0x20000064

0800295c <_sbrk_r>:
 800295c:	2300      	movs	r3, #0
 800295e:	b570      	push	{r4, r5, r6, lr}
 8002960:	4d06      	ldr	r5, [pc, #24]	; (800297c <_sbrk_r+0x20>)
 8002962:	0004      	movs	r4, r0
 8002964:	0008      	movs	r0, r1
 8002966:	602b      	str	r3, [r5, #0]
 8002968:	f7fd fe0c 	bl	8000584 <_sbrk>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d103      	bne.n	8002978 <_sbrk_r+0x1c>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d000      	beq.n	8002978 <_sbrk_r+0x1c>
 8002976:	6023      	str	r3, [r4, #0]
 8002978:	bd70      	pop	{r4, r5, r6, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	2000025c 	.word	0x2000025c

08002980 <memchr>:
 8002980:	b2c9      	uxtb	r1, r1
 8002982:	1882      	adds	r2, r0, r2
 8002984:	4290      	cmp	r0, r2
 8002986:	d101      	bne.n	800298c <memchr+0xc>
 8002988:	2000      	movs	r0, #0
 800298a:	4770      	bx	lr
 800298c:	7803      	ldrb	r3, [r0, #0]
 800298e:	428b      	cmp	r3, r1
 8002990:	d0fb      	beq.n	800298a <memchr+0xa>
 8002992:	3001      	adds	r0, #1
 8002994:	e7f6      	b.n	8002984 <memchr+0x4>
	...

08002998 <__swhatbuf_r>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	000e      	movs	r6, r1
 800299c:	001d      	movs	r5, r3
 800299e:	230e      	movs	r3, #14
 80029a0:	5ec9      	ldrsh	r1, [r1, r3]
 80029a2:	0014      	movs	r4, r2
 80029a4:	b096      	sub	sp, #88	; 0x58
 80029a6:	2900      	cmp	r1, #0
 80029a8:	da0c      	bge.n	80029c4 <__swhatbuf_r+0x2c>
 80029aa:	89b2      	ldrh	r2, [r6, #12]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	0011      	movs	r1, r2
 80029b0:	4019      	ands	r1, r3
 80029b2:	421a      	tst	r2, r3
 80029b4:	d013      	beq.n	80029de <__swhatbuf_r+0x46>
 80029b6:	2100      	movs	r1, #0
 80029b8:	3b40      	subs	r3, #64	; 0x40
 80029ba:	2000      	movs	r0, #0
 80029bc:	6029      	str	r1, [r5, #0]
 80029be:	6023      	str	r3, [r4, #0]
 80029c0:	b016      	add	sp, #88	; 0x58
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	466a      	mov	r2, sp
 80029c6:	f000 f84d 	bl	8002a64 <_fstat_r>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	dbed      	blt.n	80029aa <__swhatbuf_r+0x12>
 80029ce:	23f0      	movs	r3, #240	; 0xf0
 80029d0:	9901      	ldr	r1, [sp, #4]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4019      	ands	r1, r3
 80029d6:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <__swhatbuf_r+0x4c>)
 80029d8:	18c9      	adds	r1, r1, r3
 80029da:	424b      	negs	r3, r1
 80029dc:	4159      	adcs	r1, r3
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	e7ea      	b.n	80029ba <__swhatbuf_r+0x22>
 80029e4:	ffffe000 	.word	0xffffe000

080029e8 <__smakebuf_r>:
 80029e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ea:	2602      	movs	r6, #2
 80029ec:	898b      	ldrh	r3, [r1, #12]
 80029ee:	0005      	movs	r5, r0
 80029f0:	000c      	movs	r4, r1
 80029f2:	4233      	tst	r3, r6
 80029f4:	d006      	beq.n	8002a04 <__smakebuf_r+0x1c>
 80029f6:	0023      	movs	r3, r4
 80029f8:	3347      	adds	r3, #71	; 0x47
 80029fa:	6023      	str	r3, [r4, #0]
 80029fc:	6123      	str	r3, [r4, #16]
 80029fe:	2301      	movs	r3, #1
 8002a00:	6163      	str	r3, [r4, #20]
 8002a02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002a04:	466a      	mov	r2, sp
 8002a06:	ab01      	add	r3, sp, #4
 8002a08:	f7ff ffc6 	bl	8002998 <__swhatbuf_r>
 8002a0c:	9900      	ldr	r1, [sp, #0]
 8002a0e:	0007      	movs	r7, r0
 8002a10:	0028      	movs	r0, r5
 8002a12:	f7ff faf1 	bl	8001ff8 <_malloc_r>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d108      	bne.n	8002a2c <__smakebuf_r+0x44>
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	5ea3      	ldrsh	r3, [r4, r2]
 8002a1e:	059a      	lsls	r2, r3, #22
 8002a20:	d4ef      	bmi.n	8002a02 <__smakebuf_r+0x1a>
 8002a22:	2203      	movs	r2, #3
 8002a24:	4393      	bics	r3, r2
 8002a26:	431e      	orrs	r6, r3
 8002a28:	81a6      	strh	r6, [r4, #12]
 8002a2a:	e7e4      	b.n	80029f6 <__smakebuf_r+0xe>
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	89a2      	ldrh	r2, [r4, #12]
 8002a30:	6020      	str	r0, [r4, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	81a3      	strh	r3, [r4, #12]
 8002a36:	9b00      	ldr	r3, [sp, #0]
 8002a38:	6120      	str	r0, [r4, #16]
 8002a3a:	6163      	str	r3, [r4, #20]
 8002a3c:	9b01      	ldr	r3, [sp, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <__smakebuf_r+0x74>
 8002a42:	0028      	movs	r0, r5
 8002a44:	230e      	movs	r3, #14
 8002a46:	5ee1      	ldrsh	r1, [r4, r3]
 8002a48:	f000 f81e 	bl	8002a88 <_isatty_r>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d005      	beq.n	8002a5c <__smakebuf_r+0x74>
 8002a50:	2303      	movs	r3, #3
 8002a52:	89a2      	ldrh	r2, [r4, #12]
 8002a54:	439a      	bics	r2, r3
 8002a56:	3b02      	subs	r3, #2
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	81a3      	strh	r3, [r4, #12]
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	433b      	orrs	r3, r7
 8002a60:	81a3      	strh	r3, [r4, #12]
 8002a62:	e7ce      	b.n	8002a02 <__smakebuf_r+0x1a>

08002a64 <_fstat_r>:
 8002a64:	2300      	movs	r3, #0
 8002a66:	b570      	push	{r4, r5, r6, lr}
 8002a68:	4d06      	ldr	r5, [pc, #24]	; (8002a84 <_fstat_r+0x20>)
 8002a6a:	0004      	movs	r4, r0
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	0011      	movs	r1, r2
 8002a70:	602b      	str	r3, [r5, #0]
 8002a72:	f7fd fd65 	bl	8000540 <_fstat>
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	d103      	bne.n	8002a82 <_fstat_r+0x1e>
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d000      	beq.n	8002a82 <_fstat_r+0x1e>
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	2000025c 	.word	0x2000025c

08002a88 <_isatty_r>:
 8002a88:	2300      	movs	r3, #0
 8002a8a:	b570      	push	{r4, r5, r6, lr}
 8002a8c:	4d06      	ldr	r5, [pc, #24]	; (8002aa8 <_isatty_r+0x20>)
 8002a8e:	0004      	movs	r4, r0
 8002a90:	0008      	movs	r0, r1
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	f7fd fd62 	bl	800055c <_isatty>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d103      	bne.n	8002aa4 <_isatty_r+0x1c>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d000      	beq.n	8002aa4 <_isatty_r+0x1c>
 8002aa2:	6023      	str	r3, [r4, #0]
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	2000025c 	.word	0x2000025c

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
